1
00:00:00,000 --> 00:00:03,560
好,我们接下来看样式迁移的实现

2
00:00:03,560 --> 00:00:08,040
首先我们干的事情就是把我们的图片导入进来

3
00:00:08,040 --> 00:00:11,400
第一个是我们的内容图片,就是拍的那个山

4
00:00:11,400 --> 00:00:17,600
第二个是我们的样式图片,就是一个秋天的像素的油画

5
00:00:17,600 --> 00:00:21,039
我们的样式图片存在Content Image里面

6
00:00:21,039 --> 00:00:25,400
我们的内容图片在Content Image里面

7
00:00:25,400 --> 00:00:27,400
我们的样式图片在Style Image里面

8
00:00:30,199 --> 00:00:32,000
接下来我们定义两个函数

9
00:00:32,000 --> 00:00:34,399
这个函数其实要干得很简单

10
00:00:34,399 --> 00:00:35,799
给张图片进来

11
00:00:35,799 --> 00:00:38,600
我们做resize成我们要的样子

12
00:00:38,600 --> 00:00:40,600
然后我们转成我们的Tensor

13
00:00:40,600 --> 00:00:43,000
然后在RGB上做normalization

14
00:00:43,000 --> 00:00:45,200
因为我们要用我们的pre-trained模型

15
00:00:45,200 --> 00:00:48,600
所以我们用了ImageNet上的RGB的normalization

16
00:00:48,600 --> 00:00:51,000
Post Process就是反过来了

17
00:00:51,000 --> 00:00:56,000
就是把你的RGB给换回去

18
00:00:56,200 --> 00:01:00,399
然后把你的标准方向一缠

19
00:01:00,399 --> 00:01:06,599
加上均值就还原到我们要的那个没有做过normalization之前

20
00:01:06,599 --> 00:01:12,200
然后就说大于1的不要,小于0的换成0

21
00:01:12,200 --> 00:01:13,000
大于1的换成1

22
00:01:13,000 --> 00:01:15,599
这样子能够只是合理的范围

23
00:01:15,599 --> 00:01:17,799
最后可以返回张图片

24
00:01:17,799 --> 00:01:22,000
所以pre-process就是一张图片变成一个能够训练的一个Tensor

25
00:01:22,200 --> 00:01:27,000
Post Process就是Tensor会变回到我的图片

26
00:01:27,000 --> 00:01:28,599
OK,这就是这两个函数

27
00:01:30,799 --> 00:01:33,599
好,接下来就是它的一个核心了

28
00:01:33,599 --> 00:01:35,200
就是说怎么抽取特征

29
00:01:36,799 --> 00:01:39,400
首先我们用的特征是VGG19

30
00:01:39,400 --> 00:01:41,400
我没有讲过这个模型

31
00:01:41,400 --> 00:01:45,400
之所以用这个模型纯粹是因为原始论文中用的是VGG19

32
00:01:45,400 --> 00:01:47,599
而且效果确实还不错

33
00:01:47,599 --> 00:01:49,799
你可能你可以换成ResNet也可以

34
00:01:50,200 --> 00:01:53,000
但不见得就比VGG19效果好

35
00:01:53,000 --> 00:01:58,399
因为VGG19对VGG系列对抽取特征来说还是真不错的一个模型

36
00:01:59,399 --> 00:02:04,200
好,接下来看一下我的样式层和我的内容层

37
00:02:06,000 --> 00:02:11,400
所谓的样式层就是说哪些层的输出用来匹配样式

38
00:02:12,199 --> 00:02:16,199
可以看到是说我们是从0,5,10到28

39
00:02:17,199 --> 00:02:20,000
就是说越小就是越靠近输入

40
00:02:20,000 --> 00:02:22,000
就越大就越靠近输出

41
00:02:22,399 --> 00:02:27,199
就我们知道越往下越靠近输入就是越去匹配局部的信息

42
00:02:27,599 --> 00:02:32,000
样式就是说越往上就越匹配一些全局的信息

43
00:02:32,599 --> 00:02:37,599
就是样式我们可以看到是我们既想匹配一些局部的一些细节

44
00:02:37,599 --> 00:02:42,599
就是说那些局部的笔触油画也好还是动画也好

45
00:02:43,000 --> 00:02:48,599
我也想去匹配一些高级的高端的全局的一些整个图片的信息

46
00:02:49,000 --> 00:02:53,000
所以你可以看到样式我们就取了最小的层

47
00:02:53,000 --> 00:02:55,000
中间层和最上面的层

48
00:02:55,000 --> 00:02:56,599
就基本上是比较均匀的选

49
00:02:58,799 --> 00:03:02,000
就是我们既想要局部的样式也想要全局的样式

50
00:03:03,000 --> 00:03:03,799
内容呢

51
00:03:04,400 --> 00:03:07,400
内容的话我们就取了一个相对来说比较靠后了

52
00:03:08,000 --> 00:03:11,000
就基本上说你越靠近你的底层

53
00:03:11,199 --> 00:03:12,599
越靠近数据的话

54
00:03:12,599 --> 00:03:14,199
你选取它来匹配的话

55
00:03:14,199 --> 00:03:16,199
那么你对内容的还原就越好

56
00:03:17,000 --> 00:03:20,000
因为卷迹层就不断的把你的内容抽象抽象

57
00:03:20,400 --> 00:03:23,000
你越想往下你的细节还原越好

58
00:03:23,000 --> 00:03:26,599
越往上就是说你允许你做一些变形

59
00:03:27,000 --> 00:03:30,000
所以我们就是不需要那么的去还原我们的内容

60
00:03:30,000 --> 00:03:31,000
可以允许变形

61
00:03:31,000 --> 00:03:33,800
所以我们取的相对是比较偏后的

62
00:03:35,199 --> 00:03:35,599
OK

63
00:03:36,400 --> 00:03:38,599
所以有这些层之后我们就把我们的网络拿出来

64
00:03:39,000 --> 00:03:42,599
我们只需要最多28层后面的就不要了

65
00:03:42,599 --> 00:03:46,199
所以这个意思是说你还有28层以后的那些层

66
00:03:46,199 --> 00:03:47,000
我就丢掉

67
00:03:47,000 --> 00:03:48,599
就是只剩下net

68
00:03:50,199 --> 00:03:51,199
接下来这个函数

69
00:03:52,400 --> 00:03:53,199
是干嘛呢

70
00:03:53,799 --> 00:03:54,799
给定我的X

71
00:03:56,400 --> 00:03:59,599
给定我要的样式层和我的内容层

72
00:04:00,400 --> 00:04:01,199
我来抽特征

73
00:04:02,000 --> 00:04:03,000
特征其实很简单

74
00:04:03,000 --> 00:04:04,799
就是你一个图片进去

75
00:04:04,799 --> 00:04:06,000
我一层一层往下抽

76
00:04:06,000 --> 00:04:07,000
就是一层一层

77
00:04:07,000 --> 00:04:09,000
每次DI一层算一下

78
00:04:09,599 --> 00:04:11,400
如果你这个I在我的样式里面

79
00:04:11,400 --> 00:04:13,199
我就把你返回在样式

80
00:04:13,199 --> 00:04:14,400
如果你在我的内容里面

81
00:04:14,400 --> 00:04:15,599
我就返回成内容

82
00:04:15,599 --> 00:04:17,800
最后把内容和样式全部返回回去

83
00:04:17,800 --> 00:04:19,399
就是我的特征就抽好了

84
00:04:20,199 --> 00:04:21,600
那么这个函数就是说

85
00:04:22,600 --> 00:04:23,600
把内容拿出来

86
00:04:23,600 --> 00:04:24,600
把样式拿出来

87
00:04:24,600 --> 00:04:25,800
就是给我一张

88
00:04:26,800 --> 00:04:28,199
就给我的image shape

89
00:04:28,600 --> 00:04:31,000
就是把content的image

90
00:04:31,000 --> 00:04:33,300
我知道content image是固定住的

91
00:04:33,300 --> 00:04:35,199
所以把它处理成我要的

92
00:04:35,800 --> 00:04:36,800
Tensor形式

93
00:04:36,800 --> 00:04:38,800
把的特征全部抽出来

94
00:04:38,800 --> 00:04:39,599
放在这个地方

95
00:04:40,599 --> 00:04:41,599
样式也是一样的

96
00:04:41,599 --> 00:04:43,199
全部抽在放在这个地方

97
00:04:43,599 --> 00:04:44,599
为什么我们可以这么做

98
00:04:44,599 --> 00:04:45,800
是因为我们

99
00:04:46,399 --> 00:04:47,599
不改变内容图片

100
00:04:47,599 --> 00:04:49,000
也不改变样式图片

101
00:04:49,000 --> 00:04:50,800
也不改变我们的CN的权重

102
00:04:50,800 --> 00:04:52,800
所以我们可以一开始全部抽好

103
00:04:52,800 --> 00:04:53,800
就不动了

104
00:04:53,800 --> 00:04:55,599
就免得我们以后还要上个不停

105
00:04:56,599 --> 00:04:57,000
OK

106
00:04:57,000 --> 00:04:58,399
所以这是这个干的事情

107
00:05:00,599 --> 00:05:02,800
接下来是另一个关键

108
00:05:02,800 --> 00:05:03,800
定义损失

109
00:05:05,199 --> 00:05:06,800
首先内容损失

110
00:05:07,000 --> 00:05:08,000
内容损失是

111
00:05:10,399 --> 00:05:11,599
最简单就是Yhat

112
00:05:11,599 --> 00:05:12,399
就是我的

113
00:05:14,000 --> 00:05:15,599
生成图片的内容

114
00:05:16,399 --> 00:05:17,199
层的输出

115
00:05:17,199 --> 00:05:19,800
Y就是我的真正内容图片

116
00:05:19,800 --> 00:05:21,399
那些内容层的那些特征

117
00:05:22,000 --> 00:05:23,199
内容就比较简单

118
00:05:23,199 --> 00:05:25,000
就是一个军方误差

119
00:05:25,399 --> 00:05:26,399
就Square一下

120
00:05:26,399 --> 00:05:27,000
然后取个命

121
00:05:27,199 --> 00:05:28,199
军方误差

122
00:05:29,199 --> 00:05:31,399
关键的是怎么匹配样式

123
00:05:32,599 --> 00:05:33,399
就我们想一想

124
00:05:33,399 --> 00:05:34,599
怎么匹配个样式

125
00:05:35,000 --> 00:05:37,000
我们说两张图片的样式一样

126
00:05:37,000 --> 00:05:38,000
这个怎么理解

127
00:05:38,600 --> 00:05:39,800
就一个理解是说

128
00:05:39,800 --> 00:05:40,800
我们拍照片

129
00:05:43,000 --> 00:05:44,200
如果是用相机的话

130
00:05:44,200 --> 00:05:45,000
它会告诉你说

131
00:05:45,000 --> 00:05:47,400
你RGB的直方图长什么样子

132
00:05:48,200 --> 00:05:50,200
就你大概可以通过直方图来理解

133
00:05:50,200 --> 00:05:50,600
这个样式

134
00:05:50,600 --> 00:05:51,400
就是说你是

135
00:05:52,400 --> 00:05:54,200
红的偏红还是偏蓝

136
00:05:54,400 --> 00:05:55,800
然后你是不是过曝了

137
00:05:55,800 --> 00:05:56,400
还是欠曝了

138
00:05:56,400 --> 00:05:57,800
还是整个在中间

139
00:05:58,200 --> 00:05:59,800
就说你大概能够这么理解

140
00:06:01,200 --> 00:06:03,600
所以它这个工作就是说

141
00:06:04,000 --> 00:06:05,600
你的样式就是应该是说

142
00:06:05,600 --> 00:06:06,600
你的通道

143
00:06:07,800 --> 00:06:11,200
每个通道里面这些像素的统计信息

144
00:06:11,200 --> 00:06:13,600
和通道之间的这些统计信息

145
00:06:13,600 --> 00:06:14,600
就是你的样式

146
00:06:15,200 --> 00:06:16,480
假设两张图片

147
00:06:16,480 --> 00:06:17,800
它是样式是一样

148
00:06:17,800 --> 00:06:19,000
就意味着是说

149
00:06:19,000 --> 00:06:21,000
它的那些卷积层的那些输出

150
00:06:21,600 --> 00:06:25,600
那些输出里面不是像素级别的一样

151
00:06:26,000 --> 00:06:27,800
这元素值我不需要一样

152
00:06:27,800 --> 00:06:29,000
因为那是内容

153
00:06:29,000 --> 00:06:30,000
样式就是说

154
00:06:30,000 --> 00:06:32,800
那些通道之间的那些统计分布

155
00:06:32,800 --> 00:06:35,000
和就里面的统计分布

156
00:06:35,000 --> 00:06:36,600
和之间的统计分布

157
00:06:36,600 --> 00:06:38,600
是差不多是能够匹配上的

158
00:06:40,400 --> 00:06:42,000
匹配两个统计分布

159
00:06:42,199 --> 00:06:42,720
就多

160
00:06:42,720 --> 00:06:44,000
就是说你可认为

161
00:06:45,199 --> 00:06:48,000
你叫匹配一阶二阶三阶统计信息

162
00:06:48,000 --> 00:06:49,400
就一直匹配下去

163
00:06:49,600 --> 00:06:51,400
我们可以本来做简单一点

164
00:06:51,600 --> 00:06:53,400
就一阶统计信息是均值

165
00:06:53,400 --> 00:06:55,000
均值我们就认为是零了

166
00:06:55,400 --> 00:06:58,000
那么接下来就是一个二阶

167
00:06:58,000 --> 00:06:59,199
二阶就是它的斜方叉

168
00:06:59,199 --> 00:07:01,600
或者就做Gran matrix

169
00:07:01,600 --> 00:07:02,600
就Gran局层

170
00:07:03,800 --> 00:07:04,800
就这个函数

171
00:07:04,800 --> 00:07:06,800
就是说我们计算一个Gran局层

172
00:07:06,800 --> 00:07:07,400
怎么算

173
00:07:08,000 --> 00:07:09,000
X进来

174
00:07:09,000 --> 00:07:10,000
X就是Channel

175
00:07:10,400 --> 00:07:12,400
有高宽

176
00:07:12,400 --> 00:07:13,400
就批量是1

177
00:07:13,400 --> 00:07:13,800
反正

178
00:07:14,199 --> 00:07:15,600
然后Channel数拿出来

179
00:07:15,800 --> 00:07:17,800
高宽一乘起来就是N

180
00:07:18,400 --> 00:07:21,000
我们把它变成一个Channel乘以

181
00:07:22,000 --> 00:07:23,400
每个里面的

182
00:07:23,600 --> 00:07:24,400
就每一行

183
00:07:24,400 --> 00:07:27,400
就是你整个通道里面所有的像素

184
00:07:28,199 --> 00:07:30,600
然后你让你X和它做斜方叉

185
00:07:31,400 --> 00:07:32,400
做完斜方叉之后

186
00:07:32,400 --> 00:07:35,000
我们再乘除以它的通道数和除以N

187
00:07:35,000 --> 00:07:36,800
就是把它做好Normalization

188
00:07:36,800 --> 00:07:38,600
就是说使得每个

189
00:07:39,000 --> 00:07:40,800
不同的层抽出来的Gran

190
00:07:40,800 --> 00:07:42,600
Matrix的数值都差不多

191
00:07:42,600 --> 00:07:44,200
就是除这个干这个事情

192
00:07:46,400 --> 00:07:47,800
那么接下来就是说

193
00:07:48,400 --> 00:07:49,800
Style算是就是说

194
00:07:49,800 --> 00:07:50,800
给定我的Y

195
00:07:50,800 --> 00:07:52,200
就是我把它的

196
00:07:53,000 --> 00:07:54,200
Gran局层算出来

197
00:07:54,800 --> 00:07:55,800
然后这个Y

198
00:07:56,000 --> 00:07:56,800
就是你的

199
00:07:57,000 --> 00:07:58,600
样式图片的Y

200
00:07:58,800 --> 00:08:00,200
就是我们可以提前算好

201
00:08:00,200 --> 00:08:01,000
把它Gran算好

202
00:08:01,000 --> 00:08:03,199
所以我们就不要每次都算它了

203
00:08:03,600 --> 00:08:07,600
然后就比较Gran局层的

204
00:08:09,000 --> 00:08:09,800
均发误差

205
00:08:10,000 --> 00:08:11,800
这是我的样式损失

206
00:08:12,800 --> 00:08:13,600
好最后一个损失

207
00:08:13,600 --> 00:08:15,600
就是它的叫Total Variance

208
00:08:15,600 --> 00:08:18,000
它匹配的就每个像素跟它的

209
00:08:19,199 --> 00:08:21,800
上下左右的像素之间的绝对值

210
00:08:21,800 --> 00:08:23,199
就不要差太多

211
00:08:23,199 --> 00:08:25,399
就是使得你整个图片比较平均

212
00:08:25,399 --> 00:08:26,800
不要有太多噪点

213
00:08:27,000 --> 00:08:28,399
这也是通常用的

214
00:08:28,399 --> 00:08:30,399
图片降噪的一个算法

215
00:08:31,000 --> 00:08:32,399
叫做TV降噪

216
00:08:32,799 --> 00:08:34,600
所以我们把它定义成一个损失

217
00:08:35,000 --> 00:08:35,600
OK

218
00:08:35,600 --> 00:08:37,799
这样子我们就有了三个损失了

219
00:08:38,200 --> 00:08:39,000
最后我们来看一下

220
00:08:39,000 --> 00:08:40,600
就是说我们怎么来训练的

221
00:08:40,799 --> 00:08:42,799
训练的话就是比较简单

222
00:08:42,799 --> 00:08:43,399
就是

223
00:08:43,799 --> 00:08:45,000
我们的Weights

224
00:08:45,000 --> 00:08:46,600
就是说每一个都有一个Weights

225
00:08:46,799 --> 00:08:49,000
我们的Content的权重是这样子

226
00:08:49,000 --> 00:08:50,799
我们的Style的权重是这样子

227
00:08:51,000 --> 00:08:53,200
我们的TV损失

228
00:08:54,200 --> 00:08:55,799
的权重是这个样子

229
00:08:56,600 --> 00:08:57,000
OK

230
00:08:57,200 --> 00:08:58,399
然后可以看到是

231
00:08:58,399 --> 00:09:01,399
我们给定我们的X之后

232
00:09:02,000 --> 00:09:05,000
然后我们去给定我们一些东西

233
00:09:05,000 --> 00:09:05,799
我们就仔细看一下

234
00:09:05,799 --> 00:09:07,000
这个长什么样子

235
00:09:07,399 --> 00:09:09,600
首先我们要知道Content的Loss

236
00:09:09,799 --> 00:09:11,600
然后说我们的Weight和它

237
00:09:11,600 --> 00:09:14,399
然后乘以我的权重

238
00:09:14,799 --> 00:09:16,399
对所有的我们

239
00:09:16,399 --> 00:09:17,399
就是我们要知道

240
00:09:17,399 --> 00:09:18,199
我们其实就一层

241
00:09:18,399 --> 00:09:19,000
当然

242
00:09:19,000 --> 00:09:20,199
然后每一层我们

243
00:09:20,399 --> 00:09:21,000
迭代一下

244
00:09:21,000 --> 00:09:22,399
然后对损失的话

245
00:09:22,399 --> 00:09:23,600
Style损失是一样的

246
00:09:23,600 --> 00:09:24,799
我们有很多层

247
00:09:25,399 --> 00:09:26,600
就每一层

248
00:09:26,600 --> 00:09:27,799
它会出来一个对吧

249
00:09:27,800 --> 00:09:29,400
我们就算一下Style Loss

250
00:09:29,400 --> 00:09:30,800
然后再乘以我们的权重

251
00:09:30,800 --> 00:09:31,400
然后这样子

252
00:09:31,400 --> 00:09:33,800
我们把所有的内容损失

253
00:09:33,800 --> 00:09:35,200
Style损失加在一起

254
00:09:35,400 --> 00:09:37,600
然后我的Total Variance损失也是一样的

255
00:09:37,600 --> 00:09:39,400
就是直接的X求损失

256
00:09:39,400 --> 00:09:40,600
然后加上Weights

257
00:09:42,600 --> 00:09:44,200
这个地方我们还

258
00:09:44,600 --> 00:09:47,400
额外在Style损失上做了一个10

259
00:09:48,200 --> 00:09:49,000
加了一个

260
00:09:49,000 --> 00:09:50,400
做了一个10倍的这个地方

261
00:09:52,000 --> 00:09:54,000
最后我们返回我们的这些损失

262
00:09:54,000 --> 00:09:56,200
就是这个是所有的损失

263
00:09:56,800 --> 00:09:57,400
当然这个10

264
00:09:57,399 --> 00:09:58,199
其实你是

265
00:09:58,199 --> 00:09:59,799
我觉得应该是写在

266
00:10:00,399 --> 00:10:01,799
写在这个地方是更好

267
00:10:01,799 --> 00:10:03,000
把它变成14

268
00:10:03,000 --> 00:10:04,399
不要把它这个是放在这里

269
00:10:04,600 --> 00:10:06,600
我觉得应该是一个历史一个问题

270
00:10:09,399 --> 00:10:09,799
好

271
00:10:09,799 --> 00:10:11,000
那么接下来就是说

272
00:10:11,000 --> 00:10:12,799
我们就定义了所有的损失

273
00:10:12,799 --> 00:10:15,000
和怎么计算损失函数

274
00:10:15,799 --> 00:10:17,000
那么接下来就是说

275
00:10:17,399 --> 00:10:19,000
我们知道我们要训练的

276
00:10:19,000 --> 00:10:20,399
训练的是那个X

277
00:10:22,399 --> 00:10:25,000
我们要训练的是我们的图片

278
00:10:26,000 --> 00:10:27,399
所以我们不再去训练

279
00:10:27,399 --> 00:10:29,000
我们的卷积神经

280
00:10:29,000 --> 00:10:29,600
往往权重

281
00:10:29,799 --> 00:10:31,000
我们只是要对X

282
00:10:31,000 --> 00:10:32,000
所以这个地方

283
00:10:32,000 --> 00:10:34,399
我们创造一个模具的类

284
00:10:34,799 --> 00:10:35,799
它能干嘛

285
00:10:36,399 --> 00:10:37,399
它其实不干什么事情

286
00:10:37,399 --> 00:10:40,399
它就是说告诉你图片的Shape

287
00:10:40,399 --> 00:10:42,399
我就生成一个它的Weights

288
00:10:43,000 --> 00:10:45,000
就是我那张要生成的图片

289
00:10:45,200 --> 00:10:47,600
我就一开始反正就是随机化一下了

290
00:10:47,600 --> 00:10:49,000
就是取一个random

291
00:10:49,200 --> 00:10:50,399
就是全部是随机制

292
00:10:50,799 --> 00:10:52,000
所以我的fold干嘛了

293
00:10:52,000 --> 00:10:53,799
fold就把这个Weights拿出去

294
00:10:54,200 --> 00:10:57,000
就是那个东西W拿出去

295
00:10:57,000 --> 00:10:58,800
然后做一个Identity Map对吧

296
00:11:00,200 --> 00:11:01,200
为什么你要这么

297
00:11:01,200 --> 00:11:02,600
为什么你要这个地方要这么做

298
00:11:02,600 --> 00:11:04,600
是因为我这么定义之后

299
00:11:04,600 --> 00:11:06,200
我就可以对我的Weights

300
00:11:06,400 --> 00:11:08,200
算我的T度

301
00:11:08,200 --> 00:11:09,400
然后对它进行更新

302
00:11:09,400 --> 00:11:10,600
最后得到我要的东西

303
00:11:12,200 --> 00:11:12,800
OK

304
00:11:13,000 --> 00:11:15,000
所以你看我们的初始函数怎么做

305
00:11:15,400 --> 00:11:17,400
初始函数就是说我们调用这个

306
00:11:17,800 --> 00:11:18,800
合成图片

307
00:11:19,200 --> 00:11:21,600
然后我们得到我们的图片

308
00:11:21,600 --> 00:11:22,800
另外一个我们

309
00:11:23,000 --> 00:11:24,400
跟我们之前是一样的

310
00:11:25,800 --> 00:11:28,400
我们可以去怎么说

311
00:11:28,400 --> 00:11:31,600
我们可以去做一个好的初始化

312
00:11:31,600 --> 00:11:33,000
就是说假设你觉得

313
00:11:33,600 --> 00:11:35,000
合成图片你可以

314
00:11:35,000 --> 00:11:37,400
就是说你可以用内容图片的本身

315
00:11:37,400 --> 00:11:39,200
做成合成图片的初始值

316
00:11:39,200 --> 00:11:40,600
就是说你从它开始

317
00:11:40,600 --> 00:11:41,800
不要从随机开始

318
00:11:42,000 --> 00:11:45,000
或者说你用说我用样式图片

319
00:11:45,000 --> 00:11:46,800
做成初始值也可以

320
00:11:46,800 --> 00:11:48,400
那么就是说我

321
00:11:48,400 --> 00:11:50,200
如果你觉得这个不错的话

322
00:11:50,200 --> 00:11:51,600
那就是我就把这个x

323
00:11:53,000 --> 00:11:55,000
overwrite掉我的初始化

324
00:11:55,000 --> 00:11:58,200
就跟我们之前做那个fine tuning也好

325
00:11:58,400 --> 00:12:00,800
做我们之前转制卷集成也好

326
00:12:00,800 --> 00:12:01,800
其实是一个效果

327
00:12:03,000 --> 00:12:04,800
优化的话我们用的是add

328
00:12:05,400 --> 00:12:06,400
然后我这个东西是

329
00:12:06,400 --> 00:12:07,800
我们预先把这种算好

330
00:12:08,000 --> 00:12:10,000
因为我们知道说这个东西反正不便

331
00:12:10,200 --> 00:12:11,600
算这个东西也不便宜

332
00:12:11,600 --> 00:12:13,400
所以我们就预先所有的style

333
00:12:13,400 --> 00:12:15,200
那个grammature全部算好

334
00:12:15,600 --> 00:12:16,000
OK

335
00:12:16,000 --> 00:12:17,400
这是我们的初始化

336
00:12:19,000 --> 00:12:20,160
最后的话我们就训练了

337
00:12:20,159 --> 00:12:20,759
训练的话

338
00:12:20,759 --> 00:12:22,559
其实跟之前没什么本质区别

339
00:12:26,559 --> 00:12:28,360
你告诉我一个初始值

340
00:12:28,360 --> 00:12:29,759
我的合成图片的初始值

341
00:12:29,959 --> 00:12:31,759
这些y这东西都是

342
00:12:32,159 --> 00:12:34,959
contents的y和style的y都是固定住的

343
00:12:34,959 --> 00:12:36,360
所以我们就可以传进来

344
00:12:36,759 --> 00:12:38,159
里面我们就不仔细讲了

345
00:12:38,559 --> 00:12:40,360
就核心思想是说

346
00:12:40,559 --> 00:12:43,159
你每次对x对图片

347
00:12:44,159 --> 00:12:45,959
我要抽取它的特征

348
00:12:45,959 --> 00:12:47,279
它的内容特征

349
00:12:47,279 --> 00:12:48,360
它的样式特征

350
00:12:48,759 --> 00:12:51,159
然后我们把它去算损失

351
00:12:51,159 --> 00:12:52,159
因为我们的

352
00:12:52,759 --> 00:12:54,560
内容图片和样式图片

353
00:12:54,560 --> 00:12:55,759
那些特征是不会变的

354
00:12:55,759 --> 00:12:57,759
所以我们直接全部算好了

355
00:12:57,759 --> 00:12:59,759
所以只要每次就更新它自己

356
00:12:59,759 --> 00:13:00,960
合成图片就行了

357
00:13:00,960 --> 00:13:03,560
然后算出损失得到三个损失

358
00:13:03,759 --> 00:13:05,960
然后这个是最后合起来的损失

359
00:13:06,360 --> 00:13:07,759
这三个是主要是给大家

360
00:13:08,159 --> 00:13:08,960
print一下用的

361
00:13:10,159 --> 00:13:11,759
然后对它能做backward

362
00:13:11,960 --> 00:13:12,680
backward之后

363
00:13:12,680 --> 00:13:13,480
然后再update

364
00:13:13,480 --> 00:13:14,960
然后就print一些东西了

365
00:13:15,159 --> 00:13:17,159
就是核心思想是这个东西

366
00:13:17,559 --> 00:13:18,559
就核心思想就是说

367
00:13:18,559 --> 00:13:20,759
跟我们之前的目标检测有点像

368
00:13:22,559 --> 00:13:24,159
你有n个损失

369
00:13:24,159 --> 00:13:26,360
然后你中间会有多了几个东西

370
00:13:29,159 --> 00:13:29,759
OK

371
00:13:29,759 --> 00:13:31,159
然后我们看一下训练模型

372
00:13:31,959 --> 00:13:33,759
就训练模型我们就是

373
00:13:33,759 --> 00:13:35,759
虽然我们图片是

374
00:13:36,159 --> 00:13:38,159
1000×2000的图片

375
00:13:38,559 --> 00:13:40,959
但我们这里训练一个比较小的

376
00:13:40,959 --> 00:13:42,559
300×450

377
00:13:44,559 --> 00:13:44,959
然后

378
00:13:48,159 --> 00:13:49,759
然后我们在

379
00:13:50,959 --> 00:13:52,759
这个东西都是预先抽好特征

380
00:13:53,360 --> 00:13:55,759
这个东西都是弄好之后

381
00:13:55,759 --> 00:13:57,559
就是说我们在训练时候可以看到

382
00:13:57,559 --> 00:14:00,360
是说我们是把内容图片

383
00:14:01,159 --> 00:14:03,159
作为初始图片放进去了

384
00:14:03,360 --> 00:14:04,480
就是说你在训练的时候

385
00:14:04,480 --> 00:14:06,279
我从以内容图片开始

386
00:14:06,559 --> 00:14:07,959
去训练我的东西

387
00:14:07,959 --> 00:14:09,559
然后你看到我们的

388
00:14:10,959 --> 00:14:13,360
我的TV损失是这样子的

389
00:14:13,360 --> 00:14:16,559
我的内容损失是这么下降的

390
00:14:16,560 --> 00:14:18,280
我的style损失是这样子

391
00:14:18,360 --> 00:14:20,160
style损失是因为我们其实

392
00:14:20,360 --> 00:14:22,560
这地方我们应该把时程回去

393
00:14:22,560 --> 00:14:23,960
所以看上去应该是

394
00:14:23,960 --> 00:14:26,960
他们三个应该在同一个尺

395
00:14:26,960 --> 00:14:28,160
尺寸上面

396
00:14:29,560 --> 00:14:30,760
然后就回到说

397
00:14:30,760 --> 00:14:33,160
我们权重到底怎么选的

398
00:14:33,560 --> 00:14:34,560
这三个权重

399
00:14:34,560 --> 00:14:37,960
其实是我们去看

400
00:14:37,960 --> 00:14:38,760
就是说你去

401
00:14:38,760 --> 00:14:40,280
你但没有想法的时候

402
00:14:40,280 --> 00:14:41,760
你就反正就是全部取一

403
00:14:41,880 --> 00:14:43,160
去训练

404
00:14:43,160 --> 00:14:46,280
然后你训练的差不多的时候

405
00:14:46,279 --> 00:14:46,879
你就看一下

406
00:14:47,079 --> 00:14:48,679
这个东西大概三个东西的

407
00:14:49,679 --> 00:14:50,879
一个是多大一个是多小

408
00:14:50,879 --> 00:14:51,279
就是说

409
00:14:51,279 --> 00:14:54,480
然后你就选取三个权重

410
00:14:54,480 --> 00:14:55,879
使得这三个损失

411
00:14:56,079 --> 00:14:58,679
大概值在差不多的值的范围里面

412
00:14:58,879 --> 00:14:59,679
就不要差太远

413
00:14:59,679 --> 00:15:01,679
不要差个10倍100倍也就行了

414
00:15:02,480 --> 00:15:03,079
OK

415
00:15:03,079 --> 00:15:05,879
所以这就是我们权重是怎么选出来的

416
00:15:05,879 --> 00:15:08,279
其实是因为是训练几次之后

417
00:15:08,279 --> 00:15:09,679
再回过去调出来的

418
00:15:10,679 --> 00:15:12,000
然后最后你的结果是

419
00:15:12,000 --> 00:15:13,279
大概是长个这个样子

420
00:15:13,480 --> 00:15:15,079
这是我们最后化学结果

421
00:15:15,280 --> 00:15:16,280
就基本上可以看到

422
00:15:16,280 --> 00:15:17,480
是说跟我们的

423
00:15:18,080 --> 00:15:19,480
刚刚slice讲的

424
00:15:19,480 --> 00:15:21,080
还是有区别的

425
00:15:21,280 --> 00:15:23,680
我们slice讲的是一个比较大的

426
00:15:23,680 --> 00:15:24,480
一个图片

427
00:15:25,080 --> 00:15:26,680
实际上你可以怎么做呢

428
00:15:27,480 --> 00:15:29,080
我们这里没有给大家实现

429
00:15:29,200 --> 00:15:30,879
大家可以作为练习去看一下

430
00:15:31,680 --> 00:15:32,480
就是说

431
00:15:33,280 --> 00:15:36,280
你可以先用300×450训练

432
00:15:36,879 --> 00:15:38,480
然后得到一个还不错的

433
00:15:38,480 --> 00:15:40,680
还小一点的

434
00:15:40,680 --> 00:15:42,280
就是说你可以看到多多少少

435
00:15:42,280 --> 00:15:43,879
能把样式弄过去了

436
00:15:44,080 --> 00:15:46,879
然后你接下来要训练比较大的图片

437
00:15:47,480 --> 00:15:49,080
因为你那些纹理

438
00:15:49,279 --> 00:15:51,080
那些油画的纹理

439
00:15:51,279 --> 00:15:52,759
你要图片越大

440
00:15:52,759 --> 00:15:55,039
你的纹理apply就用过来

441
00:15:55,039 --> 00:15:56,679
就会越细

442
00:15:56,679 --> 00:15:58,360
你看上去图片就越精细

443
00:15:58,360 --> 00:15:59,720
因为这个图片比较小

444
00:15:59,720 --> 00:16:01,200
所以你看上去还挺模糊的

445
00:16:01,200 --> 00:16:01,559
对吧

446
00:16:01,559 --> 00:16:02,879
因为我们的图片太小了

447
00:16:03,200 --> 00:16:03,559
所以

448
00:16:04,480 --> 00:16:06,080
但是你一开始训练很大的图片

449
00:16:06,080 --> 00:16:06,960
是比较难的

450
00:16:07,360 --> 00:16:09,279
就是说那种训练起来

451
00:16:09,679 --> 00:16:11,000
比较花时间比较长

452
00:16:11,200 --> 00:16:12,320
所以你可以怎么样

453
00:16:12,720 --> 00:16:14,000
就是说你先训练一个

454
00:16:14,000 --> 00:16:15,280
300×450的图片

455
00:16:15,280 --> 00:16:16,879
把它作为这样子

456
00:16:17,040 --> 00:16:17,720
接下来

457
00:16:18,240 --> 00:16:18,920
你训练一个

458
00:16:18,920 --> 00:16:21,200
比如说1000×1200的图片

459
00:16:22,200 --> 00:16:23,440
在训练的时候

460
00:16:23,440 --> 00:16:24,960
你图片的出示值

461
00:16:24,960 --> 00:16:26,440
就是把现在训练的图片

462
00:16:26,440 --> 00:16:27,360
把它放大一下

463
00:16:27,360 --> 00:16:28,360
把它做成出示值

464
00:16:28,360 --> 00:16:29,280
给它拉过去

465
00:16:30,560 --> 00:16:32,520
就是说你可以做

466
00:16:32,520 --> 00:16:35,640
我们其实书的图片做了三次

467
00:16:36,600 --> 00:16:37,480
是什么样三次

468
00:16:37,960 --> 00:16:39,880
就是说我们书的图片

469
00:16:39,919 --> 00:16:41,439
我是把整个图片

470
00:16:41,919 --> 00:16:44,279
先大图片先剪开

471
00:16:45,159 --> 00:16:46,480
当时候是为什么要剪开

472
00:16:46,480 --> 00:16:47,879
是因为我们的内存放不下

473
00:16:47,879 --> 00:16:49,840
就是我们当时候用的

474
00:16:49,840 --> 00:16:52,480
还是我当时用的是6个

475
00:16:53,240 --> 00:16:55,840
一个自己的一个小的980

476
00:16:56,039 --> 00:16:57,600
一个很小的显卡

477
00:16:57,600 --> 00:16:58,600
大概就要6个G

478
00:16:58,600 --> 00:17:00,039
还是8个G的内存

479
00:17:00,320 --> 00:17:01,799
所以当时放不下

480
00:17:01,840 --> 00:17:02,320
放不下

481
00:17:02,360 --> 00:17:03,799
最多能够算个

482
00:17:03,799 --> 00:17:05,519
大概是2000×3000的图片

483
00:17:05,880 --> 00:17:07,759
所以我就把图片

484
00:17:07,880 --> 00:17:09,839
原始图片切成4块

485
00:17:10,440 --> 00:17:11,800
每次训练一块

486
00:17:12,400 --> 00:17:13,120
一块的话

487
00:17:13,120 --> 00:17:13,920
我先训练一个

488
00:17:13,960 --> 00:17:15,920
300×450的作为初始

489
00:17:15,960 --> 00:17:17,880
然后再把它做大

490
00:17:17,880 --> 00:17:19,880
就做到我的整个显卡

491
00:17:19,880 --> 00:17:22,480
能够存下的最大的图片

492
00:17:22,840 --> 00:17:24,160
训练好出来之后

493
00:17:24,160 --> 00:17:26,200
再把4个图片拼接起来

494
00:17:26,200 --> 00:17:28,360
就会得到我们现在

495
00:17:28,360 --> 00:17:29,800
我们中文书出版的

496
00:17:29,800 --> 00:17:32,400
第一出版的封面的图片

497
00:17:32,400 --> 00:17:33,440
所以看上去精细度

498
00:17:33,440 --> 00:17:34,520
还是比较高的

499
00:17:35,000 --> 00:17:35,800
这就是

500
00:17:36,440 --> 00:17:36,880
好

501
00:17:36,880 --> 00:17:37,720
所以你可以看到

502
00:17:37,720 --> 00:17:38,760
我们为什么这个图片

503
00:17:38,759 --> 00:17:41,160
跟我们实际slide放的是有区别

504
00:17:41,160 --> 00:17:42,640
但代码其实是一样的

505
00:17:42,960 --> 00:17:44,319
就是用这个代码生出来的

506
00:17:44,319 --> 00:17:45,359
其实说你需要做一点

507
00:17:45,359 --> 00:17:46,400
额外的操作

508
00:17:47,359 --> 00:17:48,039
OK

509
00:17:48,240 --> 00:17:52,720
所以基本上我们讲到这里

510
00:17:52,720 --> 00:17:55,000
就是样式迁移

511
00:17:55,400 --> 00:17:57,200
我们稍微总结一下

512
00:17:59,720 --> 00:18:01,119
他就是给大家提供了

513
00:18:01,119 --> 00:18:02,359
首先是一个比较好玩的应用

514
00:18:02,359 --> 00:18:03,359
就是把一个

515
00:18:03,559 --> 00:18:05,119
一个某一个图片的样式

516
00:18:05,119 --> 00:18:07,000
做到一个内容图片上面

517
00:18:07,480 --> 00:18:08,440
从技术上来讲

518
00:18:08,440 --> 00:18:09,920
他的比较好玩的是

519
00:18:09,960 --> 00:18:12,320
他要的去训练的那个东西

520
00:18:12,320 --> 00:18:13,759
是一个合成的图片

521
00:18:14,160 --> 00:18:17,120
就是你要在对你的输入算

522
00:18:17,120 --> 00:18:18,080
算T组

523
00:18:18,440 --> 00:18:21,039
然后把它不断的叠代你的输入

524
00:18:22,600 --> 00:18:25,559
而不是去算你的卷积成就网络的

525
00:18:25,559 --> 00:18:26,200
权重

526
00:18:26,240 --> 00:18:27,640
去不去更新它

527
00:18:28,200 --> 00:18:29,279
另外一个好玩的说

528
00:18:29,279 --> 00:18:30,840
他这有三个损失函数

529
00:18:31,960 --> 00:18:33,400
一个样式的损失

530
00:18:33,400 --> 00:18:34,559
内容的损失

531
00:18:34,559 --> 00:18:36,920
和你的一个降噪的损失

532
00:18:36,920 --> 00:18:39,200
你需要通过选择合适的权重

533
00:18:39,360 --> 00:18:42,360
这三个数值还是挺不一样的

534
00:18:42,360 --> 00:18:43,880
把这三个东西放在一起

535
00:18:44,920 --> 00:18:45,759
最后一个就是说

536
00:18:45,759 --> 00:18:46,600
他比较好玩的是

537
00:18:46,600 --> 00:18:47,240
他的样式

538
00:18:47,240 --> 00:18:48,880
所谓的样式损失

539
00:18:48,880 --> 00:18:53,080
尽量去匹配每个通道的那些

540
00:18:53,120 --> 00:18:55,240
统计信息和通道之间

541
00:18:55,240 --> 00:18:56,440
当然是统计信息

542
00:18:56,440 --> 00:18:59,800
他就是把你的feature map

543
00:19:00,560 --> 00:19:02,039
通道作为一围

544
00:19:02,039 --> 00:19:03,759
然后剩下的每个通道里面的

545
00:19:03,759 --> 00:19:04,759
像素拉成一条向量

546
00:19:04,759 --> 00:19:06,720
然后做协和双矩阵

547
00:19:06,759 --> 00:19:08,640
来算一个多维度的

548
00:19:08,640 --> 00:19:09,920
一个随机变量的

549
00:19:09,920 --> 00:19:11,720
一个二阶的信息

550
00:19:11,720 --> 00:19:13,000
来匹配它的分布

551
00:19:13,360 --> 00:19:16,640
OK这就是样式迁移

