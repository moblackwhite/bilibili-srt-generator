1
00:00:00,000 --> 00:00:06,799
OK 我们昨天有讲说我们CPU和GPU是怎么样工作的

2
00:00:06,799 --> 00:00:10,800
特别是它在深度学习这种计算密集型的上面是怎么样子

3
00:00:10,800 --> 00:00:14,400
今天我们给大家更介绍一下更多的一些芯片

4
00:00:14,400 --> 00:00:19,600
就是说虽然GPU现在是目前模型训练的主流芯片

5
00:00:19,600 --> 00:00:23,800
然后大家很多时候在做预测的时候也在CPU上做预测

6
00:00:24,400 --> 00:00:27,600
但实际上来说在慢慢的发生改变

7
00:00:28,000 --> 00:00:33,399
我们今天给大家讲一下目前的一些这样子的芯片

8
00:00:33,399 --> 00:00:36,000
当然是说现在芯片也是慢慢在兴起

9
00:00:36,000 --> 00:00:40,600
我们讲的东西很有可能在过几年就会有更不一样的芯片出来

10
00:00:42,000 --> 00:00:46,400
这个是一个截图说是一个手机的芯片

11
00:00:46,400 --> 00:00:48,600
就Qualcomm的一个手机里面长什么样子

12
00:00:48,600 --> 00:00:51,600
你看到是说在手机端的芯片里面

13
00:00:51,600 --> 00:00:53,600
这里面有挺多东西的

14
00:00:53,600 --> 00:00:55,200
它有个CPU在这里面

15
00:00:56,200 --> 00:01:00,200
然后它还有一个GPU在这里

16
00:01:02,200 --> 00:01:03,800
然后它有个DSP

17
00:01:05,200 --> 00:01:07,600
然后当然这个是你的上网的东西

18
00:01:07,600 --> 00:01:11,200
WiFi你的4G 5G这个东西还挺大的

19
00:01:11,200 --> 00:01:13,800
就是说那一块要占的芯片面积挺大的

20
00:01:14,400 --> 00:01:16,200
然后你还有ISP

21
00:01:17,400 --> 00:01:19,400
Audio的芯片这样子

22
00:01:19,400 --> 00:01:22,400
就是说你现在手机里面芯片其实挺多的

23
00:01:22,400 --> 00:01:23,800
能用来做计算的

24
00:01:23,800 --> 00:01:25,600
你CPU能做计算

25
00:01:25,600 --> 00:01:27,400
GPU能做计算

26
00:01:27,400 --> 00:01:29,200
你的DSP也能做计算

27
00:01:29,200 --> 00:01:30,000
OK

28
00:01:30,000 --> 00:01:31,800
其实你在做深入学习的时候

29
00:01:31,800 --> 00:01:33,800
他们这三个芯片都是可以用的

30
00:01:36,200 --> 00:01:36,400
OK

31
00:01:36,400 --> 00:01:38,600
首先我们讲一下DSP这个东西

32
00:01:39,400 --> 00:01:41,800
DSP叫做Digital Signal Processing

33
00:01:41,800 --> 00:01:43,600
就叫数字信号处理芯片

34
00:01:44,600 --> 00:01:48,800
最早就是说给数字信号处理做用的

35
00:01:48,799 --> 00:01:52,200
它主要是设计成为给点击

36
00:01:52,799 --> 00:01:55,000
卷机快速复制页变化

37
00:01:55,000 --> 00:01:57,200
复制页变化做的设计

38
00:01:58,799 --> 00:02:00,000
它干什么用

39
00:02:00,000 --> 00:02:03,599
就是说你比如说很多时候做点图像的处理

40
00:02:03,599 --> 00:02:06,200
它可以叫图像的处理

41
00:02:07,200 --> 00:02:09,000
然后你语音的处理

42
00:02:09,599 --> 00:02:11,400
但如果你有ISP的话

43
00:02:11,400 --> 00:02:14,000
就是说针对图像的芯片的话

44
00:02:14,000 --> 00:02:15,599
DSP可以做别的事情

45
00:02:15,599 --> 00:02:18,599
就是说别的数字信号处理的事情

46
00:02:19,800 --> 00:02:21,600
它的一个特点是说

47
00:02:21,600 --> 00:02:24,000
它功耗非常低

48
00:02:24,800 --> 00:02:26,400
它的功耗低

49
00:02:26,400 --> 00:02:28,000
它的性能也挺高的

50
00:02:28,200 --> 00:02:31,000
目前来说就是做DSP做的好的

51
00:02:31,000 --> 00:02:33,000
比如说Qualcomm的DSP做的还不错

52
00:02:33,000 --> 00:02:36,200
它Qualcomm的DSP它比移动的GPU

53
00:02:36,200 --> 00:02:38,600
就是它自己的GPU能快到5倍

54
00:02:39,600 --> 00:02:41,200
而且功耗更低

55
00:02:43,200 --> 00:02:46,400
就是说它的核心的思想

56
00:02:46,400 --> 00:02:47,600
它是用了一个

57
00:02:47,599 --> 00:02:50,199
它不像GPU一样的用了特别多的核

58
00:02:50,400 --> 00:02:53,400
它倒是它把核也没有说做特别多

59
00:02:53,400 --> 00:02:55,799
而且它的频率也没有做特别快

60
00:02:55,799 --> 00:02:59,000
就是GPU现在是说我的频率也不低了

61
00:02:59,000 --> 00:03:01,799
就频率跟功耗是很大关系的

62
00:03:01,799 --> 00:03:03,400
核也跟功耗很大关系

63
00:03:04,199 --> 00:03:06,000
所以DSP为了降低功耗的话

64
00:03:06,000 --> 00:03:07,199
它的核不多

65
00:03:07,199 --> 00:03:08,799
然后它的频率也不高

66
00:03:08,799 --> 00:03:10,599
可能一个G都没有

67
00:03:10,799 --> 00:03:12,400
它用的一个东西叫做

68
00:03:12,400 --> 00:03:16,000
非常长的Very Long Instruction Words

69
00:03:17,000 --> 00:03:19,199
就是说它一条指令

70
00:03:19,400 --> 00:03:22,400
它可以做上百次的雷加

71
00:03:22,800 --> 00:03:24,000
就CPU的时候

72
00:03:24,000 --> 00:03:24,599
你一条指令

73
00:03:24,599 --> 00:03:27,400
可能做4个或者8个这样子的浮点运算

74
00:03:27,400 --> 00:03:30,000
但是DSP可以一次做几百个

75
00:03:31,000 --> 00:03:32,000
好处是说

76
00:03:32,000 --> 00:03:34,599
假设你真的有几百个算的话

77
00:03:34,599 --> 00:03:36,000
那我一条指令就算完了

78
00:03:36,000 --> 00:03:38,199
就一个核一条指令就算完了

79
00:03:38,800 --> 00:03:40,199
它的问题是说

80
00:03:40,199 --> 00:03:42,400
假设你没有100条指令算的话

81
00:03:42,599 --> 00:03:44,599
那么就是说剩下的地方就浪费掉

82
00:03:44,599 --> 00:03:45,400
就空转了

83
00:03:46,400 --> 00:03:48,599
所以这是它的核心的一个思想

84
00:03:49,400 --> 00:03:51,599
它的问题是什么

85
00:03:51,599 --> 00:03:52,599
它的问题就是说

86
00:03:52,599 --> 00:03:54,800
DSP大家用DSP用的不是那么多

87
00:03:54,800 --> 00:03:58,599
是因为首先它的编程和调试非常困难

88
00:04:00,000 --> 00:04:02,199
就我们在很久之前有跟

89
00:04:02,199 --> 00:04:04,400
Qualcomm的工程师说

90
00:04:04,400 --> 00:04:06,000
你们DSP那么厉害

91
00:04:06,000 --> 00:04:08,599
要不要我们一起来做一点事情

92
00:04:09,199 --> 00:04:11,000
Qualcomm的工程师说

93
00:04:11,000 --> 00:04:12,800
我就算把我们所有

94
00:04:12,800 --> 00:04:14,199
他们其实没有完全公开

95
00:04:14,199 --> 00:04:14,800
他们所有东西

96
00:04:15,000 --> 00:04:18,600
就是说就算我们公司之间能够把所有

97
00:04:18,600 --> 00:04:21,400
东西我所谓的设计什么东西都可以分享给

98
00:04:21,400 --> 00:04:21,800
你们

99
00:04:22,199 --> 00:04:23,800
我觉得你们还是挑不出来

100
00:04:23,800 --> 00:04:26,199
就是说它的整个工具链

101
00:04:26,400 --> 00:04:29,199
就是说它是比较就是它的

102
00:04:29,600 --> 00:04:32,400
相对来说做DSP开发的人员比较小

103
00:04:32,400 --> 00:04:35,800
所以当你一个领域人比较小的时候

104
00:04:35,800 --> 00:04:38,000
他的工具他就不会花太多

105
00:04:38,000 --> 00:04:40,000
精力把你工具做的特别好用

106
00:04:40,800 --> 00:04:43,800
所以反正他们就那么几个人写的东西

107
00:04:44,000 --> 00:04:47,800
就是说做编译器的和写算法的都是

108
00:04:47,800 --> 00:04:49,800
可能是一拨人坐在一起了

109
00:04:49,800 --> 00:04:51,600
所以他都根本不需要做的特别好

110
00:04:51,600 --> 00:04:53,000
就你有问题你找我

111
00:04:53,000 --> 00:04:55,400
但是你外面的人就很麻烦

112
00:04:55,400 --> 00:04:56,600
就是说你有问题

113
00:04:56,600 --> 00:04:57,400
你用他有问题

114
00:04:57,400 --> 00:04:58,000
那你怎么办

115
00:04:58,600 --> 00:05:03,400
当然另外一个是说编译器的质量也是一样

116
00:05:03,400 --> 00:05:06,000
就编译器我们一直在强调说

117
00:05:06,000 --> 00:05:06,800
对硬件来讲

118
00:05:06,800 --> 00:05:08,199
编译器的性能非常重要

119
00:05:08,199 --> 00:05:11,199
所以根据你的Qualcomm算做的比较好的

120
00:05:11,399 --> 00:05:13,800
还有很多更小厂一点的

121
00:05:13,800 --> 00:05:16,399
他的编译器是做的那么好了

122
00:05:17,300 --> 00:05:18,199
所以这个就是说

123
00:05:18,800 --> 00:05:22,000
虽然他确实用起来很好

124
00:05:22,000 --> 00:05:23,000
功耗低

125
00:05:23,000 --> 00:05:24,000
性能高

126
00:05:24,000 --> 00:05:26,800
但是他的编程和调是比较困难的

127
00:05:26,800 --> 00:05:32,399
而且编译器也是不那么的质量普遍那么好

128
00:05:32,399 --> 00:05:36,599
所以DSP就是说你如果能用到DSP在手机里面的话

129
00:05:36,599 --> 00:05:37,599
你尽量去用它

130
00:05:37,599 --> 00:05:39,000
但是反过来讲

131
00:05:39,000 --> 00:05:43,399
就是说很有可能你不是总是能够把在DSP上

132
00:05:43,399 --> 00:05:44,600
把你的算法跑起来

133
00:05:47,199 --> 00:05:47,800
OK

134
00:05:49,199 --> 00:05:50,600
另外一个是说

135
00:05:51,199 --> 00:05:52,800
更加专有一点的

136
00:05:53,399 --> 00:05:56,199
更加专业的一个叫做FPGA

137
00:05:56,600 --> 00:05:59,800
可能大家有听说过叫做可编程阵列

138
00:06:01,800 --> 00:06:03,199
就是说它是一个什么样的东西

139
00:06:03,800 --> 00:06:05,600
就它是一块硬件

140
00:06:05,600 --> 00:06:09,800
但是它里面有大量的可以用来编程的逻辑单元

141
00:06:11,600 --> 00:06:13,600
就我们之前设计硬件的时候是说

142
00:06:13,600 --> 00:06:15,200
我先把它设计好

143
00:06:15,200 --> 00:06:18,000
然后去留片留出来

144
00:06:18,000 --> 00:06:20,200
就是硬件做出来之后就不能变了

145
00:06:20,600 --> 00:06:24,200
但是FPGA它的逻辑单元是可以编程的

146
00:06:24,200 --> 00:06:25,200
就可以改的

147
00:06:25,200 --> 00:06:26,400
而且里面那些连接

148
00:06:26,400 --> 00:06:28,400
作为这个单元连到另外一个单元

149
00:06:28,400 --> 00:06:31,200
它的连接也是可以改变的

150
00:06:31,200 --> 00:06:33,400
就是我说我这两个东西不连在一起

151
00:06:33,400 --> 00:06:35,000
我这一个东西连到另外一个地方

152
00:06:35,000 --> 00:06:36,000
都可以连接

153
00:06:37,199 --> 00:06:40,399
然后它可以就是说它可以用来说

154
00:06:40,399 --> 00:06:41,399
我把整个硬件

155
00:06:41,399 --> 00:06:43,600
我说我的硬件应该长这个样子

156
00:06:43,600 --> 00:06:47,399
然后我在FPGA上把它FPGA调成我要的样子

157
00:06:48,199 --> 00:06:51,199
一般来说它的编程语言你可以用

158
00:06:51,199 --> 00:06:53,000
用very lot用的多

159
00:06:53,000 --> 00:06:54,399
VHDL用的比较多

160
00:06:54,800 --> 00:06:58,199
我不知道现在大家大学里面要不要学这东西

161
00:06:58,199 --> 00:07:00,600
反正我当年是十几年前

162
00:07:00,600 --> 00:07:03,199
20年前确实是写过very lot

163
00:07:03,399 --> 00:07:06,199
很多东西写起来也是一个很底层的

164
00:07:06,199 --> 00:07:08,199
一个编程语言

165
00:07:08,199 --> 00:07:10,000
写起来挺难写的

166
00:07:10,000 --> 00:07:11,399
写简单东西还行

167
00:07:11,399 --> 00:07:13,000
写复杂东西其实挺难的

168
00:07:14,199 --> 00:07:16,199
但是一旦你写完之后

169
00:07:16,199 --> 00:07:20,000
它通常比通用硬件效率更高

170
00:07:20,000 --> 00:07:24,399
通用硬件比你的CPU通常来说是效率更高

171
00:07:24,399 --> 00:07:27,399
跟GPU比就理论上来说

172
00:07:27,399 --> 00:07:29,199
它可以做到比GPU高

173
00:07:29,599 --> 00:07:34,000
但是够大的板子

174
00:07:34,000 --> 00:07:36,399
就是说你可以编成这类

175
00:07:36,399 --> 00:07:41,000
你要一个很大的板子里面足够多的可以编成的单元

176
00:07:41,000 --> 00:07:43,800
目前来说这样子的板子不大

177
00:07:44,599 --> 00:07:46,199
不大的话意味着说

178
00:07:46,199 --> 00:07:49,000
你在基本上同样的价位

179
00:07:49,000 --> 00:07:51,000
或同样的逻辑单元的话

180
00:07:51,000 --> 00:07:52,599
它可能比GPU的

181
00:07:52,599 --> 00:07:55,599
你可以做到比GPU更高效一点

182
00:07:56,199 --> 00:07:57,199
但反过来讲

183
00:07:57,399 --> 00:07:59,199
就是说现在GPU就那么大一块

184
00:07:59,199 --> 00:08:00,199
对吧

185
00:08:00,199 --> 00:08:03,199
FPA能做到跟GPU一样大的话也不多

186
00:08:03,199 --> 00:08:07,599
但是确实有几家公司是有高端的FPS能做比较好的

187
00:08:09,399 --> 00:08:12,399
它的缺点是什么

188
00:08:12,399 --> 00:08:13,199
缺点是一样的

189
00:08:13,199 --> 00:08:15,599
就是说它的工具链也是

190
00:08:15,599 --> 00:08:17,000
就是一个很小的领域

191
00:08:17,000 --> 00:08:19,199
任何如果一个领域

192
00:08:19,199 --> 00:08:21,599
它的人比较少的话

193
00:08:21,599 --> 00:08:24,199
那你的工具链很有可能是不是很行的

194
00:08:25,199 --> 00:08:25,599
为什么

195
00:08:25,600 --> 00:08:29,000
是因为如果你的开发人员比较少

196
00:08:29,000 --> 00:08:31,000
那你的商业价值就比较小

197
00:08:31,000 --> 00:08:34,000
所以公司就不会拖很多人去帮你做工具链

198
00:08:34,000 --> 00:08:35,200
做的特别好用

199
00:08:35,200 --> 00:08:36,600
所有人都能用

200
00:08:36,600 --> 00:08:40,399
你说你像NVIDIA投几千个人来做cooler

201
00:08:40,399 --> 00:08:42,800
但是你FPA公司你不可能投几千个人

202
00:08:42,800 --> 00:08:46,399
你可能拖个几个人或几十个人来做工具链

203
00:08:46,399 --> 00:08:50,000
所以导致说它的应用性确实没那么高

204
00:08:50,000 --> 00:08:53,000
而且质量上来说也不能保证

205
00:08:54,000 --> 00:08:56,600
另外一个比较致命的是说

206
00:08:56,600 --> 00:08:59,000
FPGA取决于你那个板子有多大

207
00:08:59,000 --> 00:09:02,799
比较大的FPGA的板子的话

208
00:09:02,799 --> 00:09:06,200
编译次可能是小的是几个小时

209
00:09:06,200 --> 00:09:07,399
它的编译

210
00:09:07,399 --> 00:09:10,000
它所谓的编译是说你真的要把这个东西

211
00:09:10,000 --> 00:09:12,600
把整个逻辑单元重新烧一次板子

212
00:09:13,799 --> 00:09:16,200
里面的硬件单元整个逻辑要改变

213
00:09:16,200 --> 00:09:18,200
所以就是说它是有物理上的改变

214
00:09:18,200 --> 00:09:20,200
所以就为什么它的编译特别慢

215
00:09:20,200 --> 00:09:23,800
不像是说我们就在软件弄一下

216
00:09:23,800 --> 00:09:25,600
它涉及到硬件的改动

217
00:09:25,600 --> 00:09:28,200
比较大的板子可能是要几天

218
00:09:28,200 --> 00:09:30,400
就编译这样多天

219
00:09:30,400 --> 00:09:33,600
所以导致说这个东西特别痛苦

220
00:09:33,600 --> 00:09:35,000
大家体会一下

221
00:09:35,000 --> 00:09:36,800
如果你写C++的话

222
00:09:36,800 --> 00:09:38,200
你编译一次对吧

223
00:09:38,200 --> 00:09:40,200
好有个bug

224
00:09:40,200 --> 00:09:41,600
然后你编译次

225
00:09:41,600 --> 00:09:43,000
所以你可以要编译很多

226
00:09:43,000 --> 00:09:45,800
有时候你要编译很多次去debug

227
00:09:45,800 --> 00:09:47,200
然后你debug

228
00:09:47,200 --> 00:09:48,800
就是说你编译器不报错了

229
00:09:48,800 --> 00:09:51,600
你发现运行起来各种问题

230
00:09:51,600 --> 00:09:52,800
运行一下这里有问题

231
00:09:52,800 --> 00:09:53,200
那里有问题

232
00:09:53,200 --> 00:09:53,800
我改一下代码

233
00:09:53,800 --> 00:09:55,600
然后重新编译

234
00:09:55,600 --> 00:09:57,000
所以大家现在用python

235
00:09:57,000 --> 00:09:58,200
还有这种脚本语言

236
00:09:58,200 --> 00:09:59,800
就说你不需要编译

237
00:09:59,800 --> 00:10:02,200
去写省下你好多时间

238
00:10:02,200 --> 00:10:03,800
FPD呢

239
00:10:03,800 --> 00:10:06,000
就本来它那个东西写起来就很难写

240
00:10:06,000 --> 00:10:09,000
就是它是特别底层的一种语言

241
00:10:09,000 --> 00:10:10,600
写起来就不容易

242
00:10:10,600 --> 00:10:12,800
然后你编译一次还要数天

243
00:10:12,800 --> 00:10:13,400
还有个bug

244
00:10:13,400 --> 00:10:15,400
可能几天之后你才能发现

245
00:10:15,400 --> 00:10:18,400
这就导致大家会比较痛苦

246
00:10:18,399 --> 00:10:21,799
就当然FPD公司也做了很多这样子优化

247
00:10:21,799 --> 00:10:23,199
他说

248
00:10:23,199 --> 00:10:25,000
如果你就是要跑deep learning的话

249
00:10:25,000 --> 00:10:27,000
你就是要跑计算密集型的任务的话

250
00:10:27,000 --> 00:10:29,399
那我给你编译好先

251
00:10:29,399 --> 00:10:30,600
就是我给你编译一下

252
00:10:30,600 --> 00:10:33,799
这一块是用来做做卷机的

253
00:10:33,799 --> 00:10:35,799
那一块是用来做什么样子的

254
00:10:35,799 --> 00:10:38,799
这就是说我把其中一些东西已经编译好

255
00:10:38,799 --> 00:10:40,000
你剩下的是说

256
00:10:40,000 --> 00:10:42,600
你只要去动别的东西就行了

257
00:10:42,600 --> 00:10:46,399
所以导致你的编译会有开发的效率会高很多

258
00:10:46,600 --> 00:10:49,399
但整体来讲就是说

259
00:10:49,399 --> 00:10:52,399
FPGA经常我们用来干嘛

260
00:10:52,399 --> 00:10:55,799
我们是用来做模拟用的

261
00:10:55,799 --> 00:10:58,399
就是说这个涉及到我们下一个

262
00:10:58,399 --> 00:11:00,199
叫做Aseek

263
00:11:01,600 --> 00:11:03,600
就是Aseek就是一个特定芯片

264
00:11:03,600 --> 00:11:07,600
就是我就针对于某一个应用做的特定的芯片

265
00:11:08,399 --> 00:11:11,000
就现在的深度学习的热门领域

266
00:11:11,000 --> 00:11:15,600
我觉得在三四年前就开始热起来了

267
00:11:16,399 --> 00:11:18,399
但芯片造一下都是要到两三年

268
00:11:18,399 --> 00:11:19,800
然后三四五年

269
00:11:19,800 --> 00:11:21,800
所以两三年前热起来

270
00:11:21,800 --> 00:11:25,000
这几年就是大家的芯片在慢慢的出来了

271
00:11:25,000 --> 00:11:25,600
就大厂

272
00:11:25,800 --> 00:11:28,200
就比如说我现在我列的都是一些美国大厂

273
00:11:28,200 --> 00:11:29,600
国内也挺多大厂

274
00:11:29,600 --> 00:11:31,399
都在造自己的芯片

275
00:11:31,399 --> 00:11:36,800
比如说其中最著名的是Google的TPU的芯片

276
00:11:37,600 --> 00:11:39,200
这个是一个标志性的芯片

277
00:11:39,200 --> 00:11:40,600
他做的比较早

278
00:11:40,600 --> 00:11:43,600
他在我记得他应该是

279
00:11:43,800 --> 00:11:46,600
14年可能就开始做自己的芯片了

280
00:11:47,399 --> 00:11:49,000
所以现在是说

281
00:11:49,000 --> 00:11:51,000
他目前来说

282
00:11:51,000 --> 00:11:54,800
他的性能能够媲美到NVIDIA GPU的性能

283
00:11:55,399 --> 00:11:58,200
就跟NVIDIA现在最好的GPU性能是能够

284
00:11:58,200 --> 00:12:02,200
一块板子和那边的一块板子是能够媲美的

285
00:12:03,399 --> 00:12:06,600
他在也是目前唯一的一个

286
00:12:06,600 --> 00:12:08,399
Aseek在大量的部署

287
00:12:08,399 --> 00:12:10,600
在Google已经内部已经卖

288
00:12:10,600 --> 00:12:13,399
几乎已经取代了TPU在Google内部的使用

289
00:12:13,399 --> 00:12:15,199
听说看paper说

290
00:12:15,199 --> 00:12:17,600
所以如果你在Google内部的话

291
00:12:17,600 --> 00:12:19,399
你很有可能只能用TPU

292
00:12:19,399 --> 00:12:20,799
用不到GPU

293
00:12:22,399 --> 00:12:25,000
他的一个核心叫做Systolic Array

294
00:12:25,000 --> 00:12:27,600
这个我就没有想清楚这个东西怎么翻译

295
00:12:27,600 --> 00:12:31,000
就是我给大家解释一下这个Array具体是怎么工作的

296
00:12:31,600 --> 00:12:35,000
也就是一个特别大的一个东西用来做

297
00:12:35,000 --> 00:12:37,399
专门是用来做大矩阵惩罚的

298
00:12:37,399 --> 00:12:39,199
就是一个核心一个这样子的东西

299
00:12:40,200 --> 00:12:44,600
所以做Aseek就是为什么大家做Aseek

300
00:12:45,600 --> 00:12:47,000
因为他便宜了

301
00:12:47,800 --> 00:12:49,800
就是说你买一块NVIDIA的卡

302
00:12:49,800 --> 00:12:52,000
就是说公司买公司买的话

303
00:12:52,000 --> 00:12:55,200
买块NVIDIA卡基本上是一万块钱

304
00:12:55,200 --> 00:12:56,000
一万美金

305
00:12:57,400 --> 00:13:01,400
一万美金里面NVIDIA的利润大概是90%

306
00:13:01,400 --> 00:13:03,600
就是说他实际的成本大概是一千块钱

307
00:13:03,600 --> 00:13:04,800
一千美金的样子

308
00:13:05,400 --> 00:13:07,400
如果你买游戏卡的话

309
00:13:07,399 --> 00:13:11,799
你会发现游戏卡和比你的server卡的话便宜个七八倍

310
00:13:11,799 --> 00:13:13,600
那是因为游戏卡的利润率不高

311
00:13:13,600 --> 00:13:16,000
游戏卡利润率是10% 20%

312
00:13:16,399 --> 00:13:22,399
所以NVIDIA他不是通过卖游戏卡来赚你们这帮搞深度学习的钱

313
00:13:22,399 --> 00:13:24,600
卖游戏卡是卖给游戏的人

314
00:13:25,600 --> 00:13:27,199
现在卖给挖矿的人

315
00:13:27,600 --> 00:13:31,799
所以他是通过你去买游戏卡在上面能跑深度学习

316
00:13:31,799 --> 00:13:36,199
然后你通过低成本的地方学习他怎么开发

317
00:13:36,200 --> 00:13:37,800
学习他的怎么用

318
00:13:37,800 --> 00:13:39,800
然后当你去公司的时候

319
00:13:39,800 --> 00:13:42,400
那你公司不得不买我的高端的芯片

320
00:13:42,400 --> 00:13:43,200
server芯片

321
00:13:43,200 --> 00:13:44,800
虽然他本质上没有太多区别

322
00:13:45,600 --> 00:13:47,600
这样子我就能赚取90%的利润

323
00:13:48,400 --> 00:13:50,000
那么现在假设你自己能造

324
00:13:50,800 --> 00:13:51,800
就自己造的话

325
00:13:51,800 --> 00:13:56,200
我的成本跟你可能也是你NVIDIA卖一万块钱芯片

326
00:13:56,200 --> 00:13:58,800
我自己造的话可能成本就是不到一千块钱

327
00:13:58,800 --> 00:14:00,000
就八百九百块钱

328
00:14:01,000 --> 00:14:02,400
所以这样子的话

329
00:14:02,400 --> 00:14:03,800
假设我要买一万块

330
00:14:03,800 --> 00:14:05,600
我的公司需要一万块这样芯片

331
00:14:06,000 --> 00:14:07,200
现在都十万块起

332
00:14:07,200 --> 00:14:08,000
就大公司

333
00:14:08,399 --> 00:14:11,000
那么十万块乘以你可以省九千块钱

334
00:14:11,000 --> 00:14:11,399
对吧

335
00:14:11,399 --> 00:14:15,800
那就是那多一个十亿美金了

336
00:14:16,800 --> 00:14:20,200
也说研发一块芯片的成本大概是几个亿美金了

337
00:14:20,600 --> 00:14:22,800
所以就是说但是我能省下十亿美金的话

338
00:14:22,800 --> 00:14:23,800
我还是愿意干的

339
00:14:24,399 --> 00:14:25,800
这就是大公司的逻辑

340
00:14:26,600 --> 00:14:29,399
具体来说你为什么要用Sysdotic Array是因为

341
00:14:30,200 --> 00:14:33,399
我这个就是说我造芯片门槛很高

342
00:14:33,799 --> 00:14:35,600
你造个GPU门槛还是挺高的

343
00:14:35,600 --> 00:14:37,000
你就把整个东西得弄好

344
00:14:37,000 --> 00:14:38,399
就编辑到硬件

345
00:14:39,199 --> 00:14:41,199
我就是说越通用越难

346
00:14:41,199 --> 00:14:43,399
就为什么造CPU的只有两家公司

347
00:14:44,199 --> 00:14:45,199
ARM算一家了

348
00:14:45,199 --> 00:14:47,799
三家公司叫ARM做IP的

349
00:14:47,799 --> 00:14:49,600
然后你做GPU可能会多一点

350
00:14:50,199 --> 00:14:51,600
做ASIC就会多很多

351
00:14:51,600 --> 00:14:56,199
是因为我的芯片是给一个特定应用用的

352
00:14:56,199 --> 00:14:58,000
我不要考虑那么通用的东西

353
00:14:58,600 --> 00:15:01,399
所以我就针对我的应用造设计硬件

354
00:15:01,600 --> 00:15:06,799
就导致说我可以很多很多去掉通用性之后

355
00:15:06,799 --> 00:15:09,799
我的硬件的设计门槛就变得低了很多

356
00:15:11,000 --> 00:15:13,199
就是说当你的硬件越专用的话

357
00:15:14,199 --> 00:15:19,600
你很容易在同样的成本上达到性能挺好的

358
00:15:19,600 --> 00:15:22,000
而且很方便你把它造出来

359
00:15:22,799 --> 00:15:26,799
这也是说Sysdotic Array它不是一个很好的东西

360
00:15:27,199 --> 00:15:28,600
就是说它其实

361
00:15:29,600 --> 00:15:31,800
从编译器角度来讲特别难优化

362
00:15:31,800 --> 00:15:34,200
但是它的好处是造起来很容易造

363
00:15:34,600 --> 00:15:37,399
所以导致说这是一个很好的办法

364
00:15:37,399 --> 00:15:40,800
让你很快的造出特别适合做深度学习的芯片

365
00:15:40,800 --> 00:15:42,800
而且不需要再花个

366
00:15:42,800 --> 00:15:45,600
就是说一家公司可能两三年能造出来

367
00:15:45,600 --> 00:15:46,600
而不像做GPU

368
00:15:46,600 --> 00:15:49,800
你可能要做CPU可能要10加10年的样子

369
00:15:51,000 --> 00:15:53,399
另外一个是说我们之前有讲过FPGA

370
00:15:54,000 --> 00:15:57,000
FPGA其实在很多情况下是用来干嘛

371
00:15:57,399 --> 00:15:59,399
就是说我自己造芯片

372
00:15:59,799 --> 00:16:01,399
我设计好芯片之后

373
00:16:01,799 --> 00:16:03,000
我总不能去留片

374
00:16:03,000 --> 00:16:04,399
留片成本非常高

375
00:16:04,399 --> 00:16:06,200
留一次片几百万美金就没了

376
00:16:06,200 --> 00:16:07,200
或者几千万美金

377
00:16:07,600 --> 00:16:09,600
所以你就不要去留不停

378
00:16:10,000 --> 00:16:11,399
你怎么测我自己芯片

379
00:16:11,799 --> 00:16:12,799
我先设计好

380
00:16:12,799 --> 00:16:15,000
我用我的东西设计好之后

381
00:16:15,200 --> 00:16:17,799
我可以当我可以做Simulation

382
00:16:17,799 --> 00:16:19,799
就是说用CPU来模拟

383
00:16:19,799 --> 00:16:21,000
我芯片怎么运行

384
00:16:21,399 --> 00:16:23,000
但是不是那么好

385
00:16:23,200 --> 00:16:25,799
一般的做法是说你Simulation没问题之后

386
00:16:25,799 --> 00:16:26,799
你再做Emulation

387
00:16:27,200 --> 00:16:30,399
就是说我在FPGA上烧出芯片

388
00:16:31,200 --> 00:16:33,399
这样子的话我就是能够近年的去

389
00:16:33,399 --> 00:16:36,600
跟我的AC卡长得很像

390
00:16:37,399 --> 00:16:40,000
所以然后就是说如果我的FPGA上面的

391
00:16:40,000 --> 00:16:41,200
模拟性能不错的话

392
00:16:41,200 --> 00:16:42,600
我下一步可以去留片了

393
00:16:43,399 --> 00:16:44,600
你反过来也是一个道理

394
00:16:44,600 --> 00:16:47,799
就是说如果你能在FPGA上烧一个芯片出来

395
00:16:47,799 --> 00:16:49,600
发现一个东西造得特别好的话

396
00:16:49,600 --> 00:16:52,799
而且你觉得这个东西我不会动个不停的话

397
00:16:52,799 --> 00:16:56,200
那么就直接可以把芯片给你留片出来

398
00:16:56,400 --> 00:16:57,800
就造出一个AC卡出来

399
00:16:59,600 --> 00:17:01,600
就是说AC卡这东西其实也

400
00:17:01,600 --> 00:17:03,600
DSP也算是一个AC卡

401
00:17:03,800 --> 00:17:06,799
就是说其实AC卡这东西不Fancy

402
00:17:06,799 --> 00:17:09,400
就是说很多专用芯片

403
00:17:09,400 --> 00:17:10,799
就大量的专用芯片

404
00:17:10,799 --> 00:17:14,600
就是说做AI AC卡这一块是最近几年的一个热点

405
00:17:15,600 --> 00:17:16,000
OK

406
00:17:16,400 --> 00:17:21,000
就是说而且很多公司它的AC卡是基于SysDolic Array的话

407
00:17:21,400 --> 00:17:24,200
我接下来给大家大概简单介绍一下

408
00:17:24,200 --> 00:17:25,400
这个东西长什么样子

409
00:17:27,200 --> 00:17:31,000
就是说SysDolic Array它就是说

410
00:17:31,000 --> 00:17:36,600
它是一堆这样子的process element的阵列

411
00:17:36,600 --> 00:17:37,600
叫PE阵列

412
00:17:39,400 --> 00:17:43,000
你可以认为每一个PE里面可以做一个矩阵乘法

413
00:17:43,000 --> 00:17:45,400
做一次乘法加法或者一个简单运算

414
00:17:46,200 --> 00:17:49,600
就是说而且它是设计成一个2D的形状

415
00:17:50,200 --> 00:17:52,200
就是你发现它是一个2D的形状

416
00:17:52,400 --> 00:17:55,600
所以它就是用来设计用来做矩阵乘法的

417
00:17:57,200 --> 00:18:02,200
就是说它造你根据你矩阵乘法的计算模式

418
00:18:02,200 --> 00:18:05,200
我设计一个跟你矩阵乘法能够对应上的硬件来做

419
00:18:06,000 --> 00:18:08,799
所以它就是所以这就为什么叫AC对吧

420
00:18:08,799 --> 00:18:09,799
它做别的东西都不行

421
00:18:09,799 --> 00:18:11,200
它就做矩阵乘法行

422
00:18:11,799 --> 00:18:14,600
而且大家知道卷迹是可以换成一个矩阵乘法的

423
00:18:15,000 --> 00:18:16,799
1乘1的卷迹等于矩阵乘法

424
00:18:17,400 --> 00:18:23,200
但是你将一般的矩阵卷迹也可以换成一个通过把元素

425
00:18:23,400 --> 00:18:25,799
就我们有讲过卷迹说白了

426
00:18:25,799 --> 00:18:28,600
就是从全年阶层矩阵乘法过去的

427
00:18:28,600 --> 00:18:30,600
所以就是一般的卷迹来讲

428
00:18:30,600 --> 00:18:34,200
也可以通过调整事物输出来换成一个矩阵乘法

429
00:18:34,799 --> 00:18:37,000
所以为什么说我做深度学习的话

430
00:18:37,000 --> 00:18:40,400
我就做一个systolic array就行了

431
00:18:41,200 --> 00:18:43,600
因为我本质上就在做矩阵乘法

432
00:18:44,799 --> 00:18:46,000
而且之所以这样做的话

433
00:18:46,000 --> 00:18:49,400
它的设计制造相对来说比较简单

434
00:18:50,200 --> 00:18:54,000
就是说你GPU的话你得做个几千个核对吧

435
00:18:54,600 --> 00:18:57,000
我的AC我就两个核一个核

436
00:18:57,000 --> 00:18:59,400
TP我记得前几代都是一个核

437
00:19:00,000 --> 00:19:02,600
里面就是一个就是一个systolic array

438
00:19:02,600 --> 00:19:04,600
就是一个核里面就是这个东西

439
00:19:05,400 --> 00:19:07,200
现在当然可以做到几个核了

440
00:19:07,200 --> 00:19:08,400
就两个核四个核

441
00:19:10,000 --> 00:19:11,400
相对说我就四个核对吧

442
00:19:11,800 --> 00:19:13,600
就比你要做个几千个核

443
00:19:13,600 --> 00:19:16,400
然后做同步这个东西容易很多

444
00:19:17,400 --> 00:19:19,200
然后给大家简单演示一下

445
00:19:19,200 --> 00:19:23,800
我怎么样用一个systolic array来做一个乘法

446
00:19:25,400 --> 00:19:27,200
就假设我要做一个

447
00:19:27,200 --> 00:19:29,800
Y等于W乘以X

448
00:19:30,800 --> 00:19:33,800
W是一个3乘3的矩阵

449
00:19:34,800 --> 00:19:36,200
那X是一个3乘2

450
00:19:36,200 --> 00:19:38,000
那么结果就是一个3乘2对吧

451
00:19:38,800 --> 00:19:41,400
之所以放个3乘3是因为

452
00:19:41,400 --> 00:19:43,400
因为我的这里是个3乘3的

453
00:19:43,800 --> 00:19:47,000
你的W最好是跟我的array的形状是一样

454
00:19:47,400 --> 00:19:49,800
就假设我的array是一个4乘4的array的话

455
00:19:49,800 --> 00:19:51,600
那你的W最好是一个4乘4的

456
00:19:53,200 --> 00:19:53,600
OK

457
00:19:53,600 --> 00:19:55,800
所以然后我首先怎么干

458
00:19:56,600 --> 00:19:59,000
首先是说每一个PE里面可以看到

459
00:19:59,000 --> 00:20:02,000
就是说我就把我的W的元素一一的放进去

460
00:20:02,800 --> 00:20:05,200
就W1从下边从1开始

461
00:20:05,600 --> 00:20:06,500
然后2131

462
00:20:06,500 --> 00:20:08,200
然后W1213

463
00:20:08,200 --> 00:20:09,500
然后最后是W33

464
00:20:10,299 --> 00:20:14,299
这个是在开始的时候时间0

465
00:20:14,299 --> 00:20:15,099
我要干的事情

466
00:20:16,599 --> 00:20:19,500
然后我的输入输入的话

467
00:20:19,500 --> 00:20:21,599
X这个东西也是先放好

468
00:20:21,599 --> 00:20:22,700
就是我这是我的输入

469
00:20:22,700 --> 00:20:24,099
就是我的输入有三个通道

470
00:20:24,099 --> 00:20:27,799
这个地方每次每个通道能进一个一次

471
00:20:27,799 --> 00:20:28,700
进一个元素

472
00:20:30,000 --> 00:20:32,599
就我要把它排好

473
00:20:33,400 --> 00:20:37,299
就是这里是X1 X1 X2

474
00:20:37,299 --> 00:20:38,500
然后这个地方要加个0

475
00:20:38,500 --> 00:20:39,400
这个地方加两个0

476
00:20:39,400 --> 00:20:40,700
就是说先把它排好

477
00:20:41,299 --> 00:20:42,599
这是时间0做准备

478
00:20:42,599 --> 00:20:45,200
把数据罗到位置上

479
00:20:47,099 --> 00:20:50,500
接下来W时间1就下一个周期干的事情

480
00:20:50,500 --> 00:20:54,200
就是说把整个输入往前移一个

481
00:20:55,400 --> 00:20:57,099
就是说你现在W在什么地方

482
00:20:57,599 --> 00:20:59,400
W跑到这点来了

483
00:20:59,900 --> 00:21:01,799
就W这一块是个0

484
00:21:01,900 --> 00:21:02,700
这进来是0

485
00:21:02,700 --> 00:21:04,000
所以这里进来也是0

486
00:21:04,000 --> 00:21:05,500
所以这个不发生什么事情

487
00:21:06,500 --> 00:21:08,400
所以W1进来之后

488
00:21:08,400 --> 00:21:11,799
他就跟就X1进来之后

489
00:21:11,799 --> 00:21:14,200
他就跟W1做运算

490
00:21:14,200 --> 00:21:15,200
做乘法

491
00:21:17,400 --> 00:21:19,000
然后做完乘法的时间1

492
00:21:19,000 --> 00:21:20,099
这里面是0

493
00:21:20,099 --> 00:21:22,000
0做乘法就反正无所谓

494
00:21:23,400 --> 00:21:25,099
那么接下来的这时间1

495
00:21:27,099 --> 00:21:29,500
时间2看一下时间2发生什么事情

496
00:21:29,500 --> 00:21:34,099
时间2是说还是往右移一列

497
00:21:35,799 --> 00:21:38,200
然后结果再往下移一列

498
00:21:39,200 --> 00:21:39,700
可以看一下

499
00:21:39,700 --> 00:21:42,099
就是说X1移到这个地方了

500
00:21:42,500 --> 00:21:43,299
这里还是0

501
00:21:43,299 --> 00:21:45,299
然后X2移到这个地方

502
00:21:45,299 --> 00:21:47,900
所以这就是你看到有个箭头的箭头

503
00:21:48,099 --> 00:21:50,299
这个箭头是说数据可以往这边移

504
00:21:51,200 --> 00:21:53,400
那么就是说移到这个地方干嘛

505
00:21:53,400 --> 00:21:54,299
做乘法

506
00:21:54,900 --> 00:21:56,099
要这个地方干嘛

507
00:21:56,099 --> 00:21:57,000
也做乘法

508
00:21:58,299 --> 00:22:00,299
接下来看到还有个这样子的箭头

509
00:22:01,500 --> 00:22:03,400
然后说这个箭头的意思是说

510
00:22:03,600 --> 00:22:06,400
上一个时间它的结果往下走

511
00:22:07,000 --> 00:22:08,400
上一个时间结果在这个地方

512
00:22:11,500 --> 00:22:12,700
这是上一次时间

513
00:22:12,700 --> 00:22:16,900
我们在上在这个PE里面算的结果

514
00:22:17,200 --> 00:22:19,000
往下一到这个地方

515
00:22:19,000 --> 00:22:20,200
跟他做加法

516
00:22:21,200 --> 00:22:22,500
就他做乘法

517
00:22:22,500 --> 00:22:24,000
然后把上面的结果做加法

518
00:22:24,600 --> 00:22:26,400
他反正是拿到是0

519
00:22:26,900 --> 00:22:27,800
他也拿到是0

520
00:22:27,800 --> 00:22:29,400
所以就我们就忽略掉

521
00:22:30,400 --> 00:22:33,100
就是说时间2就是输入往这边

522
00:22:33,400 --> 00:22:34,300
往右移一下

523
00:22:34,300 --> 00:22:36,300
然后结果往下移一个

524
00:22:37,600 --> 00:22:39,500
那时间3继续往移

525
00:22:40,100 --> 00:22:42,800
就X1移到这个地方了

526
00:22:43,100 --> 00:22:45,000
然后你的结果已经

527
00:22:45,900 --> 00:22:48,500
这个是时间1算的结果

528
00:22:49,000 --> 00:22:49,800
时间2

529
00:22:50,800 --> 00:22:53,300
就是这个是时间1在这个地方算的结果

530
00:22:53,600 --> 00:22:55,900
这个东西是时间2在这个地方算的结果

531
00:22:56,400 --> 00:22:58,000
这个是时间3当前的结果

532
00:23:00,700 --> 00:23:01,900
OK 再往下

533
00:23:02,600 --> 00:23:05,000
再往下你会发现就是说刚刚那算的东西

534
00:23:05,100 --> 00:23:06,000
这个东西是什么东西

535
00:23:07,000 --> 00:23:09,000
就这个东西其实就是你已经把

536
00:23:10,500 --> 00:23:13,400
这个东西它就是等于Y11

537
00:23:13,400 --> 00:23:17,000
就是Y的这一个左上角元素的值

538
00:23:18,800 --> 00:23:21,300
就是说你输出了就输出了我的Y的一个值

539
00:23:21,700 --> 00:23:22,900
然后你当然再往下的话

540
00:23:22,900 --> 00:23:25,700
你会发现把Y12 Y21也算出来了

541
00:23:26,200 --> 00:23:27,700
再往下一直往下的话

542
00:23:28,500 --> 00:23:29,800
就能发现到这个地方

543
00:23:30,399 --> 00:23:33,099
他就说我把整个Y的结果已经算到这个地方了

544
00:23:33,599 --> 00:23:34,799
就Y已经算出来了

545
00:23:36,700 --> 00:23:37,099
OK

546
00:23:39,299 --> 00:23:40,599
就是说你可以看到是说

547
00:23:40,599 --> 00:23:44,000
我其实你的X长多长我都可以无限长

548
00:23:44,000 --> 00:23:46,099
就是说这个地方

549
00:23:46,399 --> 00:23:47,399
你换成2也好

550
00:23:47,399 --> 00:23:50,200
换成100也好都没关系

551
00:23:50,200 --> 00:23:51,000
换成100的话

552
00:23:51,000 --> 00:23:54,399
我就是一直一直一直一直走一直一直往下走

553
00:23:54,399 --> 00:23:56,500
就是说你多长都没关系

554
00:23:57,000 --> 00:23:58,299
就你的宽不好改

555
00:23:58,599 --> 00:24:00,500
就是说你的W宽就是说

556
00:24:00,500 --> 00:24:02,099
这个是3这个也是3

557
00:24:02,799 --> 00:24:04,099
就W这个东西不好改

558
00:24:04,399 --> 00:24:06,599
就是你必须要给3乘3才能fit进去

559
00:24:07,500 --> 00:24:09,000
那你就是说你要多长

560
00:24:09,000 --> 00:24:09,799
就X多长

561
00:24:09,799 --> 00:24:11,700
你Y有多多而劣

562
00:24:11,700 --> 00:24:12,599
其实都没关系

563
00:24:13,399 --> 00:24:13,799
OK

564
00:24:14,500 --> 00:24:16,299
这就是Systemic Array

565
00:24:18,399 --> 00:24:19,500
我们来看一下就是说

566
00:24:21,200 --> 00:24:23,200
对于一般的局限乘法干什么事情

567
00:24:24,299 --> 00:24:25,700
对于一般的局限乘法是说

568
00:24:25,700 --> 00:24:27,700
它可以通过切开来

569
00:24:27,700 --> 00:24:29,299
就是说假设我要算一个

570
00:24:29,299 --> 00:24:31,400
我的W是一个100乘100的话

571
00:24:31,799 --> 00:24:34,000
如果你的array是一个3乘3的话怎么办

572
00:24:34,400 --> 00:24:37,200
那就切成很多小的3乘3的W

573
00:24:37,500 --> 00:24:38,200
然后放进去

574
00:24:38,200 --> 00:24:39,700
然后做局限乘法

575
00:24:40,400 --> 00:24:41,700
通常你不会做3乘3

576
00:24:41,900 --> 00:24:44,799
通常一般来说是做64乘64

577
00:24:44,900 --> 00:24:47,000
或者128乘128就特别大

578
00:24:49,000 --> 00:24:54,000
然后它的一个问题是什么

579
00:24:54,000 --> 00:24:57,200
一个问题是说它的周期还是挺长的

580
00:24:57,200 --> 00:24:58,299
而且它的什么问题

581
00:24:58,700 --> 00:25:00,700
它这个地方都是在空等

582
00:25:00,900 --> 00:25:02,000
这些地方都是零

583
00:25:02,900 --> 00:25:04,200
都是零在空等

584
00:25:05,700 --> 00:25:06,700
在空的情况下

585
00:25:06,700 --> 00:25:09,200
就是说它其实能够通过做些批量

586
00:25:09,400 --> 00:25:11,600
做些来降低延时

587
00:25:11,600 --> 00:25:14,600
就是说尽量数据你尽量弄大一点

588
00:25:14,600 --> 00:25:16,299
然后能够给你接上

589
00:25:16,500 --> 00:25:19,600
就是说你在这些地方在没干事情时候

590
00:25:19,600 --> 00:25:21,900
实际上数据已经在后面排队进去了

591
00:25:21,900 --> 00:25:23,000
就是做流水了

592
00:25:23,200 --> 00:25:25,700
能够隐藏掉这样一些开销

593
00:25:27,299 --> 00:25:27,700
OK

594
00:25:28,500 --> 00:25:31,799
第三个是说你做一个Systolic Array

595
00:25:31,799 --> 00:25:32,600
或者一个AC

596
00:25:32,600 --> 00:25:33,700
它是不够的

597
00:25:34,000 --> 00:25:35,400
你神级网络还有别的东西

598
00:25:35,600 --> 00:25:36,600
你还有激活层

599
00:25:36,600 --> 00:25:36,900
对吧

600
00:25:36,900 --> 00:25:38,100
Sigmoid怎么算

601
00:25:38,400 --> 00:25:39,299
Relu怎么算

602
00:25:39,600 --> 00:25:41,799
通常来说一个AC

603
00:25:41,900 --> 00:25:44,100
它有特定的单元

604
00:25:44,299 --> 00:25:46,900
就是说我可以在Systolic Array上面

605
00:25:46,900 --> 00:25:47,900
再放一个

606
00:25:49,200 --> 00:25:52,299
就再放一个硬件叫做就算Activation

607
00:25:53,400 --> 00:25:55,600
就你的输出算完之后

608
00:25:55,600 --> 00:25:57,100
假设要算激活的话

609
00:25:57,100 --> 00:25:59,600
我就直接在这个地方把激活层给你算了

610
00:25:59,700 --> 00:26:00,900
就一个元素一个元素来

611
00:26:00,900 --> 00:26:04,700
就是说基本上你有什么样的层

612
00:26:04,800 --> 00:26:07,300
如果我现在单元不能做的话

613
00:26:07,300 --> 00:26:09,500
我再做一个新的单元出来帮你做运算

614
00:26:10,000 --> 00:26:11,300
就是说这就是AC

615
00:26:11,300 --> 00:26:14,400
AC就是说我先放一个单元

616
00:26:14,500 --> 00:26:15,300
看看够不够

617
00:26:15,300 --> 00:26:17,000
不够我再放点别的硬件进来

618
00:26:17,000 --> 00:26:18,900
就专门针对你的计算

619
00:26:19,000 --> 00:26:20,300
Workload做这个事情

620
00:26:22,000 --> 00:26:25,800
当然它的bug是说假设你来了一个新的

621
00:26:25,799 --> 00:26:27,899
神级网络跟你所有的人都不一样

622
00:26:28,000 --> 00:26:29,799
或者说神级网络突然不火了

623
00:26:29,799 --> 00:26:31,000
又回到我们当年

624
00:26:31,599 --> 00:26:33,000
比如说基于数的模型

625
00:26:33,200 --> 00:26:34,899
那么所有这些东西就没什么用了

626
00:26:36,000 --> 00:26:38,099
就当年像Nernet也做了AC来做

627
00:26:38,099 --> 00:26:41,799
但从来就Nernet不火了之后就没用了

628
00:26:42,000 --> 00:26:43,799
所以AC它的bug是说

629
00:26:44,200 --> 00:26:45,000
你做一个硬件

630
00:26:45,000 --> 00:26:47,399
你有两三年的研发周期

631
00:26:48,000 --> 00:26:50,299
但如果说你的任务在两三年之后

632
00:26:50,299 --> 00:26:51,399
你的任务变了

633
00:26:51,899 --> 00:26:53,000
那就很麻烦了

634
00:26:53,799 --> 00:26:56,200
反过来讲就是你这个领域不火了

635
00:26:56,400 --> 00:26:57,299
那也很麻烦了

636
00:26:57,799 --> 00:26:58,900
就是说做

637
00:26:58,900 --> 00:27:02,900
所以说基本上只有大厂愿意去花

638
00:27:03,299 --> 00:27:04,400
烧个几个亿美金

639
00:27:04,400 --> 00:27:05,799
几十亿美金来做芯片

640
00:27:06,900 --> 00:27:10,400
如果现在当然是说你看到朋友圈

641
00:27:10,400 --> 00:27:11,900
报道说这个公司做硬件

642
00:27:11,900 --> 00:27:12,900
那个公司做硬件

643
00:27:13,099 --> 00:27:14,400
其实做硬件的

644
00:27:14,599 --> 00:27:16,900
我们一直说国产硬件不行

645
00:27:16,900 --> 00:27:18,200
应该去做

646
00:27:18,200 --> 00:27:22,099
但实际上来说硬件的研发周期投入都很大

647
00:27:22,100 --> 00:27:24,600
所以风险是挺大的一件事情

648
00:27:27,100 --> 00:27:29,600
OK我们就稍微总结一下

649
00:27:31,100 --> 00:27:32,400
总结一下就是说

650
00:27:32,800 --> 00:27:35,400
我们假设把我们这些硬件放在这个地方

651
00:27:35,600 --> 00:27:39,500
然后我们的Y就是你的性能和功耗的话

652
00:27:39,800 --> 00:27:41,200
就当越往这边越好

653
00:27:41,200 --> 00:27:43,000
这边是高

654
00:27:44,000 --> 00:27:47,300
然后你的X是性能和功耗

655
00:27:47,400 --> 00:27:49,000
然后你的Y就是你的应用性

656
00:27:49,200 --> 00:27:50,300
开发性

657
00:27:50,299 --> 00:27:52,299
灵活性高的话

658
00:27:52,799 --> 00:27:54,200
基本上可以看到是说

659
00:27:54,599 --> 00:27:57,599
CPU当然是灵活性用性最好的

660
00:27:58,700 --> 00:28:01,500
所有东西基本上所有的代码都在CPU能跑

661
00:28:02,599 --> 00:28:05,500
但他性能其实计算性能是最差的

662
00:28:06,099 --> 00:28:08,299
GPU它的灵活性还不错

663
00:28:08,299 --> 00:28:09,099
就是说你用CUDA

664
00:28:09,099 --> 00:28:10,799
OpenC都还不错

665
00:28:11,399 --> 00:28:13,700
DSP它的性能可能更好一点

666
00:28:14,200 --> 00:28:16,000
在同样的价位的情况下

667
00:28:16,599 --> 00:28:18,599
就不是说你不能用一个Media

668
00:28:18,600 --> 00:28:21,800
Server的GPU比一个人家做在手机上的DSP

669
00:28:21,800 --> 00:28:22,600
说你比人家好

670
00:28:22,600 --> 00:28:23,500
那当然没意义

671
00:28:23,800 --> 00:28:25,900
就在同样的芯片面积的情况下

672
00:28:26,200 --> 00:28:28,200
DSP可以做到比GPU更好

673
00:28:28,300 --> 00:28:31,300
GPU相对来说还是一个通用的高性能计算芯片

674
00:28:32,200 --> 00:28:33,100
你可以再往下走

675
00:28:33,100 --> 00:28:34,100
走到FPCA

676
00:28:34,400 --> 00:28:35,900
然后再往下走到ASIC

677
00:28:36,700 --> 00:28:37,500
走到ASIC的话

678
00:28:37,500 --> 00:28:40,900
你可以认为功耗和性能可以偷到很极致的地方

679
00:28:41,000 --> 00:28:43,600
因为我就对这个应用做优化

680
00:28:43,700 --> 00:28:47,600
但是反过来既然说你就能跑这个应用

681
00:28:47,600 --> 00:28:48,700
你不能跑别的了

682
00:28:49,300 --> 00:28:50,400
这就是ASIC

683
00:28:51,600 --> 00:28:52,500
但反过来讲说

684
00:28:52,500 --> 00:28:55,000
还是我们昨天在QA环节有讲过

685
00:28:55,300 --> 00:28:59,300
现在是因为实在是计算任务太大

686
00:28:59,800 --> 00:29:00,400
就撑不住

687
00:29:00,400 --> 00:29:02,000
我的硬件性能撑不住

688
00:29:02,600 --> 00:29:05,000
而且硬件成本是非常大的一个投入了

689
00:29:05,400 --> 00:29:06,900
所以很多公司愿意说

690
00:29:06,900 --> 00:29:09,600
我甚至花几个亿美金自己造一个芯片

691
00:29:09,700 --> 00:29:11,400
也花得来

692
00:29:12,500 --> 00:29:13,700
OK就是现在这个阶段

693
00:29:13,700 --> 00:29:17,600
OK这就是这一节

