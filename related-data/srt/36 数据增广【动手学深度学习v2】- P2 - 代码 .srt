1
00:00:00,000 --> 00:00:04,320
我们来看一下图片增广的代码的实现

2
00:00:05,520 --> 00:00:09,400
首先我们用了Touch Vision的一个

3
00:00:09,400 --> 00:00:11,439
PyTorch做Vision的一个库

4
00:00:11,439 --> 00:00:16,800
然后我们会去从我们Repo里面

5
00:00:16,800 --> 00:00:18,440
其实有一个Image的folder

6
00:00:18,440 --> 00:00:21,000
就是我们生成所有的网页版的

7
00:00:21,000 --> 00:00:22,839
那些图片都放在这个folder里面

8
00:00:23,120 --> 00:00:25,760
然后我们从里面读出一只猫

9
00:00:25,760 --> 00:00:27,480
叫Cat这张图片出来

10
00:00:28,160 --> 00:00:29,400
然后我们再打印一下

11
00:00:29,400 --> 00:00:31,040
就是秀一下图片长什么样子

12
00:00:31,040 --> 00:00:33,640
这也就是我们刚刚在slides里面

13
00:00:33,640 --> 00:00:34,679
用到这张图片

14
00:00:35,880 --> 00:00:36,280
好

15
00:00:36,280 --> 00:00:38,760
然后我们定义一个这样子的函数

16
00:00:39,640 --> 00:00:43,000
可以看到其实是说我给你一张图片

17
00:00:43,440 --> 00:00:46,880
然后我给你一个图片增广的办法

18
00:00:47,800 --> 00:00:49,040
然后我告诉你说

19
00:00:49,160 --> 00:00:51,000
我要生成多少个

20
00:00:52,120 --> 00:00:53,880
对它重复作用多少次

21
00:00:54,400 --> 00:00:55,280
就是说这样子

22
00:00:55,280 --> 00:00:57,000
我们是重复作用8次

23
00:00:57,399 --> 00:01:00,600
就是说我就生成结果是有两行有4列

24
00:01:01,119 --> 00:01:02,039
scale你可以忽略

25
00:01:02,039 --> 00:01:04,599
scale就是说我画的图片是画多大一点

26
00:01:04,599 --> 00:01:06,920
就一点我就说我的画的时候多画

27
00:01:06,920 --> 00:01:07,879
画大一点点

28
00:01:09,000 --> 00:01:10,280
那它的作用就是说

29
00:01:10,560 --> 00:01:12,719
我就是对你number of rows

30
00:01:12,719 --> 00:01:14,000
乘以number of columns

31
00:01:14,000 --> 00:01:15,719
然后对它重复去作用

32
00:01:15,719 --> 00:01:17,480
我的数据增广

33
00:01:18,680 --> 00:01:20,680
然后在作用之后

34
00:01:20,680 --> 00:01:21,879
我把所有的图片存起来

35
00:01:21,879 --> 00:01:22,760
存到Y里面

36
00:01:23,039 --> 00:01:24,159
然后把它print出来

37
00:01:24,519 --> 00:01:25,560
所以这个很说白了

38
00:01:25,560 --> 00:01:27,280
就是把一个图片增广

39
00:01:27,560 --> 00:01:30,519
在我的这张图片上面作用多次

40
00:01:30,519 --> 00:01:31,879
然后再把你画出来

41
00:01:32,079 --> 00:01:34,240
这是一个辅助函数

42
00:01:35,879 --> 00:01:36,840
好 我们接下来看一下

43
00:01:36,840 --> 00:01:41,800
我们提到的那一些图片增广的用处

44
00:01:42,719 --> 00:01:45,520
第一个是说在touch vision的transform里面

45
00:01:45,520 --> 00:01:47,480
其实提供了一大量的

46
00:01:47,480 --> 00:01:49,599
你可以直接用的一些增广

47
00:01:50,240 --> 00:01:54,320
第一个叫做random horizontal flip

48
00:01:54,880 --> 00:01:59,040
就是在水平方向随机的进行翻转

49
00:01:59,320 --> 00:02:01,480
然后我们作用8次可以看到是说

50
00:02:01,800 --> 00:02:04,400
应该是50%概率保持不变

51
00:02:04,440 --> 00:02:06,200
50%概率翻一面

52
00:02:08,800 --> 00:02:11,200
然后第二个是说

53
00:02:11,200 --> 00:02:12,439
当然是说

54
00:02:13,000 --> 00:02:13,879
你知道

55
00:02:15,159 --> 00:02:17,200
第二个是说你上下翻转

56
00:02:17,240 --> 00:02:19,680
就是random vertical flip

57
00:02:20,280 --> 00:02:20,879
这叫猫

58
00:02:21,120 --> 00:02:23,080
猫我们这个图片是可以随机翻

59
00:02:23,200 --> 00:02:23,760
上下翻

60
00:02:24,400 --> 00:02:25,359
所以你可以

61
00:02:25,840 --> 00:02:27,319
但是不是每一个都可以的

62
00:02:29,759 --> 00:02:33,079
那么接下来是一个随机的剪裁

63
00:02:33,199 --> 00:02:36,959
叫做random resized crop

64
00:02:37,759 --> 00:02:39,799
就是说等于是我随机crop一个

65
00:02:39,799 --> 00:02:42,039
然后再帮你重新resize

66
00:02:42,319 --> 00:02:44,000
resize的第一个是说

67
00:02:44,000 --> 00:02:46,280
我最后的达到的输出

68
00:02:46,319 --> 00:02:48,000
输应该是200×200

69
00:02:48,000 --> 00:02:50,519
就不管你crop一个多大区域

70
00:02:50,560 --> 00:02:53,799
最后我重新把你resize到200×200

71
00:02:54,719 --> 00:02:56,120
scale就是说

72
00:02:57,239 --> 00:02:58,280
我们刚刚也提过

73
00:02:58,280 --> 00:03:02,120
是说你要在多大的区域进行

74
00:03:02,120 --> 00:03:03,239
就是说你的图片

75
00:03:03,239 --> 00:03:04,519
你这个裁出来的东西

76
00:03:04,840 --> 00:03:08,359
要保存多大的原始图片那一块

77
00:03:08,560 --> 00:03:10,120
就从10%

78
00:03:10,159 --> 00:03:11,639
就0.1到100%

79
00:03:11,639 --> 00:03:14,519
就是在里面随机的区域之间

80
00:03:14,519 --> 00:03:15,959
随机选一个数出来

81
00:03:16,519 --> 00:03:17,400
另外一个ratio

82
00:03:17,400 --> 00:03:18,759
就是我的高宽比了

83
00:03:18,959 --> 00:03:20,639
我们就是说高宽比

84
00:03:20,639 --> 00:03:22,039
要么是1比2

85
00:03:22,039 --> 00:03:22,959
要么是2比1

86
00:03:23,960 --> 00:03:25,159
当然你可以看一下

87
00:03:25,159 --> 00:03:25,800
apply一下

88
00:03:25,800 --> 00:03:26,760
就可以看到是

89
00:03:26,960 --> 00:03:28,879
其实刚刚我们也是slice里面

90
00:03:28,879 --> 00:03:30,760
这张图就是直接是这个东西生成的

91
00:03:31,400 --> 00:03:32,280
看到这猫

92
00:03:32,280 --> 00:03:34,240
然后被猫头在这个地方

93
00:03:34,400 --> 00:03:34,960
猫身子

94
00:03:34,960 --> 00:03:37,840
然后这个是保存的比较多的

95
00:03:38,280 --> 00:03:40,159
这一块就是保叫图片

96
00:03:40,200 --> 00:03:40,760
保存

97
00:03:41,040 --> 00:03:42,439
扣的比较小的一块

98
00:03:45,319 --> 00:03:47,040
当然是说一般来说

99
00:03:47,040 --> 00:03:48,120
这种东西取多少

100
00:03:48,680 --> 00:03:50,600
我觉得这个参数就不错

101
00:03:50,920 --> 00:03:52,040
0.1%

102
00:03:52,359 --> 00:03:53,599
这个参数也不错

103
00:03:54,079 --> 00:03:55,479
就是说你当然是说

104
00:03:55,799 --> 00:03:57,599
如果你把这两个值调小

105
00:03:57,599 --> 00:03:58,799
把这个值调小一点

106
00:03:59,000 --> 00:04:01,159
把两个值越靠近1的话

107
00:04:01,159 --> 00:04:05,879
你的增广的幅度就变低了

108
00:04:06,199 --> 00:04:08,239
但现在我们是比较大的一个增广

109
00:04:08,319 --> 00:04:10,680
0.1%

110
00:04:10,680 --> 00:04:11,799
然后这个是2比1

111
00:04:11,799 --> 00:04:12,840
这个是比较大的

112
00:04:12,840 --> 00:04:15,159
也是比较常用的一个做法

113
00:04:18,159 --> 00:04:19,199
第三个是说

114
00:04:19,199 --> 00:04:22,199
我们可以随机改变我们的亮度

115
00:04:24,439 --> 00:04:25,680
亮度就是说

116
00:04:25,759 --> 00:04:29,199
你的叫做color jitter

117
00:04:29,599 --> 00:04:31,039
就里面包括了很多选项

118
00:04:31,039 --> 00:04:33,120
就是说亮度对比度

119
00:04:33,759 --> 00:04:34,279
饱和度

120
00:04:35,039 --> 00:04:36,639
色温

121
00:04:36,680 --> 00:04:38,519
色不是色温

122
00:04:38,519 --> 00:04:39,839
色Q就是颜色

123
00:04:40,919 --> 00:04:42,599
那brightness就是说0.5

124
00:04:43,279 --> 00:04:47,039
基本上是说在你上下0.5之间

125
00:04:47,200 --> 00:04:51,200
就是增加50%或者减低50%

126
00:04:51,200 --> 00:04:53,680
0的话就表示我就不改变了

127
00:04:54,240 --> 00:04:57,120
所以这看到就是说主要是改变的是亮度

128
00:05:01,400 --> 00:05:04,520
当然是说我们可以改变我们的色调

129
00:05:04,520 --> 00:05:09,439
就是hue改变增大或者减少50%

130
00:05:09,439 --> 00:05:10,920
这个range里面随机取一个

131
00:05:11,200 --> 00:05:11,960
剩下的不变

132
00:05:11,960 --> 00:05:13,400
就是改变的是色调

133
00:05:13,760 --> 00:05:17,240
当然是说更正常的是

134
00:05:17,240 --> 00:05:19,400
我们其实是大家一起来改

135
00:05:20,040 --> 00:05:22,200
这个是一个很常见的一个组合

136
00:05:22,200 --> 00:05:25,480
就是所有的亮度对比度

137
00:05:25,920 --> 00:05:27,280
饱和度色调

138
00:05:27,440 --> 00:05:30,920
我都允许你在增加或者减少50%

139
00:05:31,200 --> 00:05:34,720
然后你每一次在里面这4个参数里面

140
00:05:34,720 --> 00:05:37,200
随机取出4个随机值

141
00:05:37,200 --> 00:05:38,440
然后对做组合

142
00:05:38,680 --> 00:05:39,360
就可以看到

143
00:05:39,360 --> 00:05:40,880
就是说可以看到说这个图片

144
00:05:40,880 --> 00:05:42,960
还是挺多样性的

145
00:05:43,440 --> 00:05:44,320
就很黑

146
00:05:44,360 --> 00:05:45,320
然后很亮

147
00:05:45,400 --> 00:05:47,880
然后这些还是很亮

148
00:05:47,960 --> 00:05:48,920
其实很绿

149
00:05:49,280 --> 00:05:49,920
这个是很亮

150
00:05:49,960 --> 00:05:51,360
然后很紫

151
00:05:52,320 --> 00:05:52,840
OK

152
00:05:53,200 --> 00:05:54,760
就基本上可以看到是说

153
00:05:55,160 --> 00:05:58,680
我们做增广还是幅度比较大的

154
00:05:59,360 --> 00:06:00,160
可以看到

155
00:06:00,760 --> 00:06:02,880
你可能会觉得在实际情况下

156
00:06:02,880 --> 00:06:05,200
也遇不到太多这样子的情况

157
00:06:05,200 --> 00:06:07,400
说真的颜色会那么奇怪

158
00:06:10,880 --> 00:06:12,960
就是说另外一个是说

159
00:06:12,959 --> 00:06:15,919
我们其实不是一般来说

160
00:06:15,919 --> 00:06:17,279
不会做用一种

161
00:06:17,279 --> 00:06:21,120
我们一般是几个增广重复叠加

162
00:06:21,439 --> 00:06:22,879
所谓的效果其实很简单

163
00:06:22,879 --> 00:06:24,919
就是说给张图片过来

164
00:06:25,120 --> 00:06:27,039
我用的是compose这个函数

165
00:06:27,759 --> 00:06:29,039
那么就是说一张图片进来

166
00:06:29,039 --> 00:06:33,159
先随机的水平翻转一下

167
00:06:33,319 --> 00:06:35,359
然后再对这个是colorog

168
00:06:35,399 --> 00:06:38,000
就是我们之前那个东西存进来的

169
00:06:38,799 --> 00:06:39,759
然后shapedog

170
00:06:39,800 --> 00:06:40,399
就是说

171
00:06:40,399 --> 00:06:44,519
然后对它再做颜色的一些增广

172
00:06:44,519 --> 00:06:46,279
然后再做形状上的增广

173
00:06:46,719 --> 00:06:47,920
所以然后apply以后

174
00:06:47,920 --> 00:06:49,039
你会看到就是说

175
00:06:49,560 --> 00:06:51,360
基本上这三个东西

176
00:06:51,399 --> 00:06:52,719
加在一起做作用了

177
00:06:53,360 --> 00:06:55,240
所以也就是这三个

178
00:06:55,240 --> 00:06:57,639
也是我们在刚刚slide里面

179
00:06:57,639 --> 00:06:58,879
提到的三种

180
00:06:58,879 --> 00:07:00,879
最常见的图片增广方式

181
00:07:01,360 --> 00:07:03,039
这个也是在实际情况中

182
00:07:03,039 --> 00:07:04,719
最常用的三种

183
00:07:07,199 --> 00:07:07,519
好

184
00:07:07,519 --> 00:07:08,719
接下来我们来看一下

185
00:07:08,720 --> 00:07:11,760
就是说我们真的去尝试一下

186
00:07:11,760 --> 00:07:13,320
用不同的增广

187
00:07:13,360 --> 00:07:15,360
来比较一下效果

188
00:07:16,280 --> 00:07:16,440
好

189
00:07:16,440 --> 00:07:20,120
这里我们用的是Sifa10这个数据

190
00:07:20,120 --> 00:07:20,560
机

191
00:07:22,200 --> 00:07:23,760
我们也没讲过Sifa10

192
00:07:23,760 --> 00:07:25,560
Sifa10你可以认为是

193
00:07:25,600 --> 00:07:29,760
ImageNet的里面采样了10个类

194
00:07:29,800 --> 00:07:31,480
然后把这个图片做的特别小

195
00:07:31,480 --> 00:07:33,600
就算二应该是32×32

196
00:07:33,720 --> 00:07:34,360
我记得

197
00:07:34,720 --> 00:07:38,240
所以然后也是一个

198
00:07:38,240 --> 00:07:40,240
非常常用的来

199
00:07:40,280 --> 00:07:41,480
入门数据集

200
00:07:42,199 --> 00:07:43,800
这数据集比我们的Fashion

201
00:07:43,800 --> 00:07:44,160
Administrator

202
00:07:44,160 --> 00:07:45,800
应该是稍微那么难

203
00:07:45,800 --> 00:07:46,439
那么一点点

204
00:07:46,439 --> 00:07:47,720
它是彩色图片

205
00:07:48,600 --> 00:07:51,360
但是我觉得难度在一个规模上面

206
00:07:51,400 --> 00:07:52,759
然后也是学术界

207
00:07:52,759 --> 00:07:54,040
最常用的一个数据集

208
00:07:55,120 --> 00:07:56,720
但实际过程中

209
00:07:56,720 --> 00:07:57,480
这个数据没用

210
00:07:57,480 --> 00:07:58,639
还是太小了

211
00:07:59,079 --> 00:08:01,800
不能给你太多指导性的意见

212
00:08:01,960 --> 00:08:02,920
但是因为它小

213
00:08:03,120 --> 00:08:04,240
所以所有人都能跑

214
00:08:04,280 --> 00:08:06,400
所以在学术界特别流行

215
00:08:07,040 --> 00:08:08,120
反正不管怎么样

216
00:08:08,120 --> 00:08:09,720
我们把这个数据集下下来

217
00:08:10,560 --> 00:08:12,800
然后我们再打印一下这个数据集

218
00:08:16,199 --> 00:08:17,600
然后我们打印就没

219
00:08:18,680 --> 00:08:20,439
因为其实刚刚我重新跑了一下

220
00:08:20,439 --> 00:08:21,040
这个数据集

221
00:08:21,040 --> 00:08:22,199
重新就下了一下

222
00:08:23,040 --> 00:08:23,720
下了半天

223
00:08:24,240 --> 00:08:26,120
这个网速不是很快

224
00:08:26,160 --> 00:08:27,759
因为是从他的一个

225
00:08:27,920 --> 00:08:30,079
学校的一个官网服务器下的

226
00:08:30,720 --> 00:08:31,280
然后可以看到

227
00:08:31,319 --> 00:08:32,399
就是说这里面的图片

228
00:08:32,399 --> 00:08:33,120
长这个样子

229
00:08:34,120 --> 00:08:36,480
反正人看也挺吃力的

230
00:08:36,639 --> 00:08:37,759
这不知道是什么东西

231
00:08:37,759 --> 00:08:38,039
在里面

232
00:08:38,240 --> 00:08:38,800
这马

233
00:08:39,920 --> 00:08:40,680
什么

234
00:08:41,519 --> 00:08:42,000
船

235
00:08:43,320 --> 00:08:43,800
飞机

236
00:08:45,320 --> 00:08:46,800
各种各种图片

237
00:08:49,600 --> 00:08:50,240
OK

238
00:08:51,240 --> 00:08:52,320
所以接下来就是说

239
00:08:52,320 --> 00:08:54,080
我们定义两个

240
00:08:54,759 --> 00:08:55,680
augmentation

241
00:08:56,240 --> 00:08:57,000
就可以看一下

242
00:08:57,000 --> 00:08:57,840
就是说

243
00:08:58,720 --> 00:09:01,680
第一个是我们在训练的时候

244
00:09:01,680 --> 00:09:03,480
我们其实就用一个

245
00:09:03,759 --> 00:09:06,440
就是随机的水平翻转

246
00:09:06,680 --> 00:09:08,360
我们没有去resize

247
00:09:08,399 --> 00:09:09,879
因为这个图片太小了

248
00:09:09,879 --> 00:09:11,920
就一个32x32的图片

249
00:09:12,560 --> 00:09:13,560
你可以resize

250
00:09:13,560 --> 00:09:14,879
就是你可以从可能是

251
00:09:14,879 --> 00:09:16,639
你可以稍微

252
00:09:16,840 --> 00:09:17,279
相对来说

253
00:09:17,279 --> 00:09:18,240
这个图片比较好

254
00:09:18,240 --> 00:09:19,519
是因为他已经把这个图片

255
00:09:19,519 --> 00:09:20,600
放在这中间了

256
00:09:20,639 --> 00:09:22,080
所以resize不resize

257
00:09:22,080 --> 00:09:23,480
可能也问题不大

258
00:09:24,320 --> 00:09:25,960
就大家有兴趣可以去试一下

259
00:09:25,960 --> 00:09:27,879
就是说你尝试一下做resize

260
00:09:28,800 --> 00:09:30,399
第二个我们也没有改颜色

261
00:09:30,480 --> 00:09:30,920
这里

262
00:09:30,919 --> 00:09:33,439
因为测试级和训练级

263
00:09:33,439 --> 00:09:35,919
好像感觉上颜色上来说

264
00:09:35,959 --> 00:09:36,599
亮度上来说

265
00:09:36,599 --> 00:09:38,199
没感觉没那么变化

266
00:09:38,199 --> 00:09:39,479
所以我们并没有改

267
00:09:39,519 --> 00:09:41,120
但是你如果大家可以去试一下

268
00:09:41,120 --> 00:09:42,360
就是说你可以去改颜色

269
00:09:42,360 --> 00:09:43,279
可以去resize

270
00:09:43,319 --> 00:09:44,439
但是你可以看到

271
00:09:44,439 --> 00:09:45,439
测试级和训练级

272
00:09:45,439 --> 00:09:46,719
长得还挺像的

273
00:09:46,759 --> 00:09:48,879
所以就是说你不要做太狠的

274
00:09:48,879 --> 00:09:49,799
这样子的

275
00:09:52,360 --> 00:09:53,159
增光

276
00:09:54,959 --> 00:09:56,879
最后一个是to tensor

277
00:09:56,879 --> 00:09:57,399
to tensor

278
00:09:57,399 --> 00:09:59,639
就是说把你这些东西

279
00:10:00,399 --> 00:10:03,439
变成一个4D的矩阵

280
00:10:03,759 --> 00:10:05,039
变4D一个tensor

281
00:10:05,039 --> 00:10:06,240
这样子我们可以训练

282
00:10:06,559 --> 00:10:08,600
这也是一般来说

283
00:10:08,639 --> 00:10:10,039
做图片增广

284
00:10:10,039 --> 00:10:11,879
最后都会跟一个to tensor

285
00:10:12,639 --> 00:10:13,720
对测试的话

286
00:10:13,720 --> 00:10:14,799
测试我们什么都不干

287
00:10:14,799 --> 00:10:16,720
就是直接是to tensor过去了

288
00:10:17,279 --> 00:10:17,720
OK

289
00:10:17,720 --> 00:10:19,360
所以这个是typical的

290
00:10:19,639 --> 00:10:21,159
一般来的测试的写法

291
00:10:21,559 --> 00:10:23,559
这个就是说这个不是一般的

292
00:10:23,639 --> 00:10:26,080
因为我们只做了水平的翻转

293
00:10:26,279 --> 00:10:26,840
一般来说

294
00:10:26,840 --> 00:10:28,799
你还是会做一下resize

295
00:10:28,800 --> 00:10:30,600
和你的颜色的一些变化

296
00:10:31,880 --> 00:10:32,440
OK

297
00:10:33,560 --> 00:10:36,480
然后我们来apply一下

298
00:10:36,480 --> 00:10:37,360
就是apply的时候

299
00:10:37,360 --> 00:10:38,160
你就是说

300
00:10:38,200 --> 00:10:41,360
你去用touch vision dataset

301
00:10:41,400 --> 00:10:42,280
在apply的时候

302
00:10:42,280 --> 00:10:45,120
你就直接去transformer

303
00:10:45,120 --> 00:10:47,480
等于org

304
00:10:47,520 --> 00:10:49,440
org这个就行了

305
00:10:49,720 --> 00:10:51,240
就是说你把我们刚刚定义的

306
00:10:51,240 --> 00:10:53,240
那个东西直接apply过去

307
00:10:53,400 --> 00:10:54,640
那么这样子的话

308
00:10:54,640 --> 00:10:56,400
他们每一次去

309
00:10:56,439 --> 00:11:00,439
他每一次去读一过的时候

310
00:11:00,439 --> 00:11:02,759
他就会去apply一下

311
00:11:03,199 --> 00:11:04,559
我们定义的org

312
00:11:05,959 --> 00:11:06,840
然后别的东西

313
00:11:06,840 --> 00:11:08,000
都跟我们之前是一样的

314
00:11:08,000 --> 00:11:09,639
就是把这个data set

315
00:11:09,639 --> 00:11:11,240
放到data loader里面

316
00:11:11,240 --> 00:11:11,679
这样子

317
00:11:11,679 --> 00:11:12,639
每次读一个

318
00:11:12,679 --> 00:11:14,399
back size出来

319
00:11:14,679 --> 00:11:16,319
这个里面number of workers

320
00:11:16,319 --> 00:11:17,759
我们其实这个里面就是一个4

321
00:11:17,919 --> 00:11:19,879
其实应该其实就是一个4

322
00:11:20,919 --> 00:11:22,960
通常来说

323
00:11:22,960 --> 00:11:24,720
我一般来说

324
00:11:24,720 --> 00:11:25,920
你如果做了org

325
00:11:25,920 --> 00:11:27,200
orgmentation的话

326
00:11:27,200 --> 00:11:28,920
你最好是把number of workers

327
00:11:28,960 --> 00:11:29,920
搞大一点点

328
00:11:30,480 --> 00:11:32,840
那是因为图片做orgmentation

329
00:11:32,840 --> 00:11:34,120
不是一件很便宜的事情

330
00:11:34,120 --> 00:11:35,279
但我们这里比较简单

331
00:11:35,279 --> 00:11:36,560
就随机翻转一下

332
00:11:36,600 --> 00:11:37,920
但如果你要做resize

333
00:11:38,080 --> 00:11:39,639
你做color的变化的话

334
00:11:39,920 --> 00:11:41,960
其实对于计算量要求

335
00:11:41,960 --> 00:11:43,120
还是挺高的

336
00:11:43,120 --> 00:11:44,759
特别是比较大的图片的话

337
00:11:45,440 --> 00:11:46,519
你如果做很多的

338
00:11:46,519 --> 00:11:47,600
orgmentation的话

339
00:11:47,600 --> 00:11:48,240
那么很有可能

340
00:11:48,279 --> 00:11:50,040
orgmentation是你的一大瓶颈

341
00:11:50,279 --> 00:11:53,000
包括了一确实计算量不小

342
00:11:53,080 --> 00:11:53,919
第二的话

343
00:11:54,440 --> 00:11:56,960
就是因为你一个图片过来

344
00:11:56,960 --> 00:11:59,399
他要去一个一个的

345
00:11:59,399 --> 00:12:01,039
去做那些orgmentation

346
00:12:01,039 --> 00:12:03,600
就是要做make很多次的python的

347
00:12:03,600 --> 00:12:04,159
call

348
00:12:04,559 --> 00:12:06,639
这个导致说你python

349
00:12:06,639 --> 00:12:08,000
大家知道性能就不咋地

350
00:12:08,120 --> 00:12:10,879
所以这里就是多开几个进程

351
00:12:10,919 --> 00:12:12,639
会让你快一点点

352
00:12:14,759 --> 00:12:15,000
好

353
00:12:15,000 --> 00:12:16,080
最后我们就训练

354
00:12:16,320 --> 00:12:18,879
训练这个事情就是比较简单

355
00:12:18,879 --> 00:12:20,200
我们就不要太

356
00:12:20,440 --> 00:12:21,360
管太多了

357
00:12:22,039 --> 00:12:23,759
这个是training batch怎么样

358
00:12:24,200 --> 00:12:24,639
training batch

359
00:12:24,639 --> 00:12:26,639
首先我们会把这个东西

360
00:12:26,879 --> 00:12:28,440
load到我们的device上面

361
00:12:28,440 --> 00:12:29,680
我们现在都是用

362
00:12:31,159 --> 00:12:32,519
GPU来做运算了

363
00:12:32,759 --> 00:12:35,080
然后如果你是access一个list的话

364
00:12:35,080 --> 00:12:36,639
我一个一个copy过去

365
00:12:36,680 --> 00:12:37,639
如果你不是的话

366
00:12:37,639 --> 00:12:38,600
就copy过去了

367
00:12:38,720 --> 00:12:42,080
然后我说你这是一个

368
00:12:42,440 --> 00:12:43,039
点train

369
00:12:43,039 --> 00:12:43,680
就是说我说

370
00:12:43,680 --> 00:12:45,759
我这是一个training mode

371
00:12:47,200 --> 00:12:49,920
然后把t2设0

372
00:12:49,920 --> 00:12:52,240
然后把predict拿出来

373
00:12:52,280 --> 00:12:53,200
放到loss里面

374
00:12:53,200 --> 00:12:54,720
把loss加做backward

375
00:12:54,760 --> 00:12:57,760
然后把training的update一下

376
00:12:58,080 --> 00:12:59,040
最后这些东西

377
00:12:59,040 --> 00:13:01,200
就是我们要把这些loss

378
00:13:01,200 --> 00:13:03,680
accuracy给你弄出来

379
00:13:04,680 --> 00:13:06,560
这里面其实跟之前没区别

380
00:13:07,800 --> 00:13:10,160
这个函数我就不要太去过了

381
00:13:11,280 --> 00:13:12,080
这里用到的

382
00:13:12,080 --> 00:13:14,320
当时说我们用到的data parallel

383
00:13:14,720 --> 00:13:16,400
因为我们要用多GPU了

384
00:13:16,480 --> 00:13:18,720
因为sifa也不是一个

385
00:13:18,879 --> 00:13:21,399
训练起来也不那么便宜

386
00:13:21,399 --> 00:13:22,480
所以用两个GPU

387
00:13:22,480 --> 00:13:23,920
用4个GPU是比较好的

388
00:13:25,680 --> 00:13:26,279
另外一个是说

389
00:13:26,279 --> 00:13:28,000
别的都没有特别区别

390
00:13:28,000 --> 00:13:31,480
就是基本就是print一些东西了

391
00:13:31,560 --> 00:13:33,320
所以我们就不那么去

392
00:13:33,320 --> 00:13:34,720
给大家一一去介绍

393
00:13:34,720 --> 00:13:36,080
每一行长什么样子了

394
00:13:36,960 --> 00:13:37,600
好

395
00:13:37,720 --> 00:13:38,879
接下来我们来看一下

396
00:13:38,879 --> 00:13:41,320
我们的整个训练

397
00:13:42,000 --> 00:13:42,720
训练的话

398
00:13:42,720 --> 00:13:46,080
那就是我们还是用一个restnet18

399
00:13:46,080 --> 00:13:50,639
然后就是apply我们的

400
00:13:50,639 --> 00:13:52,800
就是随机初始化

401
00:13:52,800 --> 00:13:54,000
我们之所以这么写

402
00:13:54,000 --> 00:13:55,080
就是给大家看清楚

403
00:13:55,080 --> 00:13:56,639
就是说对于线性层

404
00:13:56,800 --> 00:13:58,240
就全连接层和卷进层

405
00:13:58,240 --> 00:14:00,320
我们用的是xvr

406
00:14:00,320 --> 00:14:01,960
uniform这个方法

407
00:14:01,960 --> 00:14:03,960
来给大家做随机初始化

408
00:14:04,120 --> 00:14:05,759
就是说其实你默认

409
00:14:05,759 --> 00:14:06,920
他也帮你做了

410
00:14:07,120 --> 00:14:08,160
但我们这么写出来

411
00:14:08,160 --> 00:14:10,000
就是为了可读性

412
00:14:10,080 --> 00:14:11,640
就是说我们是教学毕竟

413
00:14:12,920 --> 00:14:14,600
剩下的东西就是说

414
00:14:15,159 --> 00:14:18,000
就是load一个training的iterator

415
00:14:18,120 --> 00:14:19,879
load我们的测试集

416
00:14:19,920 --> 00:14:21,840
然后这是我们的loss

417
00:14:21,879 --> 00:14:23,240
然后用的是add

418
00:14:23,360 --> 00:14:24,080
我们没有讲过

419
00:14:24,080 --> 00:14:25,040
add这个东西

420
00:14:25,159 --> 00:14:27,480
我们就简单认为是一个

421
00:14:27,519 --> 00:14:29,720
比较平滑的一个sgd

422
00:14:29,720 --> 00:14:32,840
他对于用起来跟sgd差不多

423
00:14:32,840 --> 00:14:35,399
就是说他对学习率不那么敏感

424
00:14:35,399 --> 00:14:36,560
就是说你对调参

425
00:14:36,560 --> 00:14:37,480
调这个东西

426
00:14:37,519 --> 00:14:38,639
没那么敏感一点

427
00:14:39,000 --> 00:14:39,759
最后就是说

428
00:14:39,759 --> 00:14:42,000
我们在这上面

429
00:14:42,080 --> 00:14:46,759
对我们的跑时的epoch

430
00:14:46,759 --> 00:14:48,200
就跟之前是一样的

431
00:14:48,200 --> 00:14:48,879
唯一的不一样

432
00:14:48,879 --> 00:14:51,600
就是说我们在load cfast的时候

433
00:14:51,639 --> 00:14:55,240
apply了我们一个train的增广

434
00:14:55,240 --> 00:14:56,840
和我们的测试集的增广

435
00:14:56,960 --> 00:14:58,200
这是其实你可以认为

436
00:14:58,200 --> 00:14:59,960
这是跟之前的唯一的区别

437
00:15:00,320 --> 00:15:02,519
当然数据集有一点点不一样

438
00:15:02,519 --> 00:15:03,720
也是另外一个区别了

439
00:15:05,200 --> 00:15:05,440
好

440
00:15:05,440 --> 00:15:07,480
我们来看一下这个东西

441
00:15:07,480 --> 00:15:08,519
我是这个东西

442
00:15:08,519 --> 00:15:12,279
是我在直播前20分钟跑的

443
00:15:13,679 --> 00:15:15,759
然后就是跑一下

444
00:15:15,759 --> 00:15:16,679
大概三分钟的样子

445
00:15:16,840 --> 00:15:18,480
可以看到这三分钟的样子

446
00:15:19,720 --> 00:15:21,439
然后看到是说

447
00:15:21,439 --> 00:15:23,360
就直接给大家看一下结果

448
00:15:24,919 --> 00:15:26,000
loss就是

449
00:15:26,000 --> 00:15:27,240
你可以看到这是loss

450
00:15:27,240 --> 00:15:28,840
就是筐筐筐再往下降

451
00:15:29,120 --> 00:15:31,000
这个降的就是有点

452
00:15:31,079 --> 00:15:32,439
你可以发现

453
00:15:32,439 --> 00:15:33,199
就是说

454
00:15:33,240 --> 00:15:34,879
他降的就是基本上

455
00:15:35,679 --> 00:15:39,080
在每一次迭代完一次之后

456
00:15:39,080 --> 00:15:41,279
下降一下

457
00:15:43,000 --> 00:15:45,720
这个也是跟我们怎么算loss相关

458
00:15:45,879 --> 00:15:47,600
也不是特别奇怪的地方

459
00:15:48,039 --> 00:15:49,159
第二个看到是说

460
00:15:49,159 --> 00:15:50,559
我们的训练的accuracy

461
00:15:50,559 --> 00:15:52,759
是93.6%

462
00:15:53,200 --> 00:15:55,000
我们的测试accuracy

463
00:15:55,000 --> 00:15:57,439
是83.5%

464
00:15:57,879 --> 00:15:58,519
可以看到

465
00:16:00,519 --> 00:16:02,639
这个线是我们的测试的进度

466
00:16:03,519 --> 00:16:06,600
这个线是我们的训练的进度

467
00:16:07,279 --> 00:16:09,720
但我们是在两个GPU上做的

468
00:16:09,759 --> 00:16:11,840
我们跑的是大概每秒钟

469
00:16:11,840 --> 00:16:13,759
能处理4600个样本

470
00:16:13,919 --> 00:16:15,000
所以性能还行

471
00:16:15,480 --> 00:16:18,639
然后可以看到这个地方还可以

472
00:16:18,799 --> 00:16:20,399
我觉得就是说一般般

473
00:16:20,519 --> 00:16:22,159
就是Sifa10确实

474
00:16:22,159 --> 00:16:23,639
我们可以做到非常好

475
00:16:23,639 --> 00:16:24,799
百分之九十几十

476
00:16:24,799 --> 00:16:26,159
95以上是可以做到的

477
00:16:26,559 --> 00:16:28,240
当然这里我们没有用的

478
00:16:28,240 --> 00:16:29,679
很小的一个resnet

479
00:16:29,720 --> 00:16:31,240
然后没有做别的

480
00:16:31,240 --> 00:16:33,039
特别多的操作在里面

481
00:16:33,840 --> 00:16:35,879
而且基本上你可以认为

482
00:16:35,879 --> 00:16:37,680
这里是没有完全收敛的

483
00:16:37,680 --> 00:16:39,200
其实你还是可以一直迭代下去

484
00:16:39,200 --> 00:16:40,519
你可以迭代个50轮

485
00:16:40,519 --> 00:16:41,320
50个epoke

486
00:16:41,320 --> 00:16:42,840
应该是会更好一点

487
00:16:42,840 --> 00:16:43,200
首先

488
00:16:43,799 --> 00:16:45,279
另外一块就是说

489
00:16:45,680 --> 00:16:46,279
可以看到说

490
00:16:46,279 --> 00:16:48,080
我们还是有一点overfitting的地方

491
00:16:48,840 --> 00:16:49,360
你看见没有

492
00:16:49,360 --> 00:16:50,919
就是overfitting在

493
00:16:51,519 --> 00:16:54,159
测试进度和训练进度的

494
00:16:54,200 --> 00:16:54,560
之间

495
00:16:54,560 --> 00:16:56,240
还是有比较大的一个gap

496
00:16:57,120 --> 00:17:01,159
当然是你可以通过更大的增强

497
00:17:01,360 --> 00:17:04,720
然后更强的一些数据增广

498
00:17:04,759 --> 00:17:07,519
或者说你可以加一些weight decay

499
00:17:07,519 --> 00:17:09,599
这种东西来进行一下控制

500
00:17:10,120 --> 00:17:12,839
但我们这里主要是来给大家介绍一下

501
00:17:13,240 --> 00:17:14,839
用不用增广的区别

502
00:17:15,559 --> 00:17:16,400
所以我们可以看一下

503
00:17:16,400 --> 00:17:17,960
如果不用增广会怎么样

504
00:17:18,599 --> 00:17:19,640
不用增广怎么做

505
00:17:20,880 --> 00:17:21,440
不用增广

506
00:17:21,440 --> 00:17:25,880
其实说你就把training的增广

507
00:17:25,880 --> 00:17:27,039
改成用测试就行了

508
00:17:27,039 --> 00:17:27,440
对吧

509
00:17:27,920 --> 00:17:29,120
就这两个微微区别

510
00:17:29,120 --> 00:17:29,880
是训练的时候

511
00:17:29,880 --> 00:17:31,120
我们左右翻转了

512
00:17:31,759 --> 00:17:33,079
测试的时候没有翻转

513
00:17:34,559 --> 00:17:36,319
我们下一个函数

514
00:17:36,319 --> 00:17:37,000
就是说

515
00:17:37,000 --> 00:17:39,120
直接把测试的增广

516
00:17:39,120 --> 00:17:40,319
作为训练增广放进去

517
00:17:40,319 --> 00:17:42,079
就是不要左右翻转

518
00:17:42,440 --> 00:17:43,680
这可以看一下结果

519
00:17:44,319 --> 00:17:45,720
我们也不给大家重新跑了

520
00:17:45,720 --> 00:17:46,759
这个东西也要跑一下

521
00:17:46,759 --> 00:17:47,599
也要两分钟了

522
00:17:48,359 --> 00:17:49,039
首先

523
00:17:49,559 --> 00:17:54,599
训练accuracy加到了97.5%

524
00:17:55,120 --> 00:17:55,720
就很高了

525
00:17:56,559 --> 00:17:57,359
这之前是多少

526
00:17:57,400 --> 00:17:59,400
之前是93.6%

527
00:17:59,960 --> 00:18:01,200
就是说你不翻转的话

528
00:18:01,640 --> 00:18:03,240
一下就到了97.5%

529
00:18:03,240 --> 00:18:04,200
别的都是一样的

530
00:18:04,320 --> 00:18:05,480
别的参数我们都没变

531
00:18:06,040 --> 00:18:06,880
测试精度

532
00:18:08,400 --> 00:18:10,120
是82.4%

533
00:18:10,840 --> 00:18:11,800
那么这个地方是什么

534
00:18:11,800 --> 00:18:13,240
这个地方38%

535
00:18:13,240 --> 00:18:14,360
83.5%

536
00:18:15,480 --> 00:18:17,320
测试精度低了

537
00:18:17,880 --> 00:18:19,400
大概是一个点的样子

538
00:18:20,320 --> 00:18:21,759
所以可以看到是说

539
00:18:22,040 --> 00:18:22,480
这个地方

540
00:18:22,480 --> 00:18:24,480
因为训练精度高了很多

541
00:18:24,480 --> 00:18:25,720
测试精度低了很多

542
00:18:25,720 --> 00:18:27,920
那就意味着测试精度高了

543
00:18:28,200 --> 00:18:29,160
去年高了很多

544
00:18:29,160 --> 00:18:30,240
测试低那么一点点

545
00:18:30,680 --> 00:18:32,200
你可以看到之间 gap

546
00:18:33,160 --> 00:18:34,400
差的那个地方

547
00:18:35,160 --> 00:18:35,920
大了很多

548
00:18:36,560 --> 00:18:37,680
就意味着是说

549
00:18:37,680 --> 00:18:39,480
overfilling更加严重了

550
00:18:40,519 --> 00:18:42,120
可以看到就是说简简单单

551
00:18:42,120 --> 00:18:44,400
我就是把测试图片左右翻转一下

552
00:18:44,400 --> 00:18:46,080
就可以还是能有效的

553
00:18:46,080 --> 00:18:49,360
降低我的过拟核的程度

554
00:18:49,840 --> 00:18:51,279
所以就是说

555
00:18:51,800 --> 00:18:54,279
图片增广在很多程度上

556
00:18:54,279 --> 00:18:56,759
就是可以把你的测试精度

557
00:18:56,759 --> 00:18:58,240
和训练精度

558
00:18:58,240 --> 00:18:59,799
跟你之间的差距

559
00:18:59,799 --> 00:19:01,599
可以变得更小一点

560
00:19:01,599 --> 00:19:03,879
甚至是在有些情况的情况下

561
00:19:03,879 --> 00:19:05,240
你如果做的比较狠的

562
00:19:05,240 --> 00:19:06,400
一些增广的时候

563
00:19:06,400 --> 00:19:07,720
你的测试精度

564
00:19:07,720 --> 00:19:10,079
是要比你的训练精度要高的

565
00:19:10,879 --> 00:19:12,039
就你经常可以在

566
00:19:12,039 --> 00:19:13,559
在训练imagine.net的时候

567
00:19:13,559 --> 00:19:15,960
你经常可以看到我的测试精度

568
00:19:15,960 --> 00:19:17,559
其实是比训练要高

569
00:19:17,920 --> 00:19:19,359
因为训练是在一个

570
00:19:19,359 --> 00:19:20,839
变得很奇怪的数据上

571
00:19:20,839 --> 00:19:22,079
做的测的精度

572
00:19:22,879 --> 00:19:24,920
OK测试我们是没有做增广

573
00:19:25,080 --> 00:19:27,200
所以大家也不用怀疑

574
00:19:27,200 --> 00:19:29,320
说为什么我的测试精度会高一些

575
00:19:29,320 --> 00:19:31,160
OK这是一个正常的现象

576
00:19:31,160 --> 00:19:32,160
但最后的最后

577
00:19:32,160 --> 00:19:33,080
通常来说

578
00:19:33,080 --> 00:19:34,440
你还是你的训练精度

579
00:19:34,440 --> 00:19:36,600
还是会慢慢的超过你的测试精度

580
00:19:36,960 --> 00:19:40,080
OK这就是图片增广

