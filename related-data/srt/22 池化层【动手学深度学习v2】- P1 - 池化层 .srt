1
00:00:00,000 --> 00:00:00,600
好

2
00:00:00,600 --> 00:00:02,200
我们先来讲

3
00:00:02,399 --> 00:00:03,399
实话层

4
00:00:06,200 --> 00:00:14,200
记得我们之前有同学提问过说卷积层的位置是怎么样保存信息的

5
00:00:14,200 --> 00:00:19,320
其实卷积层对位置是非常长的敏感

6
00:00:19,719 --> 00:00:21,839
比如说我们举一个例子

7
00:00:21,839 --> 00:00:25,560
我们举一个检测垂直边缘的例子

8
00:00:25,560 --> 00:00:30,040
我们在前面的代码里面也讲过这个例子

9
00:00:30,040 --> 00:00:32,280
我们把同一个例子拿过来

10
00:00:33,840 --> 00:00:35,640
首先我们来看到

11
00:00:35,640 --> 00:00:38,719
如果我们有两列的话

12
00:00:38,719 --> 00:00:40,359
我们这里有两列

13
00:00:40,359 --> 00:00:41,240
我来一个

14
00:00:41,240 --> 00:00:41,760
笔

15
00:00:45,359 --> 00:00:47,600
笔没电了

16
00:00:47,600 --> 00:00:50,400
我们等笔充一点点

17
00:00:50,400 --> 00:00:50,840
行

18
00:00:50,840 --> 00:00:51,880
那我就用鼠标先

19
00:00:52,600 --> 00:00:54,640
就是说我们先看这两列

20
00:00:54,640 --> 00:00:57,399
这里有个边缘

21
00:00:57,399 --> 00:01:02,200
我们知道如果我们用一个1乘2的卷积和

22
00:01:02,200 --> 00:01:04,519
然后一边是1一边是负1的话

23
00:01:04,519 --> 00:01:10,319
那么我们会在输出的第二列全部为1

24
00:01:11,039 --> 00:01:13,879
就是说我们把你的边缘检测出来了

25
00:01:15,079 --> 00:01:19,640
但是他这一列边上都是这边是0

26
00:01:20,079 --> 00:01:21,359
这边也是0

27
00:01:23,200 --> 00:01:23,480
对吧

28
00:01:23,480 --> 00:01:26,960
就是说他对位置是非常敏感的

29
00:01:27,240 --> 00:01:31,680
如果你的一个像素的偏移就会导致零输出

30
00:01:33,120 --> 00:01:35,880
所以我们有时候觉得说这个不是特别好的一件事情

31
00:01:36,200 --> 00:01:37,200
因为为什么

32
00:01:37,320 --> 00:01:41,520
是因为我这个边缘在真实图片中很有可能不是

33
00:01:41,520 --> 00:01:42,480
那么的好的

34
00:01:42,480 --> 00:01:43,560
就会是那么的好的

35
00:01:43,560 --> 00:01:44,520
掐在那个地方

36
00:01:44,760 --> 00:01:47,120
而且我随着我相机随便拍一个照

37
00:01:47,120 --> 00:01:48,280
我抖一抖对吧

38
00:01:48,280 --> 00:01:49,320
手移一移

39
00:01:49,359 --> 00:01:50,520
然后物体动一动

40
00:01:50,560 --> 00:01:53,040
所以它的边缘都会发生变化

41
00:01:53,920 --> 00:01:57,160
所以我们需要一定的平移的不变性

42
00:01:57,560 --> 00:02:00,359
就是说我的输出最好是你的物体有

43
00:02:00,359 --> 00:02:01,560
稍微的一点改动

44
00:02:01,560 --> 00:02:05,120
我的输出还是大概比如说在这个地方是1还是1

45
00:02:05,240 --> 00:02:07,000
就不会因为说你稍微动一动

46
00:02:07,000 --> 00:02:08,560
我1就变成0了

47
00:02:08,640 --> 00:02:13,680
就是说太剧烈的变化会导致我的整个位置太敏感

48
00:02:14,000 --> 00:02:16,199
因为在实际中你的照明

49
00:02:16,240 --> 00:02:17,599
你的物体的位置

50
00:02:17,640 --> 00:02:18,360
你的比例

51
00:02:18,480 --> 00:02:19,719
外观很多因素

52
00:02:19,719 --> 00:02:22,000
会导致你的图片发生变化

53
00:02:22,319 --> 00:02:23,919
就算是我拿一个物体

54
00:02:23,919 --> 00:02:25,439
拿一个相机在拍它

55
00:02:25,439 --> 00:02:26,840
也会有细微的区别

56
00:02:27,560 --> 00:02:32,680
所以卷积层的对位置的太敏感性

57
00:02:32,680 --> 00:02:34,520
它不是一个特别好的事情

58
00:02:35,800 --> 00:02:38,920
所以这就是为什么我们要有一个尺划层

59
00:02:38,920 --> 00:02:40,159
就叫做pooling layer

60
00:02:40,360 --> 00:02:42,560
我们来看一下它具体是怎么工作的

61
00:02:43,879 --> 00:02:48,599
首先我们看一个叫做奥维最大尺划层的一个

62
00:02:48,599 --> 00:02:49,080
东西

63
00:02:50,080 --> 00:02:52,680
它的工作原理跟之前的卷积有点像

64
00:02:52,960 --> 00:02:55,800
就是每一次我们有一个窗口

65
00:02:56,400 --> 00:02:59,920
来去滑动你整个输入

66
00:02:59,920 --> 00:03:01,680
比如说我们拍一个动画

67
00:03:01,920 --> 00:03:04,640
就看到说它这里有一个三层三的窗口

68
00:03:04,800 --> 00:03:06,480
不断的去滑我的输入

69
00:03:06,480 --> 00:03:07,520
得到我们的输出

70
00:03:07,720 --> 00:03:10,160
跟我们之前的卷积层是一样的

71
00:03:10,600 --> 00:03:11,800
但是这里的话

72
00:03:11,840 --> 00:03:14,360
它不是说我有一个和

73
00:03:14,360 --> 00:03:18,320
然后对和语输入做点击

74
00:03:18,319 --> 00:03:20,599
然后加起来就不是这样做了

75
00:03:21,599 --> 00:03:22,319
具体来说

76
00:03:22,319 --> 00:03:27,359
它是说每一次我把窗口里面的最大的

77
00:03:27,359 --> 00:03:28,639
那个值给你拿出来

78
00:03:29,120 --> 00:03:33,039
就是说这就是为什么叫做最大尺划层

79
00:03:33,879 --> 00:03:36,439
举个例子是说这里

80
00:03:37,039 --> 00:03:41,120
我们是一个二乘二的尺划窗口

81
00:03:41,519 --> 00:03:43,599
每一次我们看一个二乘二的窗口

82
00:03:43,759 --> 00:03:46,879
然后那么的我扫了这个二乘二的窗口的话

83
00:03:47,199 --> 00:03:48,519
那我们的输出在这个地方

84
00:03:48,840 --> 00:03:52,120
它这个四就是来自于这一块里面最大

85
00:03:52,120 --> 00:03:52,879
只是4

86
00:03:54,039 --> 00:03:54,639
同样的话

87
00:03:54,639 --> 00:03:56,359
如果滑到窗口的话

88
00:03:56,400 --> 00:03:57,680
那么它就会变成5了

89
00:03:57,680 --> 00:03:58,159
对不对

90
00:03:58,400 --> 00:03:59,680
然后在下面一个窗口的话

91
00:03:59,680 --> 00:04:00,560
那就是7

92
00:04:00,719 --> 00:04:02,319
最下一个窗口就是8

93
00:04:02,519 --> 00:04:07,879
所以这就是最大尺划层是如何工作的

94
00:04:08,240 --> 00:04:10,120
就是说简单来说

95
00:04:10,120 --> 00:04:11,359
就是跟卷积一样

96
00:04:11,359 --> 00:04:13,680
用滑动窗口来计算输出

97
00:04:13,759 --> 00:04:15,879
但是每一次我没有和这个东西

98
00:04:16,040 --> 00:04:18,839
我就是把窗口里最大的值给你输出来

99
00:04:19,120 --> 00:04:20,079
就结束了

100
00:04:22,639 --> 00:04:24,839
我们来看一下最大尺划层

101
00:04:24,839 --> 00:04:26,600
能不能解决前面的问题

102
00:04:28,600 --> 00:04:29,839
我们还是前面那个问题

103
00:04:30,199 --> 00:04:32,959
就我们要做垂直的边缘检测

104
00:04:34,079 --> 00:04:35,879
左边就是我的输入

105
00:04:36,040 --> 00:04:38,240
中间是我的卷积输出

106
00:04:38,800 --> 00:04:41,560
如果我在我的卷积输出上

107
00:04:41,560 --> 00:04:44,959
再作用一次二乘二最大尺划的话

108
00:04:45,120 --> 00:04:47,359
那么可以看到这个地方

109
00:04:48,079 --> 00:04:50,759
就是说这个值

110
00:04:51,159 --> 00:04:52,239
这个1来自于哪里

111
00:04:52,239 --> 00:04:54,639
来自于说你做二乘二窗口的时候

112
00:04:54,639 --> 00:04:55,319
这里有个1

113
00:04:56,159 --> 00:04:56,919
然后呢

114
00:04:57,079 --> 00:04:59,039
这个额外的1在什么地方

115
00:04:59,279 --> 00:05:03,759
来自于说我对他做的时候

116
00:05:03,959 --> 00:05:07,000
这个地方写错了

117
00:05:07,000 --> 00:05:08,479
这个地方就没有一个1了

118
00:05:08,599 --> 00:05:10,079
这个地方其实是没有

119
00:05:10,159 --> 00:05:11,479
都应该是零

120
00:05:11,759 --> 00:05:14,840
因为这个地方来自于他的

121
00:05:15,360 --> 00:05:16,640
那就是全铃

122
00:05:16,800 --> 00:05:17,879
我们写错一个地方了

123
00:05:19,080 --> 00:05:21,800
所以二乘二的最大尺划层

124
00:05:21,800 --> 00:05:25,759
就容忍一个像素的往左边偏移

125
00:05:26,080 --> 00:05:28,759
就是说如果你往这个地方

126
00:05:28,759 --> 00:05:30,439
往左边偏一点点的话

127
00:05:30,560 --> 00:05:32,480
那么你这个地方还是移

128
00:05:32,600 --> 00:05:34,520
如果你往右边偏一点点的话

129
00:05:34,560 --> 00:05:36,240
你同样的话这个地方还是移

130
00:05:36,400 --> 00:05:37,439
所以就是说

131
00:05:38,040 --> 00:05:39,879
最大尺划层

132
00:05:40,040 --> 00:05:46,079
可以允许你的输入发生一定小小的偏移

133
00:05:46,120 --> 00:05:48,199
而且你作用在卷积输出上

134
00:05:48,199 --> 00:05:50,680
使得你在基本上就是说

135
00:05:50,680 --> 00:05:52,759
把你的有一点模糊化的效果

136
00:05:52,959 --> 00:05:55,959
就是说在你的输出的值的附近

137
00:05:56,159 --> 00:05:57,399
他的一个小窗口里面

138
00:05:57,399 --> 00:05:58,720
使得他值都会出现

139
00:05:58,720 --> 00:06:01,399
这就是最大尺划层

140
00:06:03,720 --> 00:06:04,800
那么就是说

141
00:06:05,400 --> 00:06:08,000
尺划层它的其他超参数

142
00:06:08,000 --> 00:06:09,120
跟卷积很类似

143
00:06:09,680 --> 00:06:12,079
比如说它有填充和不浮

144
00:06:13,040 --> 00:06:16,520
比如说这个用的是填充为

145
00:06:16,680 --> 00:06:18,040
上下左右都是为1

146
00:06:18,240 --> 00:06:21,120
这种框架里面就是排领等于1

147
00:06:21,160 --> 00:06:23,720
但是你可以说你是上下填充都为2

148
00:06:23,720 --> 00:06:25,439
就是两行两列

149
00:06:26,400 --> 00:06:28,840
然后这里stride就是不浮是等于2

150
00:06:28,879 --> 00:06:30,280
就每一次上下左右

151
00:06:30,280 --> 00:06:32,960
我划都是划两行或者划两列

152
00:06:33,880 --> 00:06:37,880
所以它就是跟卷积类似的两个超参数

153
00:06:38,240 --> 00:06:40,120
就是填充和不浮

154
00:06:40,760 --> 00:06:42,280
但是它不一样的是说

155
00:06:42,320 --> 00:06:44,680
它没有可以学习的参数

156
00:06:45,200 --> 00:06:46,800
就是没有kernel

157
00:06:46,800 --> 00:06:47,840
没有k

158
00:06:47,880 --> 00:06:49,360
因为你不需要学任何东西

159
00:06:49,400 --> 00:06:51,800
它就是一个最大的计算子

160
00:06:53,640 --> 00:06:54,800
另外的是说

161
00:06:54,800 --> 00:06:57,560
它作用多输入通道的时候

162
00:06:57,560 --> 00:07:00,440
那就是说对每一个输入通道

163
00:07:00,719 --> 00:07:03,040
它都做一次齿划程

164
00:07:03,680 --> 00:07:05,759
得到它对应的输出通道

165
00:07:06,560 --> 00:07:07,560
就不像卷积一样

166
00:07:07,560 --> 00:07:09,079
你可以融合多个通道

167
00:07:09,120 --> 00:07:12,399
它这里是不会去融合多输入通道的

168
00:07:12,439 --> 00:07:14,680
它是每个通道做一次齿划程

169
00:07:15,639 --> 00:07:18,040
然后就意味着是说

170
00:07:18,040 --> 00:07:19,759
我的输出的通道数

171
00:07:19,759 --> 00:07:22,040
是等于我的输入的通道数的

172
00:07:22,959 --> 00:07:24,279
所以相对来说比较简单

173
00:07:24,639 --> 00:07:26,519
那我为什么不做多通道融合

174
00:07:26,519 --> 00:07:28,639
是因为多通道融合的事情

175
00:07:28,639 --> 00:07:30,040
我可以交给卷积来做

176
00:07:30,040 --> 00:07:31,879
我就不要用齿划程了

177
00:07:32,080 --> 00:07:33,319
我就可以把齿划程做了

178
00:07:33,319 --> 00:07:34,600
相对来说比较简单

179
00:07:35,080 --> 00:07:40,319
这就是跟卷积层的相似和不一样的地方

180
00:07:41,600 --> 00:07:44,760
然后我们讲的是最大齿划程

181
00:07:44,920 --> 00:07:46,439
就是max operator

182
00:07:46,720 --> 00:07:48,800
但是当然也可以有平均齿划程

183
00:07:48,800 --> 00:07:51,640
是另外一个常用的齿划程

184
00:07:51,960 --> 00:07:54,800
就是说你把最大的操作子

185
00:07:54,840 --> 00:07:55,960
变成一个平均

186
00:07:55,960 --> 00:07:59,240
就是点max变成一个点命

187
00:08:00,480 --> 00:08:02,879
所以最大齿划程就是说

188
00:08:02,920 --> 00:08:05,520
它输出的是每个窗口里面

189
00:08:05,520 --> 00:08:07,120
最强的信号

190
00:08:07,600 --> 00:08:10,840
就是我检测出来的一个特殊的点

191
00:08:10,840 --> 00:08:11,760
或者一个事件

192
00:08:11,760 --> 00:08:12,680
或者一个什么东西

193
00:08:12,920 --> 00:08:15,040
我就会在周围那一块像素

194
00:08:15,040 --> 00:08:17,960
都给你用同样强的信号给你拿出来

195
00:08:18,439 --> 00:08:19,520
比如说我们这张图

196
00:08:20,600 --> 00:08:22,920
就是表示我一个应该是一个鹦鹉

197
00:08:22,920 --> 00:08:23,800
还是一个什么东西

198
00:08:23,879 --> 00:08:24,439
一个鸟

199
00:08:24,920 --> 00:08:27,280
然后就是卷积之后

200
00:08:27,280 --> 00:08:28,920
然后可以看到最大齿划程

201
00:08:28,920 --> 00:08:31,080
就看到这个地方比较亮

202
00:08:31,199 --> 00:08:33,000
比较亮就是信号比较强

203
00:08:33,159 --> 00:08:36,080
所以可以看到它有比较明显的一些

204
00:08:36,120 --> 00:08:38,360
层次化的信息

205
00:08:39,440 --> 00:08:40,680
平均齿划程

206
00:08:40,680 --> 00:08:44,200
就是说把每一个齿划程里面的

207
00:08:44,200 --> 00:08:45,879
平均的信号强度

208
00:08:46,320 --> 00:08:47,920
就是一个人有一个有一点点

209
00:08:47,920 --> 00:08:51,080
那个把它抹平的成分

210
00:08:51,320 --> 00:08:53,360
所以你看到平均齿划程的

211
00:08:53,360 --> 00:08:55,320
它的信号强度就会弱很多

212
00:08:55,440 --> 00:08:57,639
但是它有一个比较柔和化的效果

213
00:08:58,399 --> 00:09:00,199
所以就是不会那么的抖动

214
00:09:00,199 --> 00:09:01,360
比较区别

215
00:09:01,600 --> 00:09:03,919
所以这是直观上来讲

216
00:09:03,919 --> 00:09:06,000
这两种齿划程的区别

217
00:09:06,279 --> 00:09:08,159
最大齿划程和平均齿划程

218
00:09:08,159 --> 00:09:11,519
都是非常常用的一个操作

219
00:09:13,279 --> 00:09:15,879
然后我们就总结一下

220
00:09:18,000 --> 00:09:20,279
齿划程的

221
00:09:21,639 --> 00:09:23,279
就是说你要两种操作

222
00:09:23,279 --> 00:09:26,559
一个是你返回我的窗口里面的最大值

223
00:09:27,360 --> 00:09:28,760
就最大齿划程

224
00:09:29,120 --> 00:09:32,040
或者返回我窗口里面的平均齿

225
00:09:32,360 --> 00:09:34,440
叫做平均齿划程

226
00:09:35,120 --> 00:09:38,200
它的主要作用是用来缓解卷积层

227
00:09:38,200 --> 00:09:39,720
对位置的敏感性

228
00:09:41,240 --> 00:09:43,840
就是说通常齿划程是作用在卷积层的

229
00:09:43,840 --> 00:09:44,400
之后

230
00:09:45,160 --> 00:09:46,320
它跟卷积层一样

231
00:09:46,320 --> 00:09:48,520
它有窗口的大小

232
00:09:48,720 --> 00:09:51,320
填充padding和不符就stripe

233
00:09:51,320 --> 00:09:53,360
这三个超参数

234
00:09:54,000 --> 00:09:55,480
但跟卷积层不一样的是说

235
00:09:55,480 --> 00:09:58,240
它对每个通道就是分别作用

236
00:09:58,440 --> 00:09:59,399
直接输出

237
00:09:59,399 --> 00:10:03,759
就没有一个输出通道数超参数了

238
00:10:03,759 --> 00:10:05,800
那就是输入通道数

239
00:10:05,800 --> 00:10:07,200
一定等于输出通道数

240
00:10:07,440 --> 00:10:10,159
最后它是没有可以学的参数

241
00:10:10,159 --> 00:10:14,879
所以齿划程是不会给你把模型变大

242
00:10:15,560 --> 00:10:16,200
OK

243
00:10:16,279 --> 00:10:18,159
这就是齿划程

244
00:10:18,159 --> 00:10:20,000
这一个层的定义

