1
00:00:00,000 --> 00:00:03,000
就实现也没有特别好讲的

2
00:00:03,000 --> 00:00:07,320
就说你就按着那个图敲代码

3
00:00:07,320 --> 00:00:10,880
所以GoogleNet的实现是相对来说是比较复杂的

4
00:00:10,880 --> 00:00:12,240
给大家看一下

5
00:00:12,240 --> 00:00:14,359
首先你要实现一个Septum block

6
00:00:14,359 --> 00:00:17,280
这个呢我们决定了一个类

7
00:00:17,280 --> 00:00:18,400
一个自定义的类

8
00:00:18,400 --> 00:00:20,519
就是继承的module

9
00:00:20,519 --> 00:00:22,839
那你要知道我的输入的通道是什么样子

10
00:00:22,839 --> 00:00:28,080
然后就说你得设置每一条Path里面的Channel数

11
00:00:28,800 --> 00:00:30,080
就C1 C2 C3 C4

12
00:00:30,080 --> 00:00:31,720
就是对应的是你那个

13
00:00:31,720 --> 00:00:34,320
第一个Path里面它的通道数

14
00:00:34,320 --> 00:00:35,719
C就是一个数了

15
00:00:35,719 --> 00:00:36,920
就这些第一条Path

16
00:00:36,920 --> 00:00:37,960
就P1

17
00:00:38,600 --> 00:00:39,560
就是一个数

18
00:00:39,560 --> 00:00:42,079
但你C2不需要两个卷集层吗

19
00:00:42,079 --> 00:00:45,480
然后就P2就是Path2

20
00:00:45,480 --> 00:00:47,280
那个第一个layer就是一个

21
00:00:47,280 --> 00:00:49,320
你的kernel是等于1对吧

22
00:00:49,320 --> 00:00:49,880
记得吧

23
00:00:49,880 --> 00:00:52,439
然后你用的通道数在这个C2里面指定

24
00:00:52,439 --> 00:00:54,320
接下来你还有一个

25
00:00:54,320 --> 00:00:55,880
后面还有个33

26
00:00:56,039 --> 00:00:56,920
Path等于1

27
00:00:56,920 --> 00:00:59,440
所以我就不给大家转过去了

28
00:00:59,440 --> 00:01:00,679
然后你就是

29
00:01:00,679 --> 00:01:04,240
你输入就是你前面的1乘以的输出的通道

30
00:01:04,240 --> 00:01:05,760
然后后面就是你自己的

31
00:01:05,760 --> 00:01:07,159
就是你C2这个

32
00:01:07,159 --> 00:01:09,280
这个argument就是一个tuple

33
00:01:09,280 --> 00:01:11,799
就是有两个整数在里面

34
00:01:12,240 --> 00:01:13,079
同样道理

35
00:01:13,079 --> 00:01:14,120
你有P3有两个层

36
00:01:14,120 --> 00:01:16,159
P4首先是个max pooling

37
00:01:16,159 --> 00:01:17,520
然后再有一个conv2d

38
00:01:17,520 --> 00:01:19,879
基本上就照着它抄

39
00:01:19,879 --> 00:01:22,400
那么你的for的函数呢

40
00:01:22,400 --> 00:01:24,079
你的for的函数是说

41
00:01:24,200 --> 00:01:25,399
next过来

42
00:01:25,760 --> 00:01:28,079
首先我们丢到第一个Path里面

43
00:01:28,400 --> 00:01:29,159
加个relu

44
00:01:29,159 --> 00:01:31,719
得到我的Path1的输出

45
00:01:32,280 --> 00:01:32,759
然后呢

46
00:01:32,759 --> 00:01:34,039
接下来就是说第二条

47
00:01:34,239 --> 00:01:36,120
第二条就是说你放到第一个层

48
00:01:36,280 --> 00:01:37,200
加个relu

49
00:01:37,480 --> 00:01:38,719
放到第二个层

50
00:01:38,879 --> 00:01:39,679
再加个relu

51
00:01:39,679 --> 00:01:41,000
就得到我第二个Path的输出

52
00:01:41,000 --> 00:01:41,439
对吧

53
00:01:41,719 --> 00:01:43,400
第三个第四个是一样的

54
00:01:45,120 --> 00:01:46,079
然后

55
00:01:47,280 --> 00:01:48,680
接下来就是说

56
00:01:48,680 --> 00:01:49,519
你return的时候

57
00:01:49,519 --> 00:01:51,159
就是说你要把整个Path

58
00:01:51,159 --> 00:01:52,200
整个那四条路

59
00:01:52,280 --> 00:01:54,039
在dimension等于那个1

60
00:01:54,200 --> 00:01:55,480
也就是说通道数是1

61
00:01:55,920 --> 00:01:57,000
因为P3大于2

62
00:01:57,000 --> 00:01:58,759
通道数那个dimension是1

63
00:01:58,799 --> 00:02:01,359
所以在输出通道数

64
00:02:01,359 --> 00:02:02,239
那个维度上

65
00:02:02,239 --> 00:02:04,319
把这四个东西给你conv2d起来

66
00:02:04,759 --> 00:02:05,120
OK

67
00:02:05,120 --> 00:02:07,359
这就是你个exception block的定义

68
00:02:10,639 --> 00:02:11,719
那么接下来就是说

69
00:02:11,719 --> 00:02:13,719
你去实现每一个stage

70
00:02:14,319 --> 00:02:15,240
每一个stage

71
00:02:15,240 --> 00:02:16,400
就是说我们就这么实现

72
00:02:16,400 --> 00:02:17,159
就是说

73
00:02:17,159 --> 00:02:18,240
你用每个stage

74
00:02:18,240 --> 00:02:19,520
用一个sequential的module

75
00:02:19,520 --> 00:02:20,840
这之后你好看一点

76
00:02:20,840 --> 00:02:21,919
对着抄

77
00:02:22,079 --> 00:02:23,479
没有太多本质区别

78
00:02:23,599 --> 00:02:25,039
那么第一个stage

79
00:02:25,039 --> 00:02:26,359
记得就是一个卷积

80
00:02:26,359 --> 00:02:27,439
加一个max pooling

81
00:02:27,639 --> 00:02:29,519
第二个就是两个卷积

82
00:02:29,759 --> 00:02:31,599
一个可能一乘一卷积

83
00:02:31,599 --> 00:02:32,679
一个三乘三卷积

84
00:02:32,679 --> 00:02:33,919
再加一个max pooling

85
00:02:34,319 --> 00:02:35,120
那么第三个

86
00:02:35,719 --> 00:02:37,959
第三个就是两个exception block

87
00:02:38,319 --> 00:02:39,519
然后你就是你的

88
00:02:39,519 --> 00:02:40,280
所有的通道数

89
00:02:40,280 --> 00:02:41,199
都写在这个地方

90
00:02:41,759 --> 00:02:44,079
就是说我就不给大家仔细讲了

91
00:02:44,280 --> 00:02:45,439
因为大家可以去看一下

92
00:02:45,439 --> 00:02:46,039
就是说

93
00:02:46,239 --> 00:02:48,120
就是你stage4

94
00:02:48,239 --> 00:02:50,519
就是你有5个exception block

95
00:02:50,639 --> 00:02:51,759
而每一个里面通道数

96
00:02:51,759 --> 00:02:52,199
你可以看

97
00:02:52,200 --> 00:02:53,120
基本上长不一样

98
00:02:53,120 --> 00:02:53,560
对吧

99
00:02:54,000 --> 00:02:55,160
你都不知道什么回事

100
00:02:55,160 --> 00:02:55,560
对吧

101
00:02:55,920 --> 00:02:57,760
我480变成512

102
00:02:57,760 --> 00:02:59,000
512变成528

103
00:02:59,280 --> 00:03:00,600
这数字都不知道怎么来的

104
00:03:00,720 --> 00:03:01,720
这数字其实

105
00:03:01,720 --> 00:03:03,320
其实后面那些东西加起来的

106
00:03:03,320 --> 00:03:03,560
对吧

107
00:03:03,560 --> 00:03:04,240
就是说

108
00:03:04,760 --> 00:03:05,400
你看到

109
00:03:06,440 --> 00:03:07,960
192 160

110
00:03:07,960 --> 00:03:09,000
128 12

111
00:03:09,000 --> 00:03:10,920
然后啪又会变成56了

112
00:03:12,000 --> 00:03:14,640
然后基本上就是在里面

113
00:03:16,080 --> 00:03:18,680
符合某一个大致分布的那么调

114
00:03:19,800 --> 00:03:21,000
那么stage5

115
00:03:21,000 --> 00:03:21,879
一样的

116
00:03:22,000 --> 00:03:23,360
就是两个exception block

117
00:03:23,879 --> 00:03:25,759
然后最后你的通道数

118
00:03:25,759 --> 00:03:26,680
就等于1.24

119
00:03:26,680 --> 00:03:28,840
最后你通过一个global average pooling

120
00:03:29,120 --> 00:03:30,520
再加一个flatten layer

121
00:03:31,599 --> 00:03:32,840
最后加一个linear layer

122
00:03:32,840 --> 00:03:34,759
就是你的dense layer

123
00:03:34,759 --> 00:03:35,680
就是一个

124
00:03:36,520 --> 00:03:37,000
这个东西

125
00:03:37,240 --> 00:03:38,599
从1.24变成10

126
00:03:38,759 --> 00:03:39,319
这个地方

127
00:03:39,680 --> 00:03:40,400
因为

128
00:03:40,840 --> 00:03:43,479
这是因为我的输出类别是10

129
00:03:43,479 --> 00:03:46,680
我的最后你exception block

130
00:03:46,680 --> 00:03:47,639
是1.24个维度

131
00:03:47,639 --> 00:03:48,759
所以最后是

132
00:03:49,079 --> 00:03:51,359
跟之前是一样的

133
00:03:52,079 --> 00:03:52,599
OK

134
00:03:53,319 --> 00:03:55,319
所以这个就是你整个的

135
00:03:57,079 --> 00:03:58,239
Google net的实现

136
00:03:58,239 --> 00:04:00,799
就是说比之前你看到麻烦多了

137
00:04:01,120 --> 00:04:02,959
就一堆参数在里面

138
00:04:03,959 --> 00:04:05,039
但是好处是说

139
00:04:05,039 --> 00:04:05,799
虽然你麻烦

140
00:04:05,959 --> 00:04:06,519
麻烦你

141
00:04:06,519 --> 00:04:07,599
但是你

142
00:04:08,359 --> 00:04:09,199
就是说

143
00:04:09,599 --> 00:04:11,319
结构上还是比较简单的

144
00:04:11,319 --> 00:04:12,919
结构上你可以看到是

145
00:04:13,919 --> 00:04:15,359
每个stage

146
00:04:15,399 --> 00:04:16,839
基本上就是说

147
00:04:17,000 --> 00:04:17,920
首先从

148
00:04:19,360 --> 00:04:20,600
我觉得用的比较小

149
00:04:20,920 --> 00:04:21,560
我们

150
00:04:22,000 --> 00:04:23,400
我们因为为什么

151
00:04:23,400 --> 00:04:25,480
是因为Google那台是比较贵的

152
00:04:25,480 --> 00:04:26,080
在这个地方

153
00:04:26,080 --> 00:04:27,840
我想在一两分钟跑完的话

154
00:04:27,840 --> 00:04:28,280
我就把

155
00:04:31,000 --> 00:04:33,200
把2.24降到了96

156
00:04:33,200 --> 00:04:35,080
就是我的输入就改到了96

157
00:04:35,080 --> 00:04:36,280
就训练快一点

158
00:04:36,280 --> 00:04:37,320
VGG我们也这么改

159
00:04:38,680 --> 00:04:39,360
看到是说

160
00:04:39,360 --> 00:04:40,400
首先你的

161
00:04:40,960 --> 00:04:42,640
第一个stage就变成出了4了

162
00:04:42,640 --> 00:04:43,040
对吧

163
00:04:44,200 --> 00:04:45,720
然后你就是在

164
00:04:45,720 --> 00:04:47,480
就是说每个stage基本就除半了

165
00:04:47,480 --> 00:04:48,280
除半

166
00:04:48,280 --> 00:04:49,320
最后的最后就是

167
00:04:49,360 --> 00:04:50,840
你不管是334的4

168
00:04:50,840 --> 00:04:51,560
还是77

169
00:04:51,560 --> 00:04:52,240
最后就变成了

170
00:04:52,240 --> 00:04:52,520
1

171
00:04:52,520 --> 00:04:53,760
就变成1.24

172
00:04:53,880 --> 00:04:54,680
然后就回去了

173
00:04:54,680 --> 00:04:56,080
就等到我的linear layer

174
00:04:56,080 --> 00:04:57,000
就是到10了

175
00:04:57,280 --> 00:04:58,280
所以这个就是

176
00:04:58,960 --> 00:05:01,800
虽然你的inception快里面的

177
00:05:01,920 --> 00:05:03,080
东西比较复杂

178
00:05:03,080 --> 00:05:04,240
但实际上整体来看

179
00:05:04,240 --> 00:05:06,360
就就是一个很简单的5个stage

180
00:05:06,760 --> 00:05:08,000
就这个设计思想

181
00:05:08,000 --> 00:05:09,760
在之后基本上所有的

182
00:05:09,920 --> 00:05:11,080
不管是rest net也好

183
00:05:11,080 --> 00:05:12,320
基本上是用这个思路

184
00:05:13,040 --> 00:05:14,360
就我每个stage里面

185
00:05:14,360 --> 00:05:15,560
可以换的不一样

186
00:05:15,560 --> 00:05:16,680
但实际上每个stage

187
00:05:16,680 --> 00:05:17,600
它的shape的变化

188
00:05:17,600 --> 00:05:18,280
基本上这样

189
00:05:18,759 --> 00:05:19,920
就前面就第一个stage

190
00:05:19,920 --> 00:05:20,480
这样快的

191
00:05:20,480 --> 00:05:21,920
后面就是减半

192
00:05:21,920 --> 00:05:24,000
通道数增到最后1.24

193
00:05:24,000 --> 00:05:24,600
差不多

194
00:05:24,839 --> 00:05:28,439
因为你的image net是1000类

195
00:05:28,639 --> 00:05:29,560
所以你的通道数

196
00:05:29,560 --> 00:05:31,720
最后大概差不多是1.24

197
00:05:31,720 --> 00:05:33,399
这个规模的样子

198
00:05:34,160 --> 00:05:34,519
OK

199
00:05:34,519 --> 00:05:35,639
所以这个就是

200
00:05:35,800 --> 00:05:37,800
我们的google net

201
00:05:37,920 --> 00:05:39,000
最后我们训练

202
00:05:39,199 --> 00:05:40,480
训练跟之前是一样

203
00:05:40,680 --> 00:05:41,879
参数都是一模一样

204
00:05:41,879 --> 00:05:43,720
就是0.1的学习率

205
00:05:44,000 --> 00:05:44,879
跑10遍

206
00:05:45,159 --> 00:05:46,279
百分之三十一百五十八

207
00:05:47,040 --> 00:05:48,199
可以看到是说

208
00:05:48,920 --> 00:05:51,240
这里我们的精度到了

209
00:05:51,800 --> 00:05:53,040
0.89

210
00:05:53,959 --> 00:05:55,000
就0.90了

211
00:05:55,000 --> 00:05:55,759
基本上是

212
00:05:56,240 --> 00:05:58,120
所以精度还是不错的

213
00:05:58,120 --> 00:06:01,800
跟之前的VGG和AlexNet比

214
00:06:02,560 --> 00:06:04,319
我们因为我们把高宽

215
00:06:04,319 --> 00:06:06,079
从224降到了96

216
00:06:06,079 --> 00:06:07,959
所以我们的性能也还行

217
00:06:08,399 --> 00:06:10,839
就是3200个亚姆帕赛格

218
00:06:11,800 --> 00:06:15,280
所以这就是我们google net的实现

219
00:06:15,640 --> 00:06:18,360
所以虽然代码比较长一点

220
00:06:18,520 --> 00:06:20,040
逻辑上还是比较简单的

221
00:06:20,040 --> 00:06:22,040
你就是照着两个图

222
00:06:22,920 --> 00:06:24,760
抄一下

223
00:06:24,760 --> 00:06:28,920
然后在选那些通道数的时候

224
00:06:28,920 --> 00:06:30,360
你就照着他的论文写

225
00:06:30,360 --> 00:06:31,760
把通道数给写进去

226
00:06:32,000 --> 00:06:34,520
然后整个网络架构还是比较容易

227
00:06:35,040 --> 00:06:36,320
就是说你就是5层的

228
00:06:36,600 --> 00:06:38,080
最后来看就是说

229
00:06:38,079 --> 00:06:41,680
当然是比AlexNet贵很多了

230
00:06:41,680 --> 00:06:44,519
因为我们已经把输入降到了96成96了

231
00:06:44,519 --> 00:06:46,000
而不是224和224

232
00:06:46,000 --> 00:06:48,120
就降了三倍

233
00:06:48,279 --> 00:06:50,759
就等于是我的计算量已经降了10倍了

234
00:06:50,759 --> 00:06:51,839
就三降了9倍

235
00:06:52,240 --> 00:06:54,519
我还是性能跟AlexNet差不多

236
00:06:54,639 --> 00:06:57,039
就是google net比AlexNet贵9倍

237
00:06:57,560 --> 00:06:58,599
基本上是这个样子

238
00:06:59,079 --> 00:07:00,519
但是精度还不错

239
00:07:00,519 --> 00:07:02,439
就是到几乎到0.90了

240
00:07:02,639 --> 00:07:04,479
比我们之前会好了很多

241
00:07:05,480 --> 00:07:06,160
OK

242
00:07:06,160 --> 00:07:09,040
这就是GoogleNet的思想

