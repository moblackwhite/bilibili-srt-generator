1
00:00:00,000 --> 00:00:02,960
就是说我们怎么样去

2
00:00:02,960 --> 00:00:04,919
比如说把Wikipedia下载下来之后

3
00:00:05,280 --> 00:00:07,960
怎么样把它变成我们可以用来训练

4
00:00:07,960 --> 00:00:10,279
BERT的一个数据机

5
00:00:13,280 --> 00:00:14,040
好 我们这个地方

6
00:00:14,240 --> 00:00:17,719
就是我这个就给大家快速的过一遍

7
00:00:17,800 --> 00:00:18,960
因为里面很多细节

8
00:00:18,960 --> 00:00:19,920
就我给大家讲一下

9
00:00:19,920 --> 00:00:21,199
大概是干嘛就行了

10
00:00:21,440 --> 00:00:24,160
因为这一块就是NLP的数据

11
00:00:24,160 --> 00:00:24,519
一处理

12
00:00:24,640 --> 00:00:28,640
就是通常来说比图片要麻烦那么一点点

13
00:00:28,960 --> 00:00:30,240
因为对字符串处理

14
00:00:30,359 --> 00:00:32,320
确实对比那些图片

15
00:00:32,320 --> 00:00:34,759
图片给认为就是已经是一个矩阵了

16
00:00:35,200 --> 00:00:36,439
做起来却麻烦一些

17
00:00:37,000 --> 00:00:38,120
我们这里用的是一个叫

18
00:00:38,120 --> 00:00:40,399
Wikitext2的一个Data set

19
00:00:40,679 --> 00:00:42,200
你可以认为是一个很小的

20
00:00:42,200 --> 00:00:44,000
一个Wikipedia的数据

21
00:00:44,200 --> 00:00:45,039
也不算小

22
00:00:45,200 --> 00:00:46,079
也挺大的

23
00:00:46,079 --> 00:00:47,240
也几百兆好像

24
00:00:47,799 --> 00:00:49,840
所以我们用一用够了

25
00:00:50,040 --> 00:00:52,920
但是大家如果真要做BERT的话

26
00:00:52,920 --> 00:00:54,760
当然这个数据机是不太够的

27
00:00:54,960 --> 00:00:56,560
我们主要是给大家demo一下

28
00:00:57,280 --> 00:00:57,840
好 这个很简单

29
00:00:57,840 --> 00:00:59,160
就是说下载下来

30
00:00:59,160 --> 00:01:00,200
然后把它load进来

31
00:01:02,200 --> 00:01:02,640
好

32
00:01:03,440 --> 00:01:04,840
另外一个这个函数是干嘛的

33
00:01:04,840 --> 00:01:05,799
这个函数就是说

34
00:01:05,840 --> 00:01:07,200
我给你一个sentence

35
00:01:07,359 --> 00:01:08,920
和他下一个sentence

36
00:01:09,280 --> 00:01:10,719
和这个是说paragraph

37
00:01:10,719 --> 00:01:12,719
就是那整个那一段话

38
00:01:13,240 --> 00:01:15,800
就有50%的概率说

39
00:01:15,800 --> 00:01:16,600
我告诉你

40
00:01:16,600 --> 00:01:19,240
我就把它输出回去

41
00:01:19,240 --> 00:01:20,159
就是说做成一个

42
00:01:20,159 --> 00:01:21,840
真的是一个相邻的句子

43
00:01:22,159 --> 00:01:23,280
有50%概率

44
00:01:23,439 --> 00:01:25,960
就是我就把next sentence丢掉

45
00:01:26,000 --> 00:01:28,400
就随机在我的paragraph里面

46
00:01:28,400 --> 00:01:31,600
随机抽样一个句子出来

47
00:01:31,640 --> 00:01:32,680
告诉你说

48
00:01:33,240 --> 00:01:34,320
其实这个不是

49
00:01:34,320 --> 00:01:35,400
它不是相邻的

50
00:01:35,560 --> 00:01:37,280
这样子就说给我准备了

51
00:01:37,280 --> 00:01:37,840
我的

52
00:01:38,200 --> 00:01:41,040
怎么样做我下一个句子预测的东西

53
00:01:41,760 --> 00:01:42,680
这种东西就不给大家看了

54
00:01:42,680 --> 00:01:43,120
就说白了

55
00:01:43,120 --> 00:01:45,480
就是对于你的每个paragraph

56
00:01:47,080 --> 00:01:50,400
然后把整个一段话里面的

57
00:01:50,400 --> 00:01:51,080
第二个句子

58
00:01:51,080 --> 00:01:52,480
第二加一个句子

59
00:01:52,520 --> 00:01:53,600
和整个paragraph

60
00:01:54,040 --> 00:01:55,040
丢到这个函数里面

61
00:01:55,040 --> 00:01:57,600
生成一个token A和token B

62
00:01:58,000 --> 00:01:59,080
这个token A和token B

63
00:01:59,080 --> 00:02:01,120
就是等会我们会去

64
00:02:01,120 --> 00:02:03,719
放进Bert里面的token A和token B

65
00:02:04,480 --> 00:02:05,719
这个东西就是它的label

66
00:02:05,719 --> 00:02:07,080
是不是他们两个

67
00:02:07,080 --> 00:02:08,240
是不是相邻的

68
00:02:08,680 --> 00:02:10,800
Ok这个就函数就干这个事情

69
00:02:11,960 --> 00:02:13,240
另外一个是说

70
00:02:13,920 --> 00:02:16,719
要把我们做完token抽出来之后

71
00:02:17,120 --> 00:02:18,680
接下来我们把里面那些东西

72
00:02:18,840 --> 00:02:21,960
随机换成一些mask

73
00:02:23,400 --> 00:02:24,680
基本上就是说

74
00:02:25,239 --> 00:02:25,679
在干嘛

75
00:02:25,840 --> 00:02:27,519
就是说我就是

76
00:02:27,919 --> 00:02:28,400
说白了

77
00:02:28,400 --> 00:02:30,159
就是那些position弄出来之后

78
00:02:30,159 --> 00:02:31,400
我就随机shuffle一下

79
00:02:31,639 --> 00:02:32,519
就随机一下

80
00:02:32,519 --> 00:02:34,399
然后把前面的15%留下来

81
00:02:35,039 --> 00:02:35,959
然后就说这个东西

82
00:02:35,959 --> 00:02:37,159
就是一直在干这个事情

83
00:02:37,159 --> 00:02:37,759
就是说

84
00:02:38,560 --> 00:02:40,879
如果你拿出来的

85
00:02:41,239 --> 00:02:43,000
拿出来的position

86
00:02:43,120 --> 00:02:44,359
就是预测的那些position

87
00:02:44,359 --> 00:02:44,840
不够的话

88
00:02:44,840 --> 00:02:45,840
就一直往下走

89
00:02:46,719 --> 00:02:49,639
就是说如果你是80%概率

90
00:02:49,639 --> 00:02:51,199
我们把那个mask token

91
00:02:51,359 --> 00:02:53,120
变成这个spatial的mask

92
00:02:54,120 --> 00:02:56,039
剩下的里面有50%概率

93
00:02:56,200 --> 00:02:59,400
就变成了token自己的本身

94
00:03:00,080 --> 00:03:01,480
还有50%概率

95
00:03:01,480 --> 00:03:03,039
就是整体的10%概率

96
00:03:03,120 --> 00:03:05,360
就是随机在vocab里面

97
00:03:05,360 --> 00:03:06,640
采样一个token出来

98
00:03:07,280 --> 00:03:07,840
Ok

99
00:03:08,039 --> 00:03:08,800
所以这样子的话

100
00:03:08,800 --> 00:03:09,599
我就可以把

101
00:03:10,080 --> 00:03:12,040
然后把那些position的token

102
00:03:12,200 --> 00:03:13,640
都变成mask token

103
00:03:13,879 --> 00:03:15,400
这个地方换点mask

104
00:03:15,439 --> 00:03:17,360
以及说那些位置

105
00:03:17,360 --> 00:03:18,439
也给它留下来

106
00:03:18,680 --> 00:03:19,439
你必须要留下来

107
00:03:19,439 --> 00:03:20,840
是因为你不是

108
00:03:20,840 --> 00:03:22,640
你有20%的那些token

109
00:03:22,760 --> 00:03:24,000
不是坏成mask

110
00:03:24,040 --> 00:03:25,800
所以你如果没存下来的话

111
00:03:25,960 --> 00:03:27,440
我之后是不知道的

112
00:03:27,440 --> 00:03:28,000
对吧

113
00:03:28,640 --> 00:03:28,960
OK

114
00:03:28,960 --> 00:03:29,520
下面这个函数

115
00:03:29,520 --> 00:03:29,840
就是说

116
00:03:29,840 --> 00:03:31,120
基本上就把整个

117
00:03:31,720 --> 00:03:33,200
断整个东西过一遍

118
00:03:33,360 --> 00:03:34,200
就把所有东西

119
00:03:34,200 --> 00:03:35,840
给你生成出来就完事了

120
00:03:36,240 --> 00:03:36,840
Ok

121
00:03:38,880 --> 00:03:39,680
另外一个函数

122
00:03:39,680 --> 00:03:41,080
我也不给大家讲了

123
00:03:41,080 --> 00:03:41,920
就是说

124
00:03:41,960 --> 00:03:43,880
你现在的每个句子

125
00:03:44,080 --> 00:03:45,640
它拼完之后

126
00:03:45,800 --> 00:03:47,440
它长度还不行

127
00:03:47,640 --> 00:03:48,040
就是说

128
00:03:48,040 --> 00:03:50,240
你如果我说最大长度是

129
00:03:50,880 --> 00:03:52,440
1000的话

130
00:03:52,439 --> 00:03:53,840
我说100的话

131
00:03:53,960 --> 00:03:55,359
那么我在后面拼的

132
00:03:55,359 --> 00:03:56,520
如果我的两个句子

133
00:03:56,520 --> 00:03:57,520
长度不够的话

134
00:03:57,560 --> 00:03:58,280
那么我在后面

135
00:03:58,280 --> 00:03:59,560
可能会拼一些

136
00:04:00,520 --> 00:04:01,759
special东西进去

137
00:04:01,759 --> 00:04:02,800
这样子做piling

138
00:04:03,079 --> 00:04:04,000
当然是说

139
00:04:04,000 --> 00:04:05,560
我会把它具体的句子

140
00:04:05,560 --> 00:04:07,159
反成一个valid length回来

141
00:04:08,439 --> 00:04:09,039
然后这里面

142
00:04:09,039 --> 00:04:11,120
基本上就是把所有的东西

143
00:04:12,039 --> 00:04:12,719
基本上数据

144
00:04:12,719 --> 00:04:13,560
所有东西在里面的

145
00:04:13,759 --> 00:04:14,639
那些token id

146
00:04:14,919 --> 00:04:16,120
那些weight

147
00:04:16,439 --> 00:04:16,720
就是说

148
00:04:16,720 --> 00:04:18,040
如果你是拼了的话

149
00:04:18,040 --> 00:04:19,600
所以你language的weight

150
00:04:19,600 --> 00:04:20,600
就会变成0

151
00:04:21,520 --> 00:04:23,439
如果你它是等于1的话

152
00:04:23,439 --> 00:04:23,840
就是说

153
00:04:23,840 --> 00:04:25,439
它是合法的两个句子

154
00:04:25,480 --> 00:04:26,600
不然的话就是0

155
00:04:28,840 --> 00:04:29,520
Ok

156
00:04:30,040 --> 00:04:30,600
所以

157
00:04:31,240 --> 00:04:31,800
这个就是

158
00:04:31,840 --> 00:04:33,560
基本上就把所有的东西

159
00:04:33,560 --> 00:04:34,320
放在这里面

160
00:04:34,480 --> 00:04:35,520
把刚刚那些函数

161
00:04:35,520 --> 00:04:36,439
全部放在这里面

162
00:04:36,439 --> 00:04:37,080
就是

163
00:04:37,360 --> 00:04:39,000
Wiki text dataset

164
00:04:39,360 --> 00:04:40,120
就是

165
00:04:40,160 --> 00:04:41,760
基本上就是一步一步走下来

166
00:04:41,920 --> 00:04:42,200
就是说

167
00:04:42,200 --> 00:04:43,960
我就不给大家直接讲了

168
00:04:43,960 --> 00:04:45,840
就是你这个句子tokenize

169
00:04:45,879 --> 00:04:47,160
用word tokenize

170
00:04:47,160 --> 00:04:47,960
就每个paragraph

171
00:04:47,960 --> 00:04:48,960
tokenize之后

172
00:04:48,959 --> 00:04:50,680
然后把句子抽出来

173
00:04:50,879 --> 00:04:52,120
丢到vocab里面

174
00:04:52,120 --> 00:04:53,359
这就是我们的那些

175
00:04:53,359 --> 00:04:54,279
special的vocab

176
00:04:54,879 --> 00:04:56,039
然后丢到vocab里面

177
00:04:56,279 --> 00:04:57,319
基本上就是

178
00:04:57,359 --> 00:04:58,239
对每个句子

179
00:04:58,399 --> 00:05:00,599
生成那些language

180
00:05:00,599 --> 00:05:02,079
就mask language要的东西

181
00:05:02,439 --> 00:05:04,479
以及生成那些next的东西

182
00:05:04,639 --> 00:05:06,319
然后基本上就返回东西

183
00:05:06,799 --> 00:05:07,439
最后看一下

184
00:05:07,439 --> 00:05:08,120
就是说

185
00:05:08,159 --> 00:05:08,959
整个

186
00:05:08,959 --> 00:05:09,879
当然你整个东西

187
00:05:09,879 --> 00:05:11,159
漏的放在函数里面

188
00:05:11,159 --> 00:05:11,719
最后看一下

189
00:05:11,719 --> 00:05:12,079
就是说

190
00:05:12,079 --> 00:05:13,639
你这个东西长什么样子

191
00:05:13,759 --> 00:05:15,279
就读出来是什么东西

192
00:05:15,599 --> 00:05:16,639
这个是比较重要的

193
00:05:17,639 --> 00:05:19,319
就假设我们构造出来之后

194
00:05:19,560 --> 00:05:21,159
train iterator出来之后

195
00:05:21,399 --> 00:05:22,319
我们拿出来什么东西

196
00:05:22,639 --> 00:05:23,879
我们拿出来挺多东西的

197
00:05:24,919 --> 00:05:26,000
token x

198
00:05:26,000 --> 00:05:27,199
就是那些

199
00:05:27,639 --> 00:05:28,360
所有的token

200
00:05:28,560 --> 00:05:29,199
首先看一下

201
00:05:29,199 --> 00:05:29,839
batch size

202
00:05:29,839 --> 00:05:31,399
如果是512的话

203
00:05:32,039 --> 00:05:34,319
就是max length是64的话

204
00:05:34,319 --> 00:05:35,839
最大长度64的话

205
00:05:36,079 --> 00:05:38,199
token首先是一个多少

206
00:05:38,800 --> 00:05:40,639
是一个512x64的东西

207
00:05:40,639 --> 00:05:41,159
对吧

208
00:05:42,079 --> 00:05:43,800
就是每一个

209
00:05:43,959 --> 00:05:44,919
样本的长度

210
00:05:44,919 --> 00:05:46,079
最长是64

211
00:05:46,639 --> 00:05:48,159
segment就表示说

212
00:05:48,159 --> 00:05:51,839
你里面句子是0或者1

213
00:05:52,079 --> 00:05:55,519
所以它的大小也是512x64

214
00:05:57,079 --> 00:05:58,199
valid length

215
00:05:58,279 --> 00:05:59,000
valid length

216
00:05:59,000 --> 00:06:00,639
讲的是我这个句子里面

217
00:06:00,639 --> 00:06:01,800
多少个是

218
00:06:02,719 --> 00:06:03,599
原来的句子

219
00:06:03,599 --> 00:06:05,360
多少个是被派了进去了

220
00:06:05,360 --> 00:06:07,439
所以它的长度应该就是

221
00:06:08,560 --> 00:06:09,439
512

222
00:06:11,599 --> 00:06:12,719
predict position

223
00:06:12,719 --> 00:06:14,039
就是说对每一个句子

224
00:06:14,199 --> 00:06:16,279
我们预测多少个位置

225
00:06:16,639 --> 00:06:18,759
我们这个地方选的是10

226
00:06:20,319 --> 00:06:20,919
为什么是10

227
00:06:21,039 --> 00:06:21,839
就是15%

228
00:06:22,279 --> 00:06:23,599
64×75%

229
00:06:23,599 --> 00:06:24,479
就是一个

230
00:06:24,719 --> 00:06:25,839
大概是一个10

231
00:06:26,120 --> 00:06:27,439
所以就是说

232
00:06:27,479 --> 00:06:28,439
它是每个样本

233
00:06:28,800 --> 00:06:30,360
我会预测10个位置

234
00:06:32,000 --> 00:06:33,319
然后这是wait

235
00:06:33,319 --> 00:06:35,639
它的wait也是512x10

236
00:06:35,639 --> 00:06:36,719
wait是说

237
00:06:36,759 --> 00:06:37,719
你如果有一些

238
00:06:37,719 --> 00:06:40,199
它是真的没有采用那么多的话

239
00:06:40,199 --> 00:06:43,120
那么它里面就是0或者1

240
00:06:43,439 --> 00:06:45,079
1就表示说是真的

241
00:06:45,639 --> 00:06:46,439
真的要预测

242
00:06:46,439 --> 00:06:46,919
0的话

243
00:06:47,039 --> 00:06:48,719
就是一些填充的东西在里面

244
00:06:50,359 --> 00:06:51,560
最后一个就是

245
00:06:51,879 --> 00:06:52,879
你这个句子

246
00:06:52,959 --> 00:06:54,800
对是不是一个连续的

247
00:06:54,800 --> 00:06:56,519
就是说如果是或者不是

248
00:06:56,519 --> 00:06:58,800
那么它的长度是512x1

249
00:07:00,000 --> 00:07:00,439
不

250
00:07:00,719 --> 00:07:01,759
这个地方还有一个

251
00:07:01,759 --> 00:07:02,000
对

252
00:07:02,000 --> 00:07:04,519
它的每个位置

253
00:07:04,919 --> 00:07:06,079
语言模式预测的位置

254
00:07:06,079 --> 00:07:06,560
那个y

255
00:07:06,680 --> 00:07:07,759
这真实的那个东西

256
00:07:07,759 --> 00:07:09,240
是在这个地方

257
00:07:10,039 --> 00:07:10,759
最后的话

258
00:07:10,879 --> 00:07:12,759
就是你这个句子

259
00:07:12,759 --> 00:07:14,719
对是不是真正的是连续的

260
00:07:14,720 --> 00:07:16,760
所以它是一个标志是512

261
00:07:17,160 --> 00:07:17,760
OK

262
00:07:17,840 --> 00:07:18,720
所以另外一个它的

263
00:07:18,720 --> 00:07:19,520
它的webcapsize

264
00:07:19,520 --> 00:07:21,240
是大概是2万的样子

265
00:07:22,280 --> 00:07:23,160
所以这样的话

266
00:07:23,280 --> 00:07:25,440
我们就拿到了我们的

267
00:07:26,800 --> 00:07:29,200
用来做预训练

268
00:07:29,200 --> 00:07:30,560
BERT的数据机

269
00:07:30,800 --> 00:07:32,640
基本上就是还挺复杂的

270
00:07:32,640 --> 00:07:33,120
对吧

271
00:07:33,160 --> 00:07:34,040
就是说

272
00:07:34,880 --> 00:07:36,560
你就读出来的东西比较多

273
00:07:36,720 --> 00:07:37,920
data iterate出来

274
00:07:37,920 --> 00:07:39,280
会读出很多

275
00:07:39,280 --> 00:07:40,560
这些东西出来

276
00:07:40,800 --> 00:07:41,720
这个也是

277
00:07:41,920 --> 00:07:43,160
一直也是做BERT

278
00:07:43,240 --> 00:07:44,760
做后来那一些东西

279
00:07:44,880 --> 00:07:45,520
就是

280
00:07:45,880 --> 00:07:46,680
比较

281
00:07:47,280 --> 00:07:48,520
不那么好理解的地方

282
00:07:48,520 --> 00:07:49,880
就会拿出来

283
00:07:50,080 --> 00:07:52,320
很多这样子的东西

284
00:07:52,400 --> 00:07:53,200
不像图片一样

285
00:07:53,200 --> 00:07:53,960
我就拿出来的东西

286
00:07:53,960 --> 00:07:55,200
相对说比较简单

287
00:07:55,760 --> 00:07:56,760
这也是说

288
00:07:56,960 --> 00:07:57,680
大家可以

289
00:07:57,680 --> 00:07:58,680
我们就过得比较快

290
00:07:58,800 --> 00:07:59,440
这个代码

291
00:07:59,480 --> 00:08:00,480
大家去看一下

292
00:08:00,480 --> 00:08:01,720
具体细节怎么实现的

293
00:08:01,720 --> 00:08:02,760
而且可能要

294
00:08:03,360 --> 00:08:04,840
多看几遍才能理解到

295
00:08:04,840 --> 00:08:06,280
这些token segment

296
00:08:06,400 --> 00:08:06,840
length

297
00:08:07,160 --> 00:08:07,680
position

298
00:08:07,760 --> 00:08:09,120
这个东西到底是什么东西

299
00:08:09,920 --> 00:08:11,440
当我们快速的过一遍

300
00:08:11,439 --> 00:08:13,759
可能大家可能会confuse

