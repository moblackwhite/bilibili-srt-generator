1
00:00:00,000 --> 00:00:02,000
问题三

2
00:00:02,000 --> 00:00:05,000
VHDL和Verilog的编程怎么学

3
00:00:05,000 --> 00:00:07,000
可以和C++对比学习吗

4
00:00:07,000 --> 00:00:12,000
这个东西你可以去看一下

5
00:00:12,000 --> 00:00:15,000
网上也挺多教程

6
00:00:15,000 --> 00:00:16,000
我们肯定是不讲这个东西的

7
00:00:16,000 --> 00:00:19,000
我自己也已经忘光了

8
00:00:19,000 --> 00:00:22,000
我建议除非你想清楚了你要干嘛

9
00:00:22,000 --> 00:00:25,000
不然的话你能学的东西那么多

10
00:00:25,000 --> 00:00:26,000
去学它干什么呀

11
00:00:26,000 --> 00:00:31,000
而且现在我知道有一些FBJ可以让你用

12
00:00:31,000 --> 00:00:33,000
相对来说用C++来开发的

13
00:00:33,000 --> 00:00:35,000
不用用那么低层的语言来开发

14
00:00:35,000 --> 00:00:39,000
就是说现在FBJ公司的编辑做的越来越好了

15
00:00:39,000 --> 00:00:42,000
就是说你可能能够差不多用C来开发了

16
00:00:42,000 --> 00:00:45,000
这问题四

17
00:00:45,000 --> 00:00:47,000
硬件的性能是不是专业硬件大于FBJ

18
00:00:47,000 --> 00:00:49,000
大于通用硬件

19
00:00:49,000 --> 00:00:53,000
FBJ的编译可以通过模拟器来解决吗

20
00:00:54,000 --> 00:00:56,000
就是说性能这个东西

21
00:00:56,000 --> 00:00:58,000
我觉得性能这东西你不能

22
00:00:58,000 --> 00:01:01,000
就你一定要去看你芯片面积有多大

23
00:01:01,000 --> 00:01:03,000
就性能我们一般的比较是说

24
00:01:03,000 --> 00:01:04,000
给定芯片面积

25
00:01:04,000 --> 00:01:06,000
给定你的工艺

26
00:01:06,000 --> 00:01:07,000
就是说你几纳米

27
00:01:07,000 --> 00:01:09,000
就是说给定你我用十一个

28
00:01:09,000 --> 00:01:11,000
比如说十一个元件在里面

29
00:01:11,000 --> 00:01:13,000
然后你跟大家拼性了

30
00:01:13,000 --> 00:01:16,000
所以你不能用那么大的GPU

31
00:01:16,000 --> 00:01:17,000
GPU芯片那么大

32
00:01:17,000 --> 00:01:19,000
比一个那么小的FBJ

33
00:01:19,000 --> 00:01:21,000
或者比一个像那么小的DSP

34
00:01:21,000 --> 00:01:22,000
你是比不赢的

35
00:01:22,000 --> 00:01:24,000
就同样的芯片面积的情况下

36
00:01:24,000 --> 00:01:25,000
通常来说

37
00:01:25,000 --> 00:01:26,000
我觉得这是对的

38
00:01:26,000 --> 00:01:29,000
就越专用你的性能越高

39
00:01:29,000 --> 00:01:30,000
你性能不高

40
00:01:30,000 --> 00:01:32,000
你专用干嘛

41
00:01:32,000 --> 00:01:34,000
就越专用你就越难卖

42
00:01:34,000 --> 00:01:35,000
对吧

43
00:01:35,000 --> 00:01:36,000
如果你专用芯片

44
00:01:36,000 --> 00:01:38,000
比通用芯片性能还差的话

45
00:01:38,000 --> 00:01:39,000
我买你干嘛

46
00:01:39,000 --> 00:01:40,000
所以我肯定买通用的

47
00:01:40,000 --> 00:01:41,000
所以就是说

48
00:01:41,000 --> 00:01:43,000
你如果达不到性能更高

49
00:01:43,000 --> 00:01:45,000
那你就没有存在意义了

50
00:01:45,000 --> 00:01:47,000
就是第二个是FBJ的编译

51
00:01:47,000 --> 00:01:50,000
是不是可以通过模拟器来解决

52
00:01:50,000 --> 00:01:51,000
它的编译

53
00:01:51,000 --> 00:01:53,000
就是说你当可以可以

54
00:01:53,000 --> 00:01:54,000
我大概理解什么意思

55
00:01:54,000 --> 00:01:56,000
就是说你又看你这个代码写错

56
00:01:56,000 --> 00:01:57,000
没写错

57
00:01:57,000 --> 00:01:58,000
当时可以通过模拟器

58
00:01:58,000 --> 00:02:01,000
他说你真正的要去把那个编译的结果

59
00:02:01,000 --> 00:02:04,000
就是说把你的设计的那个线路

60
00:02:04,000 --> 00:02:06,000
给你烧进板子的话

61
00:02:06,000 --> 00:02:09,000
那么你是得去烧这个过程

62
00:02:09,000 --> 00:02:11,000
那是一个很慢的过程

63
00:02:11,000 --> 00:02:12,000
好

64
00:02:12,000 --> 00:02:14,000
就是说这个很难避免

65
00:02:15,000 --> 00:02:18,000
第三个就是说

66
00:02:19,000 --> 00:02:24,000
FBJ在经常被用于做AC的设计的一些验证

67
00:02:24,000 --> 00:02:27,000
但他不是只能做这个事情

68
00:02:27,000 --> 00:02:29,000
比如说我知道

69
00:02:30,000 --> 00:02:33,000
比如说华为的路由器是用FBJ做的

70
00:02:33,000 --> 00:02:37,000
就FBJ的一大客户是谁是华为

71
00:02:37,000 --> 00:02:38,000
干嘛呢

72
00:02:38,000 --> 00:02:39,000
他做路由器

73
00:02:39,000 --> 00:02:42,000
做路由器里面的那个路由器里面很多芯片

74
00:02:42,000 --> 00:02:47,000
他为什么用FBJ是因为说我用了FBJ的好处

75
00:02:47,000 --> 00:02:49,000
还是什么他别的好处是什么

76
00:02:49,000 --> 00:02:50,000
他可以改

77
00:02:51,000 --> 00:02:52,000
就是说一旦你的网络

78
00:02:52,000 --> 00:02:55,000
我是三三级变四级四级变五级

79
00:02:55,000 --> 00:02:56,000
或者是什么

80
00:02:56,000 --> 00:02:58,000
网络协议站加了个什么

81
00:02:58,000 --> 00:03:00,000
协议站或者干嘛的话

82
00:03:00,000 --> 00:03:01,000
那么就是说

83
00:03:01,000 --> 00:03:02,000
如果家的东西

84
00:03:02,000 --> 00:03:04,000
我可以重新是烧我的FBJ

85
00:03:05,000 --> 00:03:08,000
那我的就是说你用户不要去买一个新的路由器

86
00:03:08,000 --> 00:03:10,000
或者买一个去更新芯片

87
00:03:10,000 --> 00:03:11,000
就我会用原来的东西

88
00:03:11,000 --> 00:03:13,000
能够把我的东西烧进去

89
00:03:13,000 --> 00:03:15,000
能够完成更新换代

90
00:03:16,000 --> 00:03:19,000
就是说华为其实是用了大量的FBJ

91
00:03:19,000 --> 00:03:23,000
另外一块就数据中心里面数据中心一样的

92
00:03:23,000 --> 00:03:24,000
他有很多功能

93
00:03:24,000 --> 00:03:26,000
比如说使用FBJ做的

94
00:03:26,000 --> 00:03:30,000
我记得微软曾经讲过他们网页搜索

95
00:03:30,000 --> 00:03:31,000
用了大量的FBJ

96
00:03:32,000 --> 00:03:35,000
就是说一个就他把FBJ放在网卡那里

97
00:03:35,000 --> 00:03:37,000
就数据一到网卡

98
00:03:37,000 --> 00:03:38,000
然后直接进FBJ

99
00:03:38,000 --> 00:03:39,000
FBJ说我能做

100
00:03:39,000 --> 00:03:40,000
我就做完就走掉了

101
00:03:40,000 --> 00:03:42,000
就不需要去进硬件进CPU

102
00:03:43,000 --> 00:03:45,000
就他能够做很多这样子的事情

103
00:03:46,000 --> 00:03:47,000
OK

104
00:03:49,000 --> 00:03:50,000
问题5

105
00:03:50,000 --> 00:03:52,000
PyTorch有什么办法掉TPU吗

106
00:03:52,000 --> 00:03:53,000
Collabial TPU可以用

107
00:03:53,000 --> 00:03:55,000
如果掉TPU会不会快点

108
00:03:55,000 --> 00:03:56,000
Collabial TPU是的

109
00:03:58,000 --> 00:04:01,000
PyTorch的话有个叫Torch XA的东西

110
00:04:01,000 --> 00:04:03,000
大家可以去看一下

111
00:04:03,000 --> 00:04:05,000
叫Torch XA

112
00:04:05,000 --> 00:04:06,000
你可以去搜一下

113
00:04:07,000 --> 00:04:09,000
就他能够做TPU

114
00:04:09,000 --> 00:04:10,000
我倒是用过一次

115
00:04:10,000 --> 00:04:12,000
但我没有仔细算过

116
00:04:12,000 --> 00:04:13,000
我没有仔细看过性能

117
00:04:13,000 --> 00:04:15,000
我觉得可能明明是能用的

118
00:04:15,000 --> 00:04:16,000
但整体来讲

119
00:04:16,000 --> 00:04:18,000
如果你真要用TPU的话

120
00:04:18,000 --> 00:04:20,000
我建议你还是用TensorFlow

121
00:04:21,000 --> 00:04:24,000
TensorFlow毕竟是他们大量的用户在用

122
00:04:24,000 --> 00:04:26,000
Google都希望TensorFlow跑TPU

123
00:04:26,000 --> 00:04:28,000
另外一个是JAX

124
00:04:28,000 --> 00:04:29,000
就是JAX

125
00:04:29,000 --> 00:04:33,000
我觉得JAX也挺不错的

126
00:04:33,000 --> 00:04:36,000
就是说他对TPU的知识也不错

127
00:04:36,000 --> 00:04:39,000
这是因为JAX和TensorFlow共用的一个后端

128
00:04:39,000 --> 00:04:41,000
共用的都是XA后端

129
00:04:44,000 --> 00:04:45,000
所以说反过来讲

130
00:04:45,000 --> 00:04:47,000
还是这个核心思想

131
00:04:47,000 --> 00:04:49,000
是说你要卖一个芯片的话

132
00:04:49,000 --> 00:04:52,000
你一定得有上面的生态

133
00:04:52,000 --> 00:04:53,000
你没生态的话

134
00:04:53,000 --> 00:04:54,000
我造一个芯片出来

135
00:04:54,000 --> 00:04:55,000
别人用不了

136
00:04:55,000 --> 00:04:56,000
那怎么办

137
00:04:56,000 --> 00:04:57,000
对吧

138
00:04:57,000 --> 00:04:59,000
就反过来讲说

139
00:04:59,000 --> 00:05:00,000
我造一个芯片出来

140
00:05:00,000 --> 00:05:02,000
就我自己的框架能用

141
00:05:02,000 --> 00:05:03,000
你们PyTorch不能用

142
00:05:03,000 --> 00:05:04,000
TensorFlow不能用

143
00:05:04,000 --> 00:05:05,000
谁都不能用

144
00:05:05,000 --> 00:05:06,000
那你谁怎么用

145
00:05:06,000 --> 00:05:07,000
我用你的芯片

146
00:05:07,000 --> 00:05:08,000
我用你的芯片

147
00:05:08,000 --> 00:05:09,000
我还得学一套东西吗

148
00:05:09,000 --> 00:05:11,000
不会有人干这个事情的

149
00:05:14,000 --> 00:05:17,000
Softmax和Sigmoid的函数区别是什么

150
00:05:17,000 --> 00:05:19,000
这个问题

151
00:05:19,000 --> 00:05:24,000
Softmax和Sigmoid的函数区别不一样

152
00:05:24,000 --> 00:05:26,000
Sigmoid是用来做激活的

153
00:05:26,000 --> 00:05:27,000
Softmax是用来做输出

154
00:05:27,000 --> 00:05:32,000
把你的变成一个概率的东西

155
00:05:32,000 --> 00:05:34,000
建议大家回去问

156
00:05:34,000 --> 00:05:36,000
这个问题的同学回去看一看

157
00:05:37,000 --> 00:05:41,000
课程是这么讲的

158
00:05:41,000 --> 00:05:42,000
问题7

159
00:05:42,000 --> 00:05:46,000
X轴越往右功耗应该是越低

160
00:05:48,000 --> 00:05:50,000
就你是说

161
00:05:51,000 --> 00:05:53,000
对对对功耗越低

162
00:05:53,000 --> 00:05:55,000
就性能越高功耗越低

163
00:05:55,000 --> 00:05:56,000
对对对你说的没错

164
00:05:56,000 --> 00:05:58,000
性能低

165
00:05:58,000 --> 00:06:01,000
功耗性能高功耗低

166
00:06:01,000 --> 00:06:03,000
这对的是没错的

167
00:06:04,000 --> 00:06:05,000
就还是一样的

168
00:06:05,000 --> 00:06:08,000
功耗你不能脱离你的芯片面积

169
00:06:08,000 --> 00:06:12,000
就通常是说我要达到多大的计算量

170
00:06:12,000 --> 00:06:14,000
就是说我要到一个TFLOP

171
00:06:14,000 --> 00:06:15,000
或者说实测

172
00:06:15,000 --> 00:06:18,000
我们能跑1000个image per second的时候

173
00:06:18,000 --> 00:06:19,000
算功耗

174
00:06:20,000 --> 00:06:23,000
而且功耗其实你这个东西又回到一个问题

175
00:06:23,000 --> 00:06:24,000
就是说

176
00:06:25,000 --> 00:06:27,000
TPU是不care功耗的

177
00:06:29,000 --> 00:06:33,000
就在server上的就云上面的芯片是不管功耗的

178
00:06:33,000 --> 00:06:35,000
手机端是最关心功耗

179
00:06:35,000 --> 00:06:37,000
就是说谁关心功耗呢

180
00:06:37,000 --> 00:06:38,000
不是每个人都关心功耗

181
00:06:38,000 --> 00:06:40,000
是只有手机才关心功耗

182
00:06:43,000 --> 00:06:45,000
因为你手机用电池

183
00:06:45,000 --> 00:06:48,000
另外一块就是说你的电脑可能会关心功耗

184
00:06:48,000 --> 00:06:50,000
因为功耗低的话

185
00:06:50,000 --> 00:06:51,000
你散热就低

186
00:06:52,000 --> 00:06:53,000
散热低的话用户体验好一点

187
00:06:53,000 --> 00:06:56,000
你一个东西滚热滚热的用起来很麻烦

188
00:06:56,000 --> 00:06:58,000
比如说我用M1的芯片的话

189
00:06:58,000 --> 00:07:01,000
我最大的感受就是说他散热低

190
00:07:01,000 --> 00:07:04,000
就是说你快慢我大部分时间感受不到

191
00:07:04,000 --> 00:07:06,000
散热低那就是风扇不会转

192
00:07:06,000 --> 00:07:08,000
这个东西我基本上感觉不到

193
00:07:08,000 --> 00:07:12,000
不然我以前直播的整个风扇就轰轰轰的转

194
00:07:12,000 --> 00:07:14,000
现在风扇不转了挺好的

195
00:07:14,000 --> 00:07:15,000
就是我的直观感受

196
00:07:15,000 --> 00:07:19,000
所以给用户的进的东西功耗很重要

197
00:07:19,000 --> 00:07:20,000
但对server来说

198
00:07:20,000 --> 00:07:21,000
你为什么功耗不重呢

199
00:07:21,000 --> 00:07:24,000
是因为TPU400瓦

200
00:07:26,000 --> 00:07:28,000
你这个东西呢300瓦吧

201
00:07:28,000 --> 00:07:30,000
就是说TPU比他多100瓦

202
00:07:30,000 --> 00:07:32,000
那多100瓦算啥

203
00:07:32,000 --> 00:07:35,000
就多100瓦就是说这个电费啊

204
00:07:35,000 --> 00:07:37,000
服务器厂的电费很便宜的

205
00:07:37,000 --> 00:07:41,000
在美国特别在美国人家都是自己建发电厂

206
00:07:41,000 --> 00:07:44,000
要么就建在建在一些发电厂边上

207
00:07:44,000 --> 00:07:45,000
就跟人家发电厂拿好协议

208
00:07:45,000 --> 00:07:47,000
就是说对一个电厂来讲

209
00:07:47,000 --> 00:07:48,000
他care什么东西

210
00:07:48,000 --> 00:07:50,000
就我们其实不缺电

211
00:07:50,000 --> 00:07:51,000
我们缺的是什么

212
00:07:51,000 --> 00:07:54,000
我们的电在可能一大半的电是消耗的

213
00:07:54,000 --> 00:07:56,000
我们的电在可能一大半的电是消耗的

214
00:07:56,000 --> 00:07:58,000
我们的电在可能一大半的电是消耗的

215
00:07:58,000 --> 00:08:00,000
在你的运输上面

216
00:08:00,000 --> 00:08:02,000
就你的线路的消耗非常大

217
00:08:02,000 --> 00:08:05,000
第二个是说你的电是因为我一直在发电的话

218
00:08:05,000 --> 00:08:08,000
你大家都是晚上用电比较多吧

219
00:08:08,000 --> 00:08:10,000
或夏天用电多冬天用电少

220
00:08:10,000 --> 00:08:13,000
就是说大家用电量是一个变化的过程

221
00:08:13,000 --> 00:08:16,000
所以你发电厂你都不知道要发多少电

222
00:08:16,000 --> 00:08:17,000
就核电厂

223
00:08:18,000 --> 00:08:19,000
燃料一塞

224
00:08:19,000 --> 00:08:20,000
开始发电了

225
00:08:20,000 --> 00:08:21,000
不能说我现在不要电

226
00:08:21,000 --> 00:08:22,000
不要电我怎么办

227
00:08:22,000 --> 00:08:23,000
我发还是发了

228
00:08:23,000 --> 00:08:27,000
所以说对于对于一个云厂来讲

229
00:08:27,000 --> 00:08:29,000
特别对于数据中心来讲

230
00:08:29,000 --> 00:08:32,000
或者不管是云厂大公司数据中心

231
00:08:32,000 --> 00:08:33,000
功耗不是问题

232
00:08:33,000 --> 00:08:36,000
这个这一点功耗100瓦的功耗真的不是问题

233
00:08:36,000 --> 00:08:40,000
因为他的功耗占比不算是大头

234
00:08:40,000 --> 00:08:41,000
一台服务器

235
00:08:41,000 --> 00:08:44,000
他的GPU的功耗可能还不是大头

236
00:08:44,000 --> 00:08:46,000
空调式的一大头

237
00:08:46,000 --> 00:08:49,000
CPU内存硬盘都要有功耗

238
00:08:49,000 --> 00:08:50,000
所以他的功耗占

239
00:08:50,000 --> 00:08:55,000
占比整个机械功耗可能占比个30%的功耗

240
00:08:55,000 --> 00:08:57,000
就你多个10%变成4%

241
00:08:57,000 --> 00:08:58,000
33%

242
00:08:59,000 --> 00:09:00,000
问题不大

243
00:09:00,000 --> 00:09:02,000
对整体功耗就3%的增加

244
00:09:03,000 --> 00:09:04,000
同反过来讲

245
00:09:04,000 --> 00:09:09,000
电费对于一个机房不是大头

246
00:09:10,000 --> 00:09:12,000
硬件才是大头

247
00:09:12,000 --> 00:09:14,000
就造这个硬件100块钱

248
00:09:14,000 --> 00:09:15,000
就1000块钱

249
00:09:15,000 --> 00:09:18,000
我电费我可能三年也就能烧个

250
00:09:18,000 --> 00:09:20,000
几百块钱

251
00:09:20,000 --> 00:09:21,000
所以是说

252
00:09:21,000 --> 00:09:24,000
你一个芯片用个三四年就了不得了

253
00:09:24,000 --> 00:09:27,000
所以就是说电费他可能不会比成本贵

254
00:09:27,000 --> 00:09:30,000
所以就为什么说对于服务器厂来说

255
00:09:30,000 --> 00:09:32,000
功耗不是问题

256
00:09:32,000 --> 00:09:33,000
性能才是问题

257
00:09:33,000 --> 00:09:35,000
就性能和价格是问题

258
00:09:35,000 --> 00:09:36,000
对手机厂来讲

259
00:09:36,000 --> 00:09:39,000
就是说性能价格功耗都是问题

260
00:09:39,000 --> 00:09:40,000
OK

261
00:09:41,000 --> 00:09:43,000
我们扯远了一点

262
00:09:44,000 --> 00:09:45,000
NPU

263
00:09:45,000 --> 00:09:47,000
NPU这个东西都是

264
00:09:47,000 --> 00:09:48,000
大家看怎么叫

265
00:09:48,000 --> 00:09:50,000
就NPU APU TPU

266
00:09:50,000 --> 00:09:52,000
反正TPU开了个头

267
00:09:52,000 --> 00:09:54,000
就XPU反正都是ASIC的一种

268
00:09:54,000 --> 00:09:55,000
就是说看你怎么设计

269
00:09:55,000 --> 00:09:58,000
如果你真的只是用来做神级网络的话

270
00:09:59,000 --> 00:10:00,000
都是ASIC的一种

271
00:10:04,000 --> 00:10:05,000
你这个问题很好

272
00:10:05,000 --> 00:10:06,000
问题9

273
00:10:06,000 --> 00:10:08,000
这个问题我其实不好那么大回答

274
00:10:08,000 --> 00:10:09,000
就是说

275
00:10:09,000 --> 00:10:13,000
未来3到5年的应用会发生很大的变化吗

276
00:10:13,000 --> 00:10:16,000
现在ASIC芯片未来会被淘汰吗

277
00:10:18,000 --> 00:10:20,000
这个问题就是说

278
00:10:21,000 --> 00:10:22,000
你这个问题问我们

279
00:10:22,000 --> 00:10:24,000
这个课又上不完了

280
00:10:28,000 --> 00:10:30,000
我来喝个水压压惊

281
00:10:31,000 --> 00:10:33,000
首先我是不能预测的

282
00:10:33,000 --> 00:10:35,000
就我能讲一下我的观察

283
00:10:37,000 --> 00:10:38,000
就是说

284
00:10:39,000 --> 00:10:40,000
比如说地平线

285
00:10:41,000 --> 00:10:43,000
5年前6年前

286
00:10:43,000 --> 00:10:44,000
凯哥就于凯

287
00:10:45,000 --> 00:10:47,000
是我百度的前老板

288
00:10:47,000 --> 00:10:48,000
做地平线的时候

289
00:10:48,000 --> 00:10:49,000
他做芯片

290
00:10:49,000 --> 00:10:50,000
我说芯片这个东西

291
00:10:51,000 --> 00:10:52,000
就5年前

292
00:10:52,000 --> 00:10:53,000
这个东西

293
00:10:53,000 --> 00:10:55,000
你整个神级网络在变

294
00:10:55,000 --> 00:10:56,000
我说芯片你留个片

295
00:10:56,000 --> 00:10:57,000
两年过去了

296
00:10:57,000 --> 00:10:58,000
然后你做个

297
00:10:58,000 --> 00:10:59,000
你做完芯片

298
00:10:59,000 --> 00:11:01,000
做下我任务都变了怎么办

299
00:11:03,000 --> 00:11:04,000
但实际上来讲

300
00:11:05,000 --> 00:11:07,000
就这里面有两个好处

301
00:11:07,000 --> 00:11:08,000
说一个是说

302
00:11:11,000 --> 00:11:12,000
我来画一画

303
00:11:12,000 --> 00:11:13,000
就是说

304
00:11:13,000 --> 00:11:15,000
一个是你的一个应用

305
00:11:15,000 --> 00:11:17,000
卷特别卷迹神经网络

306
00:11:17,000 --> 00:11:18,000
他在一开始

307
00:11:18,000 --> 00:11:20,000
比如说20 AlexNet出来

308
00:11:22,000 --> 00:11:25,000
AlexNet出来到ResNet

309
00:11:25,000 --> 00:11:28,000
就是2012到ResNet

310
00:11:28,000 --> 00:11:30,000
就是说我们最近讲过的

311
00:11:31,000 --> 00:11:33,000
2015还是16来的

312
00:11:33,000 --> 00:11:35,000
就四年发展特别快

313
00:11:37,000 --> 00:11:38,000
我切换过来

314
00:11:38,000 --> 00:11:39,000
我写在这个地方

315
00:11:39,000 --> 00:11:41,000
我刚刚没有切换过

316
00:11:41,000 --> 00:11:42,000
切换过来

317
00:11:42,000 --> 00:11:44,000
就AlexNet到ResNet

318
00:11:44,000 --> 00:11:46,000
在四年之间发展特别快

319
00:11:47,000 --> 00:11:49,000
所以确实你要在这个地方造芯片

320
00:11:49,000 --> 00:11:52,000
在我记得2013年2014年时候

321
00:11:53,000 --> 00:11:55,000
Media天天拿着AlexNet

322
00:11:55,000 --> 00:11:56,000
做Benchmark

323
00:11:56,000 --> 00:11:59,000
说我的芯片在AlexNet跑这么快

324
00:11:59,000 --> 00:12:01,000
带歪了一堆公司

325
00:12:02,000 --> 00:12:03,000
那些所有的公司

326
00:12:03,000 --> 00:12:05,000
你去那些参加硬件的会议

327
00:12:05,000 --> 00:12:07,000
他都用AlexNet来做那个东西

328
00:12:07,000 --> 00:12:09,000
我们当时有吐槽说AlexNet谁用

329
00:12:10,000 --> 00:12:11,000
到了VGG之后

330
00:12:11,000 --> 00:12:13,000
AlexNet之后的VGG就

331
00:12:13,000 --> 00:12:15,000
就不会有人AlexNet了

332
00:12:16,000 --> 00:12:17,000
AlexNet更多是在

333
00:12:17,000 --> 00:12:18,000
真的是一个突破

334
00:12:18,000 --> 00:12:19,000
让大家去做研究

335
00:12:19,000 --> 00:12:22,000
但是很快就不会有人用了

336
00:12:23,000 --> 00:12:24,000
VGG接下来

337
00:12:24,000 --> 00:12:26,000
然后接下来就是Inception

338
00:12:29,000 --> 00:12:31,000
AlexNet最大的问题是什么

339
00:12:31,000 --> 00:12:33,000
最大的问题就是他有一个

340
00:12:33,000 --> 00:12:35,000
他有卷机再加全连接

341
00:12:37,000 --> 00:12:39,000
就全连接和卷机

342
00:12:40,000 --> 00:12:42,000
然后你发现就是说

343
00:12:42,000 --> 00:12:43,000
这两个东西

344
00:12:43,000 --> 00:12:44,000
这两个

345
00:12:46,000 --> 00:12:48,000
这两个东西长得特别不一样

346
00:12:48,000 --> 00:12:50,000
虽然卷机也是一种

347
00:12:50,000 --> 00:12:51,000
全连接一种

348
00:12:51,000 --> 00:12:52,000
但是他的那个

349
00:12:52,000 --> 00:12:53,000
他的数据访问就全连接

350
00:12:53,000 --> 00:12:55,000
他的W特别大

351
00:12:55,000 --> 00:12:57,000
卷接W很小

352
00:12:58,000 --> 00:13:00,000
所以就是说卷机是非常好作用

353
00:13:00,000 --> 00:13:02,000
因为卷机W很小

354
00:13:02,000 --> 00:13:03,000
计算密集型

355
00:13:03,000 --> 00:13:05,000
就是说他的计算

356
00:13:05,000 --> 00:13:07,000
就是说就计算密集型

357
00:13:07,000 --> 00:13:08,000
我做一次浮在云上

358
00:13:08,000 --> 00:13:10,000
我要访问多少次数据

359
00:13:10,000 --> 00:13:12,000
卷机远远的低于全连接

360
00:13:12,000 --> 00:13:14,000
所以全连接是什么问题

361
00:13:14,000 --> 00:13:15,000
W大

362
00:13:15,000 --> 00:13:16,000
得存吧

363
00:13:16,000 --> 00:13:18,000
第二是说他的

364
00:13:18,000 --> 00:13:20,000
就是说他的数据要求比较多

365
00:13:20,000 --> 00:13:22,000
所以你发现在很长时段

366
00:13:22,000 --> 00:13:23,000
那帮搞硬件的

367
00:13:23,000 --> 00:13:24,000
就是说硬件

368
00:13:24,000 --> 00:13:25,000
其实搞硬件的人

369
00:13:25,000 --> 00:13:26,000
不是要搞软件在干嘛

370
00:13:26,000 --> 00:13:27,000
就搞硬件

371
00:13:27,000 --> 00:13:30,000
反正一听老大NVIDIA说要AlexNet

372
00:13:30,000 --> 00:13:32,000
就说我做AlexNet

373
00:13:32,000 --> 00:13:36,000
所以那些硬件厂都去优化AlexNet

374
00:13:36,000 --> 00:13:37,000
AlexNet怎么优化

375
00:13:37,000 --> 00:13:39,000
就是说他设计两套东西

376
00:13:39,000 --> 00:13:40,000
一套东西做卷机

377
00:13:40,000 --> 00:13:43,000
一套东西做他的全连接

378
00:13:43,000 --> 00:13:44,000
那当然有问题

379
00:13:44,000 --> 00:13:46,000
因为现在没有人用AlexNet

380
00:13:46,000 --> 00:13:48,000
所以你那一套优化的全连接

381
00:13:48,000 --> 00:13:49,000
发了很多论文

382
00:13:49,000 --> 00:13:50,000
怎么优化全连接

383
00:13:50,000 --> 00:13:51,000
没用没人用

384
00:13:51,000 --> 00:13:53,000
所以但是反过来讲

385
00:13:53,000 --> 00:13:54,000
就很快到RestNet之后

386
00:13:54,000 --> 00:13:56,000
就基本就大概停在这个地方了

387
00:13:56,000 --> 00:13:59,000
整个卷机就是3300卷机

388
00:13:59,000 --> 00:14:00,000
然后也没有全连接

389
00:14:00,000 --> 00:14:01,000
就是说这一块

390
00:14:01,000 --> 00:14:02,000
Researcher的东西

391
00:14:02,000 --> 00:14:03,000
从技术上来讲

392
00:14:03,000 --> 00:14:04,000
很简单的一个加法

393
00:14:04,000 --> 00:14:05,000
对吧

394
00:14:05,000 --> 00:14:06,000
就忽略不计

395
00:14:06,000 --> 00:14:08,000
就是说到这个阶段来讲

396
00:14:08,000 --> 00:14:10,000
其实就已经在卷机上面

397
00:14:10,000 --> 00:14:12,000
现在目前来说比较成熟了

398
00:14:12,000 --> 00:14:15,000
就是说虽然有新的应用

399
00:14:15,000 --> 00:14:16,000
但是在工业界应用来讲

400
00:14:16,000 --> 00:14:18,000
用RestNet挺好的

401
00:14:18,000 --> 00:14:21,000
就工业界不追求要最新的

402
00:14:21,000 --> 00:14:22,000
就是说你新

403
00:14:22,000 --> 00:14:23,000
你做一个新的东西

404
00:14:23,000 --> 00:14:24,000
比我好那么一点点

405
00:14:24,000 --> 00:14:25,000
其实没意义

406
00:14:25,000 --> 00:14:27,000
所以就用来

407
00:14:27,000 --> 00:14:28,000
就是说这个东西

408
00:14:28,000 --> 00:14:30,000
你可以认为就从工业界角度来讲

409
00:14:30,000 --> 00:14:31,000
学术界当然不是

410
00:14:31,000 --> 00:14:32,000
工业界角度来讲

411
00:14:32,000 --> 00:14:34,000
从RestNet之后就比较平了

412
00:14:34,000 --> 00:14:36,000
所以这时候你就可以做芯片了

413
00:14:36,000 --> 00:14:38,000
如果你在这个地方

414
00:14:38,000 --> 00:14:39,000
开始做芯片

415
00:14:39,000 --> 00:14:41,000
做到2016 RestNet开始

416
00:14:41,000 --> 00:14:43,000
就说这个东西很牛逼

417
00:14:43,000 --> 00:14:44,000
我就做它

418
00:14:44,000 --> 00:14:45,000
或者你再等一年吧

419
00:14:45,000 --> 00:14:47,000
看一看它是不是真的牛

420
00:14:47,000 --> 00:14:48,000
是真的牛了之后

421
00:14:48,000 --> 00:14:49,000
你就做它

422
00:14:49,000 --> 00:14:51,000
2017年开始做芯片

423
00:14:51,000 --> 00:14:52,000
2017

424
00:14:52,000 --> 00:14:53,000
你做三年吧

425
00:14:53,000 --> 00:14:55,000
2020

426
00:14:55,000 --> 00:14:56,000
就行了

427
00:14:56,000 --> 00:14:57,000
可以用了

428
00:14:57,000 --> 00:14:59,000
现在刚好是卖的时候

429
00:14:59,000 --> 00:15:01,000
对吧

430
00:15:01,000 --> 00:15:03,000
所以就是说2020

431
00:15:03,000 --> 00:15:05,000
2020去年的把芯片做出来就挺厉害了

432
00:15:05,000 --> 00:15:07,000
去年芯片要求那么大

433
00:15:07,000 --> 00:15:08,000
今年你做出来都行

434
00:15:08,000 --> 00:15:09,000
今年做出来

435
00:15:09,000 --> 00:15:10,000
今年做出来的时候

436
00:15:10,000 --> 00:15:11,000
RestNet跑得特别好

437
00:15:11,000 --> 00:15:13,000
一样的可以卖得很好

438
00:15:13,000 --> 00:15:15,000
可以很好卖

439
00:15:15,000 --> 00:15:16,000
第二个呢

440
00:15:16,000 --> 00:15:17,000
就是说第一点观察

441
00:15:17,000 --> 00:15:19,000
就是说你的一个应用

442
00:15:19,000 --> 00:15:20,000
其实在快速发展了之后

443
00:15:20,000 --> 00:15:21,000
慢慢就会平掉

444
00:15:21,000 --> 00:15:23,000
就没那么多新的idea出来了

445
00:15:23,000 --> 00:15:25,000
就是说大家挑了一两个

446
00:15:25,000 --> 00:15:26,000
就成熟了

447
00:15:26,000 --> 00:15:27,000
就用了

448
00:15:27,000 --> 00:15:29,000
至少可以用个用一阵子吧

449
00:15:29,000 --> 00:15:30,000
用个三四年吧

450
00:15:30,000 --> 00:15:31,000
反正芯片做出来

451
00:15:31,000 --> 00:15:32,000
就用个两三年

452
00:15:32,000 --> 00:15:33,000
就完事了

453
00:15:33,000 --> 00:15:35,000
芯片每年做一代

454
00:15:35,000 --> 00:15:36,000
反正第一代

455
00:15:36,000 --> 00:15:38,000
一代芯片用个两三年就行了

456
00:15:38,000 --> 00:15:40,000
就没问题了

457
00:15:40,000 --> 00:15:42,000
第二

458
00:15:42,000 --> 00:15:44,000
这是第一个观察

459
00:15:44,000 --> 00:15:46,000
第二个观察

460
00:15:46,000 --> 00:15:47,000
第二观察呢

461
00:15:47,000 --> 00:15:49,000
其实有点拍马屁了

462
00:15:49,000 --> 00:15:50,000
就有一天

463
00:15:50,000 --> 00:15:52,000
我觉得五年前

464
00:15:52,000 --> 00:15:53,000
五年前啊

465
00:15:53,000 --> 00:15:55,000
山东学习还刚开始火的时候

466
00:15:55,000 --> 00:15:57,000
我跟Jason Huang吃饭

467
00:15:57,000 --> 00:15:59,000
这Jason Huang就是NVIDIA的创始人了

468
00:15:59,000 --> 00:16:01,000
他住在我家附近

469
00:16:01,000 --> 00:16:02,000
他住在我家附近

470
00:16:02,000 --> 00:16:03,000
其实他这个人比较好玩

471
00:16:03,000 --> 00:16:04,000
他没有

472
00:16:04,000 --> 00:16:05,000
就你要找他怎么找人

473
00:16:05,000 --> 00:16:06,000
打他电话

474
00:16:06,000 --> 00:16:08,000
Jason要不要出来吃饭

475
00:16:08,000 --> 00:16:09,000
那个年代

476
00:16:09,000 --> 00:16:10,000
现在可能不行

477
00:16:10,000 --> 00:16:11,000
现在NVIDIA股价那么高

478
00:16:11,000 --> 00:16:12,000
可能不一样了

479
00:16:12,000 --> 00:16:13,000
就当年啊

480
00:16:13,000 --> 00:16:14,000
三四年前你找Jason出来吃饭

481
00:16:14,000 --> 00:16:15,000
Jason就蹭蹭蹭

482
00:16:15,000 --> 00:16:17,000
穿着他的皮马甲就出来了

483
00:16:17,000 --> 00:16:19,000
就有一次我记得就在

484
00:16:19,000 --> 00:16:20,000
就在Palo Alto

485
00:16:20,000 --> 00:16:22,000
就是我们那个小镇啊

486
00:16:22,000 --> 00:16:23,000
小镇上面吃饭

487
00:16:23,000 --> 00:16:24,000
就叫Jason

488
00:16:24,000 --> 00:16:25,000
下午三点跟他

489
00:16:25,000 --> 00:16:27,000
下午三点呢

490
00:16:27,000 --> 00:16:29,000
当时候我们就是说

491
00:16:29,000 --> 00:16:30,000
在那个小镇嘛

492
00:16:30,000 --> 00:16:32,000
小镇搞那些什么

493
00:16:32,000 --> 00:16:33,000
艺术品节

494
00:16:33,000 --> 00:16:34,000
就看了一眼

495
00:16:34,000 --> 00:16:35,000
反正说吃饭吃饭

496
00:16:35,000 --> 00:16:37,000
吃饭说三四点说吃饭

497
00:16:37,000 --> 00:16:38,000
打个电话给Jason

498
00:16:38,000 --> 00:16:39,000
Jason要不要出来吃饭

499
00:16:39,000 --> 00:16:40,000
Jason说可以可以可以

500
00:16:40,000 --> 00:16:41,000
出来吃饭

501
00:16:41,000 --> 00:16:42,000
然后就过来了

502
00:16:42,000 --> 00:16:44,000
他说其实我刚跟老婆

503
00:16:44,000 --> 00:16:45,000
吃完上一顿饭

504
00:16:45,000 --> 00:16:47,000
就我来跟你们来吃下一顿

505
00:16:47,000 --> 00:16:50,000
那个年代Jason还是很拼的啊

506
00:16:50,000 --> 00:16:51,000
我们就聊啊

507
00:16:51,000 --> 00:16:52,000
东聊西聊啊

508
00:16:52,000 --> 00:16:53,000
就我就聊到一点

509
00:16:53,000 --> 00:16:54,000
是说我说啊

510
00:16:54,000 --> 00:16:55,000
这个

511
00:16:55,000 --> 00:16:57,000
我说

512
00:16:57,000 --> 00:16:58,000
就是说

513
00:16:58,000 --> 00:17:01,000
就硬件和你的网络的设计

514
00:17:01,000 --> 00:17:02,000
是一个基设

515
00:17:02,000 --> 00:17:04,000
但和一个诞生机的过程

516
00:17:04,000 --> 00:17:05,000
首先你有GPU

517
00:17:05,000 --> 00:17:07,000
因为GPU你才有Alex

518
00:17:07,000 --> 00:17:09,000
没有GPU真的没有Alex

519
00:17:09,000 --> 00:17:10,000
你可能在

520
00:17:10,000 --> 00:17:11,000
你要等再等个很多年

521
00:17:11,000 --> 00:17:13,000
等到别的芯片出来

522
00:17:13,000 --> 00:17:15,000
就是说Alex

523
00:17:15,000 --> 00:17:16,000
长成这样子

524
00:17:16,000 --> 00:17:19,000
是因为GPU能让你跑了

525
00:17:19,000 --> 00:17:23,000
在接下来的所有的那些网络设计里面

526
00:17:23,000 --> 00:17:25,000
其实多多少少

527
00:17:25,000 --> 00:17:27,000
就是一个研究人员啊

528
00:17:27,000 --> 00:17:29,000
我是用的GPU做训练的话

529
00:17:29,000 --> 00:17:30,000
我的网络设计

530
00:17:30,000 --> 00:17:33,000
首先要保证GPU上的Run比较好

531
00:17:33,000 --> 00:17:35,000
如果GPU跑的不好的话

532
00:17:35,000 --> 00:17:36,000
你根本就跑不出来

533
00:17:36,000 --> 00:17:38,000
你去哪里跑去

534
00:17:38,000 --> 00:17:39,000
所以就是说

535
00:17:39,000 --> 00:17:41,000
你硬件一旦成为主流的话

536
00:17:41,000 --> 00:17:43,000
你会把整个Research的Community

537
00:17:43,000 --> 00:17:46,000
就是说整个Paper方向都得在Fit到你硬件

538
00:17:46,000 --> 00:17:49,000
就是说你硬件在很大程度上取

539
00:17:49,000 --> 00:17:52,000
就是说定义了你这个网络怎么设计的

540
00:17:52,000 --> 00:17:54,000
就之所以神经网络不能长得像大脑型

541
00:17:54,000 --> 00:17:57,000
GPU和CPU长得不像大脑

542
00:17:57,000 --> 00:17:59,000
因为是粉红一般架构

543
00:17:59,000 --> 00:18:01,000
就导致说你长得像大脑没用

544
00:18:01,000 --> 00:18:02,000
你得自己造芯片去

545
00:18:02,000 --> 00:18:03,000
你造不了芯片

546
00:18:03,000 --> 00:18:04,000
你跑不了大数据

547
00:18:04,000 --> 00:18:05,000
你出不了结果

548
00:18:05,000 --> 00:18:06,000
没人信

549
00:18:06,000 --> 00:18:08,000
所以金色网一听到

550
00:18:08,000 --> 00:18:09,000
这个东西很好

551
00:18:09,000 --> 00:18:10,000
这个东西我觉得特别好

552
00:18:10,000 --> 00:18:13,000
所以从此以后金色网自称AI教主

553
00:18:13,000 --> 00:18:17,000
就是说我I reshaped deep learning

554
00:18:17,000 --> 00:18:20,000
叫Media GPU reshaped deep learning

555
00:18:20,000 --> 00:18:22,000
就是说反过来讲也是一样的

556
00:18:22,000 --> 00:18:23,000
现在火的是什么

557
00:18:23,000 --> 00:18:25,000
现在火的是transformer

558
00:18:25,000 --> 00:18:28,000
我们会讲transformer这个结构

559
00:18:33,000 --> 00:18:35,000
transformer写错了

560
00:18:35,000 --> 00:18:36,000
transformer

561
00:18:36,000 --> 00:18:39,000
就整个就是说BERT那些架构

562
00:18:39,000 --> 00:18:41,000
就BERT这个架构出来

563
00:18:41,000 --> 00:18:42,000
就BERT是谁做的

564
00:18:42,000 --> 00:18:43,000
是Google做的

565
00:18:43,000 --> 00:18:47,000
就是Google做的transformer这个东西

566
00:18:47,000 --> 00:18:49,000
之所以长成这个样子

567
00:18:49,000 --> 00:18:51,000
一方面当然是说它有效

568
00:18:51,000 --> 00:18:52,000
另外一方面

569
00:18:52,000 --> 00:18:54,000
它特别适合跑TPU

570
00:18:54,000 --> 00:18:57,000
就transformer特别适合跑TPU

571
00:18:59,000 --> 00:19:02,000
就是Google就全力去推transformer

572
00:19:02,000 --> 00:19:03,000
因为推完transformer之后

573
00:19:03,000 --> 00:19:05,000
我TPU就是TPU在卷积上面

574
00:19:05,000 --> 00:19:08,000
其实不见得有比要比GPU好很多

575
00:19:08,000 --> 00:19:10,000
就是TPU做卷积

576
00:19:10,000 --> 00:19:12,000
其实不那么好做卷积这东西

577
00:19:12,000 --> 00:19:14,000
但transformer特别好做

578
00:19:15,000 --> 00:19:18,000
就能发现transformer在于ASIC上

579
00:19:18,000 --> 00:19:19,000
效率非常高

580
00:19:19,000 --> 00:19:21,000
所以你的ASIC对卷积做一句话的话

581
00:19:21,000 --> 00:19:22,000
做transformer

582
00:19:22,000 --> 00:19:24,000
transformer就是一堆全连接

583
00:19:24,000 --> 00:19:26,000
特别高效

584
00:19:27,000 --> 00:19:30,000
就是说transformer能做那么大

585
00:19:31,000 --> 00:19:32,000
而且transformer就TPU

586
00:19:32,000 --> 00:19:33,000
它比GPU好在哪里

587
00:19:33,000 --> 00:19:35,000
TPU的内存特别大

588
00:19:35,000 --> 00:19:37,000
TPU你看到这里有四个芯片

589
00:19:38,000 --> 00:19:39,000
它有四个芯片

590
00:19:39,000 --> 00:19:40,000
这里有1234

591
00:19:40,000 --> 00:19:42,000
它里面每一个有一个很大的

592
00:19:42,000 --> 00:19:43,000
有一个很大的内存

593
00:19:43,000 --> 00:19:45,000
所以它用的内存

594
00:19:45,000 --> 00:19:48,000
它是我记得TPU可以用到一块

595
00:19:48,000 --> 00:19:50,000
整个板子可以用到128GB

596
00:19:52,000 --> 00:19:54,000
就GPU能大概是32GB吧

597
00:19:54,000 --> 00:19:55,000
就是说

598
00:19:56,000 --> 00:20:00,000
所以就GPU的内存导致你的网络不能做太大

599
00:20:00,000 --> 00:20:02,000
是因为你的内存撑不住

600
00:20:02,000 --> 00:20:03,000
但TPU内存可以做很大

601
00:20:03,000 --> 00:20:05,000
所以transformer一出来

602
00:20:05,000 --> 00:20:07,000
我就直接用了一个巨大的东西

603
00:20:07,000 --> 00:20:08,000
因为我的内存能撑住

604
00:20:09,000 --> 00:20:11,000
所以transformer出来之后

605
00:20:11,000 --> 00:20:12,000
Google花了很多

606
00:20:12,000 --> 00:20:14,000
就是说research community花了很多时间

607
00:20:14,000 --> 00:20:17,000
去把整个transformerport到GPU上

608
00:20:17,000 --> 00:20:18,000
让GPU能run

609
00:20:18,000 --> 00:20:20,000
是因为GPU内存不够大撑不住

610
00:20:20,000 --> 00:20:21,000
所以就是为什么

611
00:20:21,000 --> 00:20:23,000
出了model parallelism

612
00:20:23,000 --> 00:20:24,000
我在transformer出来之前

613
00:20:24,000 --> 00:20:26,000
我是不信model parallelism的

614
00:20:26,000 --> 00:20:27,000
我觉得这个东西model parallelism没意义

615
00:20:27,000 --> 00:20:29,000
就我们待会会讲

616
00:20:29,000 --> 00:20:30,000
就我说data parallelism挺好的

617
00:20:30,000 --> 00:20:31,000
为什么做model parallelism

618
00:20:31,000 --> 00:20:33,000
但是transformer在TPU上

619
00:20:33,000 --> 00:20:34,000
因为TPU内存大

620
00:20:34,000 --> 00:20:35,000
它做得很好

621
00:20:35,000 --> 00:20:37,000
结果它GPU一看跑不了

622
00:20:37,000 --> 00:20:38,000
跑不了的话怎么办

623
00:20:38,000 --> 00:20:40,000
那只能做更多设计

624
00:20:41,000 --> 00:20:43,000
所以就是说

625
00:20:43,000 --> 00:20:44,000
你可以认为这也是一个例子

626
00:20:44,000 --> 00:20:45,000
说你的

627
00:20:45,000 --> 00:20:47,000
这个我也跟

628
00:20:48,000 --> 00:20:50,000
跟TPU团队的人讲过

629
00:20:50,000 --> 00:20:52,000
我说我觉得这个硬件

630
00:20:52,000 --> 00:20:54,000
就真的硬件决定算法

631
00:20:54,000 --> 00:20:56,000
就是GPU决定了一代算法

632
00:20:56,000 --> 00:20:57,000
但是TPU也是决定了

633
00:20:57,000 --> 00:20:59,000
就是为什么我说TPU是ASIC

634
00:20:59,000 --> 00:21:00,000
最代表性的工作

635
00:21:00,000 --> 00:21:02,000
因为它的硬件都能够厉害到

636
00:21:02,000 --> 00:21:03,000
能够影响算法了

637
00:21:04,000 --> 00:21:05,000
对吧

638
00:21:05,000 --> 00:21:06,000
然后呢

639
00:21:07,000 --> 00:21:08,000
那些做ASIC的人

640
00:21:08,000 --> 00:21:09,000
别的做ASIC的人

641
00:21:09,000 --> 00:21:11,000
就捡了一个漏子

642
00:21:12,000 --> 00:21:14,000
就是说你发现你自己做个ASIC

643
00:21:15,000 --> 00:21:18,000
你跑卷机可能跑的一般

644
00:21:18,000 --> 00:21:20,000
就是说人家GPU跑卷机

645
00:21:20,000 --> 00:21:21,000
能够利用率

646
00:21:21,000 --> 00:21:23,000
硬件利用率能够70% 80% 90%

647
00:21:23,000 --> 00:21:25,000
你做个ASIC可能就能够

648
00:21:25,000 --> 00:21:26,000
跑个20% 30%

649
00:21:27,000 --> 00:21:30,000
但假设你卷机能跑20% 30%

650
00:21:30,000 --> 00:21:32,000
就是说你跟GPU完全不能拼

651
00:21:32,000 --> 00:21:34,000
但你发现Transformer很好啊

652
00:21:34,000 --> 00:21:36,000
Transformer跑起来很快

653
00:21:36,000 --> 00:21:37,000
所以你发现Transformer

654
00:21:37,000 --> 00:21:38,000
这个东西特别好用啊

655
00:21:39,000 --> 00:21:41,000
所以就算你跑卷机

656
00:21:41,000 --> 00:21:43,000
你的硬件利用率是30%

657
00:21:43,000 --> 00:21:44,000
但是你跑Transformer

658
00:21:44,000 --> 00:21:47,000
你的利用率可以到60% 70%

659
00:21:47,000 --> 00:21:48,000
那就行了

660
00:21:48,000 --> 00:21:50,000
那就你便宜个10倍嘛

661
00:21:50,000 --> 00:21:51,000
你比他慢两倍嘛

662
00:21:51,000 --> 00:21:53,000
最后一块还能够快

663
00:21:53,000 --> 00:21:54,000
还能够省5倍呢

664
00:21:54,000 --> 00:21:55,000
那就那就行了呀

665
00:21:56,000 --> 00:21:58,000
所以就是说

666
00:21:59,000 --> 00:22:01,000
你很难说你觉得硬件会怎么

667
00:22:01,000 --> 00:22:02,000
Workload怎么变

668
00:22:02,000 --> 00:22:03,000
Workload它的变化

669
00:22:03,000 --> 00:22:05,000
肯定是离不开硬件的

670
00:22:05,000 --> 00:22:06,000
首先说

671
00:22:06,000 --> 00:22:07,000
就是说你得猜准的是

672
00:22:07,000 --> 00:22:09,000
整个硬件是怎么变的

673
00:22:09,000 --> 00:22:10,000
就你不能设计一个

674
00:22:10,000 --> 00:22:12,000
特别全新的硬件出来

675
00:22:12,000 --> 00:22:14,000
如果你的任务没有跟着变的话

676
00:22:14,000 --> 00:22:15,000
你就很麻烦

677
00:22:15,000 --> 00:22:17,000
但是你如果猜准了这个方向

678
00:22:17,000 --> 00:22:18,000
就是说你反正你的Workload

679
00:22:18,000 --> 00:22:20,000
你再变也离不开硬件知识

680
00:22:21,000 --> 00:22:22,000
你出来你得

681
00:22:22,000 --> 00:22:24,000
那些研究人员得跑出来吧

682
00:22:24,000 --> 00:22:26,000
他得用现在的硬件跑出来

683
00:22:26,000 --> 00:22:28,000
就是说假设你的TPU

684
00:22:29,000 --> 00:22:30,000
未来用的越来越多

685
00:22:30,000 --> 00:22:32,000
像顾问还是主要自己用啊

686
00:22:32,000 --> 00:22:33,000
在云上我

687
00:22:33,000 --> 00:22:35,000
我真不知道云上多少人用TPU

688
00:22:35,000 --> 00:22:37,000
但是如果TPU这种架构

689
00:22:37,000 --> 00:22:38,000
在云上用的越来越多

690
00:22:38,000 --> 00:22:40,000
那么别的厂家

691
00:22:40,000 --> 00:22:42,000
也是慢慢的靠

692
00:22:42,000 --> 00:22:44,000
靠这个往这边靠的话

693
00:22:44,000 --> 00:22:46,000
其实你是不要太担心

694
00:22:46,000 --> 00:22:47,000
任务会发生变化的

695
00:22:47,000 --> 00:22:50,000
因为你不管怎么样

696
00:22:50,000 --> 00:22:52,000
你的任务要么在GPU能跑

697
00:22:52,000 --> 00:22:53,000
要么在TPU能跑

698
00:22:53,000 --> 00:22:54,000
你在别的地方能跑

699
00:22:54,000 --> 00:22:55,000
也意义不大

700
00:22:55,000 --> 00:22:57,000
现在当然当然是说

701
00:22:57,000 --> 00:23:00,000
所以硬件和这个东西是一定是

702
00:23:00,000 --> 00:23:01,000
硬件是一定要生态圈的

703
00:23:01,000 --> 00:23:03,000
生态是包括了你的开发生态

704
00:23:03,000 --> 00:23:05,000
和你的研究人员的生态

705
00:23:06,000 --> 00:23:09,000
OK所以这不是一个那么简单说

706
00:23:09,000 --> 00:23:11,000
你觉得未来几年会怎么变

707
00:23:11,000 --> 00:23:14,000
它其实是一个很复杂的关系在里面

708
00:23:17,000 --> 00:23:19,000
对risk5的硬件

709
00:23:19,000 --> 00:23:21,000
比如CPU GPU AC怎么看

710
00:23:24,000 --> 00:23:25,000
就目前来看

711
00:23:26,000 --> 00:23:28,000
就risk5这个事情

712
00:23:29,000 --> 00:23:30,000
就要更大普及一下

713
00:23:30,000 --> 00:23:32,000
risk5你可认为是一个

714
00:23:32,000 --> 00:23:34,000
开源的一个指令集

715
00:23:34,000 --> 00:23:36,000
那就是一个

716
00:23:37,000 --> 00:23:39,000
就硬件它比较重要是一个指令集

717
00:23:39,000 --> 00:23:41,000
就我定好了指令集之后

718
00:23:41,000 --> 00:23:42,000
编译器就能够就说

719
00:23:42,000 --> 00:23:44,000
他就你可认为指令集就是一个

720
00:23:45,000 --> 00:23:47,000
一个一个一个标准吧

721
00:23:47,000 --> 00:23:49,000
就我定好指令集之后

722
00:23:49,000 --> 00:23:51,000
编译器那边就支持这个指令集

723
00:23:51,000 --> 00:23:53,000
那么文件厂就把这个东西支持好

724
00:23:53,000 --> 00:23:55,000
那编译器要直接接过来能用

725
00:23:55,000 --> 00:23:58,000
所以就是说risk5是一种指令集

726
00:23:58,000 --> 00:24:00,000
ARM的另外一种intel

727
00:24:00,000 --> 00:24:01,000
是自己的指令集

728
00:24:01,000 --> 00:24:03,000
AMD也是自己指令集

729
00:24:03,000 --> 00:24:07,000
所以目前来说risk5在慢慢的兴起

730
00:24:07,000 --> 00:24:08,000
但是目前来说

731
00:24:09,000 --> 00:24:12,000
就跟ARM能够去拼intel和AMD

732
00:24:12,000 --> 00:24:17,000
是因为ARM在允许你硬件厂商来做定制

733
00:24:17,000 --> 00:24:18,000
能够做那种东西

734
00:24:18,000 --> 00:24:20,000
做成你想要的东西给定制化

735
00:24:21,000 --> 00:24:22,000
那risk5呢跟ARM

736
00:24:22,000 --> 00:24:24,000
它其实跟ARM在拼

737
00:24:24,000 --> 00:24:26,000
但是它的优势是什么

738
00:24:26,000 --> 00:24:27,000
它说我不要受险费

739
00:24:27,000 --> 00:24:30,000
就你这直接用就ARM是说

740
00:24:30,000 --> 00:24:31,000
你得你用我的

741
00:24:31,000 --> 00:24:32,000
你留我的片

742
00:24:32,000 --> 00:24:34,000
你得每个芯片都付我几分钱

743
00:24:34,000 --> 00:24:35,000
所以这是有成本的

744
00:24:35,000 --> 00:24:37,000
就对于硬件厂商来讲

745
00:24:37,000 --> 00:24:38,000
你本来利润就不高

746
00:24:38,000 --> 00:24:40,000
我还得付点钱就很麻烦

747
00:24:40,000 --> 00:24:42,000
risk5就是说你不要付钱了

748
00:24:42,000 --> 00:24:44,000
或者你就给我捐点钱吧

749
00:24:44,000 --> 00:24:45,000
就这么搞

750
00:24:45,000 --> 00:24:46,000
所以呢就是说

751
00:24:46,000 --> 00:24:49,000
所以现在risk5在用在什么地方

752
00:24:49,000 --> 00:24:51,000
用在很便宜的芯片上

753
00:24:51,000 --> 00:24:54,000
我一个芯片可能成本就几毛钱的成本的话

754
00:24:54,000 --> 00:24:56,000
我说我还要给ARM付个钱

755
00:24:56,000 --> 00:24:57,000
那我就花不来了

756
00:24:57,000 --> 00:24:58,000
我用risk5的话

757
00:24:58,000 --> 00:25:00,000
那我就先不用付钱

758
00:25:00,000 --> 00:25:02,000
那我就是成本就省下来了

759
00:25:02,000 --> 00:25:08,000
而且所以说risk5现在主要还是用在比较低端的低功更小的芯片上

760
00:25:08,000 --> 00:25:09,000
就手机的芯片也很大了

761
00:25:09,000 --> 00:25:11,000
现在手机的SOC已经很大了

762
00:25:11,000 --> 00:25:12,000
手机芯片几百

763
00:25:12,000 --> 00:25:15,000
可能一百美金一个几十美金个了

764
00:25:15,000 --> 00:25:18,000
risk5用在比如说几毛钱的地方

765
00:25:18,000 --> 00:25:21,000
所以就说risk5主要还是在这一块在发力

766
00:25:21,000 --> 00:25:24,000
就说因为它比它的不足

767
00:25:24,000 --> 00:25:27,000
是说它它的整个生态不够好

768
00:25:27,000 --> 00:25:28,000
它整个开发工具啊

769
00:25:28,000 --> 00:25:29,000
就编辑器啊

770
00:25:29,000 --> 00:25:31,000
就上面的应用都不够好

771
00:25:31,000 --> 00:25:34,000
但是它的优势说它不用社群费

772
00:25:34,000 --> 00:25:36,000
它成本低一点

773
00:25:36,000 --> 00:25:37,000
啊

774
00:25:37,000 --> 00:25:39,000
所以这个就是说啊

775
00:25:39,000 --> 00:25:44,000
所以就是说你的那就是说你打的是价格战价格战的话

776
00:25:44,000 --> 00:25:48,000
那就是先低低成本的硬件先上

777
00:25:48,000 --> 00:25:49,000
这但是你反过来讲

778
00:25:49,000 --> 00:25:51,000
你无法说他未来会怎么样啊

779
00:25:51,000 --> 00:25:54,000
因为未来就是说你on是怎么反攻的

780
00:25:54,000 --> 00:25:57,000
on是怎么打桌面和打打server的

781
00:25:58,000 --> 00:26:02,000
就是手机厂商首先学会了怎么用on之后就苹果

782
00:26:02,000 --> 00:26:04,000
比如说学会怎么用on之后

783
00:26:04,000 --> 00:26:08,000
而且on因为生态圈满那么多人都会做on之后

784
00:26:08,000 --> 00:26:09,000
这些人说苹果说哎

785
00:26:09,000 --> 00:26:10,000
我要试一下桌面吧

786
00:26:10,000 --> 00:26:11,000
我手机越来越强

787
00:26:11,000 --> 00:26:13,000
那我干脆桌面也能做了

788
00:26:13,000 --> 00:26:15,000
那些另外一些我们的公司的人啊

789
00:26:15,000 --> 00:26:16,000
用on芯片的人

790
00:26:16,000 --> 00:26:19,000
然后啊

791
00:26:19,000 --> 00:26:22,000
换公司换去大公司换去云公司啊

792
00:26:22,000 --> 00:26:23,000
你说哎我找几个做on的人

793
00:26:23,000 --> 00:26:26,000
我们来看一下能不能自己做一个server芯片

794
00:26:26,000 --> 00:26:28,000
啪啪啪也做出来了

795
00:26:28,000 --> 00:26:30,000
可是就都是一个生态的过程

796
00:26:30,000 --> 00:26:32,000
他有很多理由做一个事情

797
00:26:32,000 --> 00:26:34,000
risk5说不定可以干

798
00:26:34,000 --> 00:26:36,000
就是首先在那些很那些啊

799
00:26:36,000 --> 00:26:39,000
低功耗的比如说智能家居的上面做好

800
00:26:39,000 --> 00:26:41,000
做好之后培养了一大堆人

801
00:26:41,000 --> 00:26:43,000
工具店也慢慢的起来了之后

802
00:26:43,000 --> 00:26:44,000
大家可以试一下

803
00:26:44,000 --> 00:26:45,000
哎

804
00:26:45,000 --> 00:26:46,000
我发现我买on

805
00:26:46,000 --> 00:26:47,000
买core可能芯片

806
00:26:47,000 --> 00:26:50,000
就小米说我买芯片可能要啊

807
00:26:50,000 --> 00:26:51,000
人家我都是用最新的芯片

808
00:26:51,000 --> 00:26:52,000
但是我啊

809
00:26:52,000 --> 00:26:54,000
我本来就是利润不高

810
00:26:54,000 --> 00:26:57,000
我说哎那那那我要不要试试risk5

811
00:26:57,000 --> 00:26:59,000
是不是能试着做一做

812
00:26:59,000 --> 00:27:01,000
找几个人看一看能不能做

813
00:27:01,000 --> 00:27:02,000
就是慢慢的往上吃

814
00:27:02,000 --> 00:27:06,000
如果你risk5哪一天能够把手机做了

815
00:27:06,000 --> 00:27:09,000
然后说不定你可以做车载芯片

816
00:27:09,000 --> 00:27:10,000
做啊PC芯片

817
00:27:10,000 --> 00:27:11,000
做那个芯片

818
00:27:11,000 --> 00:27:13,000
但是是一个漫长的过程

819
00:27:13,000 --> 00:27:16,000
也是一个很多年的迭代啊

820
00:27:16,000 --> 00:27:17,000
所以啊

821
00:27:17,000 --> 00:27:18,000
我觉得大家可以关注

822
00:27:18,000 --> 00:27:20,000
但是很难说预测

823
00:27:20,000 --> 00:27:22,000
我觉得预测的事情太难了

824
00:27:25,000 --> 00:27:31,000
问题11就Apple的CPU也有AI的计算加速功能

825
00:27:31,000 --> 00:27:33,000
是不是不属于专用芯片了

826
00:27:33,000 --> 00:27:34,000
请问这个怎么实现的

827
00:27:34,000 --> 00:27:39,000
他其实Apple里面是有m1芯片里面是有一个CPU

828
00:27:39,000 --> 00:27:40,000
有一个GPU

829
00:27:40,000 --> 00:27:42,000
现在你八核CPU八核GPU

830
00:27:42,000 --> 00:27:44,000
然后他有一个啊

831
00:27:44,000 --> 00:27:47,000
就说应该就NPU

832
00:27:47,000 --> 00:27:48,000
就neural engine吧

833
00:27:48,000 --> 00:27:53,000
那是个ASIC就m1里面有一大块是做一个很大的ASIC

834
00:27:53,000 --> 00:27:55,000
去他那个东西就是个ASIC

835
00:27:55,000 --> 00:27:56,000
具体是怎么样子

836
00:27:56,000 --> 00:27:58,000
反正不知道啊

837
00:27:58,000 --> 00:28:00,000
就是苹果也不会去硬件公司啊

838
00:28:00,000 --> 00:28:01,000
对保密性做的特别好

839
00:28:01,000 --> 00:28:03,000
他也不会去讲那个东西

840
00:28:03,000 --> 00:28:04,000
所以啊

841
00:28:04,000 --> 00:28:07,000
苹果m1里面是有个具有个挺大的ASIC在里面的

842
00:28:07,000 --> 00:28:09,000
他确实是属于专用芯片

843
00:28:09,000 --> 00:28:10,000
而且用他的话

844
00:28:10,000 --> 00:28:13,000
你只能通过他那个苹果那个叫什么来着

845
00:28:13,000 --> 00:28:14,000
那个那个

846
00:28:15,000 --> 00:28:18,000
我一下忘了那个SDK叫做苹果的

847
00:28:18,000 --> 00:28:19,000
他做inference

848
00:28:19,000 --> 00:28:20,000
他只能做推理

849
00:28:20,000 --> 00:28:22,000
但是他自己有一套

850
00:28:22,000 --> 00:28:24,000
我一下就忘了那个

851
00:28:24,000 --> 00:28:25,000
他自己有一套东西

852
00:28:25,000 --> 00:28:28,000
就说你可以把转成他的格式可以用

853
00:28:28,000 --> 00:28:30,000
但是你开发几乎是不能开发的

854
00:28:32,000 --> 00:28:35,000
问题12TPU在边缘端有实现吗

855
00:28:35,000 --> 00:28:37,000
有的啊

856
00:28:38,000 --> 00:28:41,000
TPU在边缘端确实是有的

857
00:28:41,000 --> 00:28:42,000
叫做HTPU

858
00:28:42,000 --> 00:28:44,000
就是你可以去搜一下这个东西啊

859
00:28:44,000 --> 00:28:46,000
他有一个小的USB接口

860
00:28:46,000 --> 00:28:48,000
可以插到你的Raspberry Pi上面

861
00:28:48,000 --> 00:28:50,000
我没用过这个东西啊

862
00:28:50,000 --> 00:28:52,000
我也不知道卖的怎么样

863
00:28:52,000 --> 00:28:54,000
有兴趣可以去看一下

864
00:28:54,000 --> 00:28:55,000
但是在边缘端啊

865
00:28:55,000 --> 00:28:57,000
我觉得TPU他的主要的优势

866
00:28:57,000 --> 00:28:59,000
还是说我跟TESTV集成比较好

867
00:28:59,000 --> 00:29:01,000
但是反过来讲在性能上

868
00:29:01,000 --> 00:29:03,000
我倒觉得

869
00:29:03,000 --> 00:29:08,000
因为A级的那一块东西造起来真的成本很低

870
00:29:08,000 --> 00:29:09,000
很多人都能做

871
00:29:09,000 --> 00:29:11,000
你想基本上手机厂商

872
00:29:11,000 --> 00:29:14,000
你不记得前几年大家都说自己有自己的ASIC

873
00:29:14,000 --> 00:29:17,000
所以实际上他们的ASIC就是个DSP了

874
00:29:17,000 --> 00:29:18,000
就是你看啊

875
00:29:18,000 --> 00:29:21,000
就很多手机厂商或者一些厂商

876
00:29:21,000 --> 00:29:23,000
说我有自己的ASIC

877
00:29:23,000 --> 00:29:25,000
其实就是个DSP

878
00:29:25,000 --> 00:29:28,000
他都不是那种我们今天讲的TPU那种类型

879
00:29:28,000 --> 00:29:30,000
他就是个DSP

880
00:29:33,000 --> 00:29:35,000
我觉得Rocketchip就是个DSP啊

881
00:29:38,000 --> 00:29:41,000
反正基本上所有的那些做芯片厂商啊

882
00:29:41,000 --> 00:29:42,000
三星也好啊

883
00:29:42,000 --> 00:29:46,000
啊那个台湾那个谁谁谁

884
00:29:47,000 --> 00:29:49,000
不是台湾那个谁来着

885
00:29:49,000 --> 00:29:50,000
可能是Qualcomm啊

886
00:29:50,000 --> 00:29:52,000
其实我觉得他们就是个DSP

887
00:29:52,000 --> 00:29:54,000
所以他们的那些NPU

888
00:29:57,000 --> 00:29:59,000
就是说你说谁主流呢

889
00:30:00,000 --> 00:30:02,000
我觉得这个东西是说你

890
00:30:02,000 --> 00:30:05,000
你单卖NPU是卖不动的

891
00:30:05,000 --> 00:30:08,000
你一般都是NPU是带在你的整个SOC里面

892
00:30:08,000 --> 00:30:10,000
就是你整个那块

893
00:30:10,000 --> 00:30:12,000
那个Rocketchip就是那个

894
00:30:12,000 --> 00:30:14,000
就手机那个芯片里面

895
00:30:14,000 --> 00:30:16,000
就是我们一开始给的那种图啊

896
00:30:17,000 --> 00:30:18,000
里面里面什么都有

897
00:30:18,000 --> 00:30:19,000
就它是放进去的

898
00:30:19,000 --> 00:30:21,000
就你单卖其实挺难卖的

899
00:30:21,000 --> 00:30:22,000
一般是打包卖

900
00:30:22,000 --> 00:30:24,000
所以说你说啊

901
00:30:24,000 --> 00:30:26,000
谁流行很多时候你用的是三星的芯片

902
00:30:26,000 --> 00:30:28,000
还是高通的还是Rocketchip的

903
00:30:28,000 --> 00:30:30,000
还是别别的家的

904
00:30:30,000 --> 00:30:31,000
所以你用了他们家的话

905
00:30:31,000 --> 00:30:33,000
他们可能会打包卖一个芯片给你

906
00:30:33,000 --> 00:30:35,000
反正那个东西就免费给你了

907
00:30:35,000 --> 00:30:36,000
你用吧

908
00:30:36,000 --> 00:30:38,000
就可能给你就几毛钱给你了

909
00:30:38,000 --> 00:30:40,000
反正芯片造起来挺便宜的

910
00:30:40,000 --> 00:30:42,000
所以你就是就你就有什么芯片

911
00:30:42,000 --> 00:30:43,000
用什么芯片

912
00:30:43,000 --> 00:30:45,000
很多时候你不会真的去自己去买一个芯片

913
00:30:45,000 --> 00:30:48,000
这手机端不会自己买的

914
00:30:48,000 --> 00:30:51,000
车载和服务器端当然不一样了

915
00:30:51,000 --> 00:30:53,000
所以所谓这些

916
00:30:53,000 --> 00:30:55,000
你说的这些东西都是一些比较

917
00:30:55,000 --> 00:30:56,000
A级端的芯片

918
00:30:56,000 --> 00:30:58,000
都是你用的哪一家的

919
00:30:58,000 --> 00:31:01,000
那一个套餐自带的

920
00:31:04,000 --> 00:31:06,000
问题14

921
00:31:07,000 --> 00:31:09,000
Hormone 2.0算和Android

922
00:31:09,000 --> 00:31:11,000
iOS三组顶曆的吗

923
00:31:11,000 --> 00:31:13,000
我觉得大家比较乐观

924
00:31:13,000 --> 00:31:14,000
现在

925
00:31:15,000 --> 00:31:18,000
就目前来看是刷了一波新闻

926
00:31:18,000 --> 00:31:21,000
但是说你要跟三组顶曆呢

927
00:31:24,000 --> 00:31:26,000
我觉得我不知道

928
00:31:26,000 --> 00:31:29,000
其实我很难说怎么样或怎么样

929
00:31:29,000 --> 00:31:32,000
我希望他能三组顶三组顶曆

930
00:31:32,000 --> 00:31:36,000
但是这东西不能说你说是三组就是三组

931
00:31:36,000 --> 00:31:38,000
就是说你看开发人员多认可这个事情了

932
00:31:38,000 --> 00:31:41,000
就看大家多愿意给其他来写APP了

933
00:31:41,000 --> 00:31:44,000
反正他能支持AndroidAPP上面也没关系吧

934
00:31:47,000 --> 00:31:48,000
问题15

935
00:31:48,000 --> 00:31:50,000
你说芯片和框架有影响

936
00:31:50,000 --> 00:31:53,000
是不是以后国产芯片需要搭配国产框架

937
00:31:57,000 --> 00:31:59,000
就这个事情呢

938
00:31:59,000 --> 00:32:01,000
就是说你说自己造新

939
00:32:01,000 --> 00:32:04,000
我觉得国产这东西

940
00:32:04,000 --> 00:32:07,000
就最后你框架这东西不重要

941
00:32:07,000 --> 00:32:10,000
就是说最后是说你的开发人员在用谁

942
00:32:11,000 --> 00:32:15,000
就假设你的你所谓的人在用Pytorch的话

943
00:32:15,000 --> 00:32:17,000
那么你再做一个框架出来

944
00:32:17,000 --> 00:32:18,000
他做这些芯片

945
00:32:18,000 --> 00:32:21,000
其实是你不如跟集成到Pytorch里面

946
00:32:21,000 --> 00:32:23,000
甚至难用一点都没关系

947
00:32:24,000 --> 00:32:25,000
就是说

948
00:32:25,000 --> 00:32:29,000
我觉得你大家不用特别去关心什么框

949
00:32:29,000 --> 00:32:31,000
如果你特别是讲深度学习框架的话

950
00:32:31,000 --> 00:32:32,000
目前未来几年之内

951
00:32:32,000 --> 00:32:34,000
你不要太多关心这个事情

952
00:32:34,000 --> 00:32:36,000
为什么是因为Android之所以

953
00:32:36,000 --> 00:32:39,000
为什么自己造是因为Google把它商业化了

954
00:32:40,000 --> 00:32:41,000
就你得你用Android

955
00:32:41,000 --> 00:32:44,000
得用我公司的打包的那一套商业化的东西

956
00:32:45,000 --> 00:32:46,000
就你不付我钱

957
00:32:46,000 --> 00:32:47,000
你不认证的话

958
00:32:47,000 --> 00:32:48,000
你用不了那一套东西

959
00:32:48,000 --> 00:32:50,000
因为开源的没用

960
00:32:50,000 --> 00:32:51,000
所以就是说你

961
00:32:51,000 --> 00:32:56,000
你这种说当你的框架都是真开源的情况下

962
00:32:56,000 --> 00:32:57,000
你是不要担心的

963
00:32:57,000 --> 00:32:59,000
真开源反正就是

964
00:32:59,000 --> 00:33:01,000
你就是支持就行了嘛

965
00:33:02,000 --> 00:33:04,000
就是说你要担心的是说

966
00:33:04,000 --> 00:33:09,000
当有一天你的框架就深度学习框架变得不开源了

967
00:33:10,000 --> 00:33:11,000
就不开源

968
00:33:11,000 --> 00:33:12,000
就是说我说

969
00:33:13,000 --> 00:33:15,000
比如说Pytorch

970
00:33:15,000 --> 00:33:16,000
Facebook跑过来讲

971
00:33:16,000 --> 00:33:18,000
说你要用我的话

972
00:33:18,000 --> 00:33:19,000
你得付我钱

973
00:33:19,000 --> 00:33:20,000
然后怎么样

974
00:33:20,000 --> 00:33:22,000
就TensorFlow也是说你得付我钱怎么样

975
00:33:23,000 --> 00:33:25,000
就是说你如果是这个事情会发生的话

976
00:33:25,000 --> 00:33:26,000
那么就会有影响

977
00:33:27,000 --> 00:33:28,000
如果你是真开源的话

978
00:33:28,000 --> 00:33:29,000
我觉得问题不大

979
00:33:30,000 --> 00:33:32,000
所以这个东西就取决于说

980
00:33:32,000 --> 00:33:34,000
你这个东西商业价值有多大了

981
00:33:34,000 --> 00:33:35,000
就是说公司愿不愿意

982
00:33:35,000 --> 00:33:37,000
因为你一旦要不开源的话

983
00:33:37,000 --> 00:33:40,000
那就那就是你损失的是谁

984
00:33:40,000 --> 00:33:41,000
你损失的是你的开发者

985
00:33:41,000 --> 00:33:43,000
你开发者不信任你了

986
00:33:43,000 --> 00:33:44,000
但是呢

987
00:33:44,000 --> 00:33:47,000
假如我垄断了那就没关系了

988
00:33:48,000 --> 00:33:49,000
就是说当你有Pytorch

989
00:33:49,000 --> 00:33:53,000
TensorFlow在他们两家在打的话

990
00:33:53,000 --> 00:33:56,000
就是说当你不要有一家垄断的情况下

991
00:33:56,000 --> 00:33:58,000
你是不要关心这个问题的

992
00:33:58,000 --> 00:34:00,000
因为TensorFlow一旦说我不开源了

993
00:34:00,000 --> 00:34:01,000
我要商业化了

994
00:34:01,000 --> 00:34:02,000
那大家都去用Pytorch了

995
00:34:02,000 --> 00:34:05,000
说不定MSnet也也也也也也也

996
00:34:05,000 --> 00:34:06,000
也排到第二去了

997
00:34:06,000 --> 00:34:07,000
对吧

998
00:34:07,000 --> 00:34:08,000
所以在反过来讲

999
00:34:08,000 --> 00:34:11,000
就是说如果TensorFlow或者Pytorch

1000
00:34:11,000 --> 00:34:13,000
MSnet现在垄断的概率不大

1001
00:34:13,000 --> 00:34:15,000
我就Pytorch和TensorFlow还是有可能

1002
00:34:15,000 --> 00:34:16,000
一家打赢另外一家

1003
00:34:16,000 --> 00:34:19,000
说我垄断个60% 70%的开发者

1004
00:34:19,000 --> 00:34:21,000
那么一旦他完成这个事情的话

1005
00:34:22,000 --> 00:34:24,000
慢慢的就顾个手

1006
00:34:24,000 --> 00:34:26,000
我不要再投几百个人做TensorFlow了

1007
00:34:26,000 --> 00:34:28,000
反正大家都用Pytorch去了

1008
00:34:28,000 --> 00:34:29,000
或者Pytorch说

1009
00:34:29,000 --> 00:34:30,000
我就不要投几百个人做了

1010
00:34:30,000 --> 00:34:31,000
我都用TensorFlow去了

1011
00:34:31,000 --> 00:34:33,000
如果你发生这个事情的话

1012
00:34:33,000 --> 00:34:34,000
那么就得担心这个事情了

1013
00:34:34,000 --> 00:34:35,000
一旦我完全垄断

1014
00:34:35,000 --> 00:34:36,000
把别人都弄死了的话

1015
00:34:36,000 --> 00:34:37,000
我就可以赚钱了

1016
00:34:37,000 --> 00:34:39,000
Android不就这个事情吗

1017
00:34:39,000 --> 00:34:40,000
Android把所有

1018
00:34:40,000 --> 00:34:41,000
Windows不干了

1019
00:34:41,000 --> 00:34:42,000
所有都不干了的话

1020
00:34:42,000 --> 00:34:43,000
那我就你你没办法

1021
00:34:43,000 --> 00:34:44,000
你得用我

1022
00:34:44,000 --> 00:34:46,000
你反正iOS你用不了

1023
00:34:46,000 --> 00:34:47,000
对吧

1024
00:34:48,000 --> 00:34:49,000
OK

1025
00:34:51,000 --> 00:34:54,000
所以就是说你要关心说有一家垄断

1026
00:34:54,000 --> 00:34:57,000
而且那么一旦完成垄断的话

1027
00:34:57,000 --> 00:34:59,000
他很有可能去做商业化的运作

1028
00:34:59,000 --> 00:35:02,000
所以就导致你可能得想办法了

1029
00:35:02,000 --> 00:35:03,000
但反过来讲

1030
00:35:03,000 --> 00:35:04,000
你只要有老二

1031
00:35:04,000 --> 00:35:07,000
老二有个30% 40%的市场份额

1032
00:35:07,000 --> 00:35:09,000
你老大垄断的话

1033
00:35:09,000 --> 00:35:11,000
你丢掉30% 40%的市场份额

1034
00:35:11,000 --> 00:35:13,000
那就老二还有可能变老大

1035
00:35:13,000 --> 00:35:14,000
所以这个还是有机会的

1036
00:35:15,000 --> 00:35:18,000
所以我觉得框架这个东西挺难垄断的

1037
00:35:18,000 --> 00:35:20,000
这东西开发成本太低了

1038
00:35:20,000 --> 00:35:22,000
就是事业都能做

1039
00:35:22,000 --> 00:35:23,000
Android做起来难一些

1040
00:35:23,000 --> 00:35:25,000
他有上面那么多APP

1041
00:35:25,000 --> 00:35:26,000
框架容易很多了

1042
00:35:26,000 --> 00:35:29,000
我做一个兼容派凑取框架要多久时间

1043
00:35:29,000 --> 00:35:31,000
我觉得一个月能做出来吧

1044
00:35:31,000 --> 00:35:32,000
给我五个人

1045
00:35:32,000 --> 00:35:33,000
我一个月能做出来

1046
00:35:33,000 --> 00:35:36,000
所以我觉得只是说没必要做

1047
00:35:36,000 --> 00:35:37,000
因为人家有挺好的

1048
00:35:37,000 --> 00:35:39,000
用你做干嘛

1049
00:35:39,000 --> 00:35:40,000
OK

1050
00:35:41,000 --> 00:35:42,000
问题十六

1051
00:35:43,000 --> 00:35:47,000
两T OPS NPU能跑30FP的DeepLive V3?

1052
00:35:47,000 --> 00:35:50,000
这个问题问的我不好回答

1053
00:35:50,000 --> 00:35:51,000
就是说

1054
00:35:52,000 --> 00:35:56,000
如果你真的能达到两T OPS是能跑的

1055
00:35:57,000 --> 00:35:58,000
但是呢

1056
00:35:58,000 --> 00:36:00,000
你说我是两T

1057
00:36:01,000 --> 00:36:02,000
你真的能用多少

1058
00:36:03,000 --> 00:36:05,000
你真的在上面能跑出你的两T吗

1059
00:36:05,000 --> 00:36:08,000
这两T OPS就是说每秒钟能跑两T个

1060
00:36:08,000 --> 00:36:10,000
两T次运算

1061
00:36:10,000 --> 00:36:12,000
你实测能跑出来吗

1062
00:36:12,000 --> 00:36:15,000
你跑到你能跑个10%吗

1063
00:36:15,000 --> 00:36:17,000
如果你跑10%可能也够了

1064
00:36:17,000 --> 00:36:19,000
当然取决于你的输入有多大了

1065
00:36:19,000 --> 00:36:20,000
你输入是一个4K的话

1066
00:36:20,000 --> 00:36:21,000
当然就比较难了

1067
00:36:21,000 --> 00:36:23,000
你输入个1080P还有可能

1068
00:36:23,000 --> 00:36:24,000
所以就是说

1069
00:36:24,000 --> 00:36:26,000
我觉得你不要去看那个几T几T

1070
00:36:26,000 --> 00:36:27,000
这几T都是假的

1071
00:36:27,000 --> 00:36:29,000
我觉得目前来说

1072
00:36:29,000 --> 00:36:31,000
也就是NVIDIA在那个几T上做的比较好

1073
00:36:31,000 --> 00:36:34,000
NVIDIA说我这个是12T的

1074
00:36:34,000 --> 00:36:36,000
那你真的在跑深度学习能够跑个10T

1075
00:36:36,000 --> 00:36:37,000
是能跑出来的

1076
00:36:37,000 --> 00:36:39,000
但是那些NPU啊

1077
00:36:39,000 --> 00:36:41,000
就是说我说过

1078
00:36:41,000 --> 00:36:43,000
它的越往下走

1079
00:36:43,000 --> 00:36:44,000
越往下跑

1080
00:36:44,000 --> 00:36:46,000
它的越往下走

1081
00:36:46,000 --> 00:36:48,000
越往那儿专业化走

1082
00:36:48,000 --> 00:36:50,000
它的编译器那一段

1083
00:36:50,000 --> 00:36:52,000
开发那一段就越弱

1084
00:36:52,000 --> 00:36:54,000
我号称我硬件能跑两T

1085
00:36:54,000 --> 00:36:56,000
但是编译器能够真的跑两T

1086
00:36:56,000 --> 00:36:58,000
有一个漫长的迭代过程

1087
00:36:58,000 --> 00:36:59,000
取决于你的

1088
00:36:59,000 --> 00:37:01,000
真的编译器开发有多强了

1089
00:37:01,000 --> 00:37:02,000
很有可能你是跑不到的

1090
00:37:02,000 --> 00:37:03,000
就刚出来你是跑不到的

1091
00:37:03,000 --> 00:37:05,000
就慢慢的出来

1092
00:37:05,000 --> 00:37:06,000
所以就是说

1093
00:37:06,000 --> 00:37:08,000
你很难说

1094
00:37:08,000 --> 00:37:11,000
一定能够跑

1095
00:37:11,000 --> 00:37:12,000
就是说你得实测一下

1096
00:37:12,000 --> 00:37:15,000
而且真的取决于硬件编译器

1097
00:37:15,000 --> 00:37:16,000
都很相关

