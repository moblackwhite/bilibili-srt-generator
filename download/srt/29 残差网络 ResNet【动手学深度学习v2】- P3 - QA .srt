1
00:00:00,000 --> 00:00:03,439
好 我们来看一下resnet的实现

2
00:00:03,439 --> 00:00:05,839
我们首先来看我们残插快

3
00:00:05,839 --> 00:00:08,000
这个reset block是怎么设计的

4
00:00:09,000 --> 00:00:11,200
它的核心也就在这个地方了

5
00:00:12,040 --> 00:00:15,599
首先看到是说我的输入要告诉什么

6
00:00:15,599 --> 00:00:17,640
就是说我的输入的通道数

7
00:00:17,640 --> 00:00:19,280
输出的通道数

8
00:00:19,280 --> 00:00:22,640
然后这里说你要不要用1x1的卷积层

9
00:00:23,600 --> 00:00:24,920
然后你要的话

10
00:00:24,920 --> 00:00:28,160
那就是和你要的strategy

11
00:00:30,399 --> 00:00:33,399
然后首先你有我们知道那里面有两个卷积层

12
00:00:33,600 --> 00:00:35,320
第一个卷积层 第二个卷积层

13
00:00:35,799 --> 00:00:36,840
第一个卷积层的话

14
00:00:36,840 --> 00:00:38,759
你可以指定strategy

15
00:00:39,920 --> 00:00:44,079
第二个就是strategy就是不变了

16
00:00:44,359 --> 00:00:45,039
然后你的padding

17
00:00:45,039 --> 00:00:46,600
因为你的kernel数都是等于

18
00:00:46,600 --> 00:00:48,840
我就把这个回车回下来

19
00:00:49,240 --> 00:00:50,280
kernel数等于等于3

20
00:00:50,280 --> 00:00:51,039
你padding等于1

21
00:00:51,039 --> 00:00:52,200
就是高宽不变

22
00:00:52,760 --> 00:00:54,640
就第一个可以指定strategy

23
00:00:54,640 --> 00:00:55,519
你可以等于2

24
00:00:55,840 --> 00:00:56,760
剩下的就是说

25
00:00:56,760 --> 00:00:58,760
这个是不会让你指定strategy

26
00:00:58,759 --> 00:00:59,960
他就得more than 1了

27
00:01:01,399 --> 00:01:03,719
如果你要使用1x1的卷积层的话

28
00:01:03,719 --> 00:01:04,920
我会再构造一个

29
00:01:04,920 --> 00:01:06,599
conc3出来

30
00:01:06,840 --> 00:01:07,959
它就是一个

31
00:01:09,039 --> 00:01:11,159
就它会把你的input的channel

32
00:01:11,159 --> 00:01:12,599
变成你的output的channel

33
00:01:12,599 --> 00:01:15,400
就如果你这两个东西不一样的话

34
00:01:15,560 --> 00:01:16,879
所以这个东西是必须的

35
00:01:17,280 --> 00:01:19,799
所以它把你input的channel数

36
00:01:19,799 --> 00:01:21,359
给变换到output的channel数

37
00:01:21,519 --> 00:01:22,239
kernel数等于1

38
00:01:22,239 --> 00:01:23,680
strategy也会是

39
00:01:23,840 --> 00:01:25,479
等于你要的strategy

40
00:01:25,479 --> 00:01:27,920
这样子你能够match到你的高宽

41
00:01:29,760 --> 00:01:31,640
当然我有两个

42
00:01:31,840 --> 00:01:32,960
batch normalization

43
00:01:32,960 --> 00:01:34,200
我还有一个relu

44
00:01:34,200 --> 00:01:35,719
relu这一块用了inplace

45
00:01:35,719 --> 00:01:37,480
inplace就给你省一点内存

46
00:01:39,240 --> 00:01:40,640
所以可以看到fold的函数

47
00:01:40,640 --> 00:01:42,080
fold的函数就是说

48
00:01:42,200 --> 00:01:43,520
x进来

49
00:01:44,320 --> 00:01:45,600
丢到第一个卷积层

50
00:01:46,240 --> 00:01:47,439
第一个batch normalization

51
00:01:47,800 --> 00:01:48,520
relu

52
00:01:49,280 --> 00:01:51,960
然后再丢到第二个卷积层

53
00:01:52,480 --> 00:01:54,719
再丢到第二个batch normalization

54
00:01:54,719 --> 00:01:59,359
然后假设你要用

55
00:01:59,359 --> 00:02:03,439
假设你这用home要用3的话

56
00:02:03,439 --> 00:02:04,439
你就是丢进去

57
00:02:04,560 --> 00:02:06,760
这里我觉得我应该漏了一个relu

58
00:02:06,760 --> 00:02:08,199
就是说你需要在

59
00:02:09,079 --> 00:02:11,520
在x加一个relu在这个地方

60
00:02:11,759 --> 00:02:12,560
我觉得

61
00:02:13,240 --> 00:02:15,000
我可以回去再仔细看一下

62
00:02:15,000 --> 00:02:16,759
是不是这里是需要一个relu

63
00:02:18,960 --> 00:02:19,400
OK

64
00:02:19,759 --> 00:02:21,159
然后你在

65
00:02:23,319 --> 00:02:23,960
sorry

66
00:02:24,040 --> 00:02:24,840
这里是不需要的

67
00:02:24,840 --> 00:02:25,640
这不需要的

68
00:02:26,920 --> 00:02:27,320
注意一下

69
00:02:27,520 --> 00:02:28,760
这东西我搞错了

70
00:02:30,240 --> 00:02:32,000
这个东西是作用在x上面

71
00:02:32,000 --> 00:02:33,280
不是作用在y上面

72
00:02:34,319 --> 00:02:36,080
所以说如果你有第三层的话

73
00:02:36,080 --> 00:02:39,080
就是对于x直接对输入

74
00:02:39,080 --> 00:02:40,400
直接作用

75
00:02:40,640 --> 00:02:41,800
一层一的卷积得到

76
00:02:41,800 --> 00:02:42,719
改写输入

77
00:02:43,680 --> 00:02:46,680
然后接下来就是说把你x

78
00:02:46,840 --> 00:02:48,080
加上你的y

79
00:02:49,159 --> 00:02:50,080
就连在一起

80
00:02:50,360 --> 00:02:52,080
最后再做一个relu在这里

81
00:02:52,080 --> 00:02:53,040
因为我们这里有个relu

82
00:02:53,039 --> 00:02:54,479
所以我们这里不需要再relu了

83
00:02:55,479 --> 00:02:55,840
OK

84
00:02:55,840 --> 00:02:59,319
这个就是实现了我们刚刚怎么连过来的过程

85
00:03:00,159 --> 00:03:01,280
就是这个for的函数

86
00:03:02,239 --> 00:03:02,719
OK

87
00:03:04,399 --> 00:03:06,919
那么然后就是说可以看一下会长什么样子

88
00:03:07,159 --> 00:03:08,479
就假设我的

89
00:03:08,519 --> 00:03:10,799
我假设stripe是不变的情况下

90
00:03:10,919 --> 00:03:12,399
我会发现我的

91
00:03:12,399 --> 00:03:15,799
假设我给的x是一个4366的东西进来的话

92
00:03:15,879 --> 00:03:19,000
我生成一个residual block的话

93
00:03:19,039 --> 00:03:22,079
那么我的输入也是不变的

94
00:03:22,160 --> 00:03:23,360
也是4366

95
00:03:24,280 --> 00:03:24,640
对吧

96
00:03:24,640 --> 00:03:27,600
就高宽和通道数都没有发生变化

97
00:03:29,560 --> 00:03:30,920
如果我要增加通道数

98
00:03:31,040 --> 00:03:33,439
通常我会说我stripe等于2

99
00:03:33,720 --> 00:03:36,680
通常我会把我的通道数给你加倍

100
00:03:37,080 --> 00:03:39,600
这里你也需要使用一层一的卷积

101
00:03:40,320 --> 00:03:43,040
那么就是说刚刚我是4366

102
00:03:43,040 --> 00:03:44,320
那么我们做完这之后

103
00:03:44,320 --> 00:03:46,280
就是通道数从3变成6

104
00:03:46,320 --> 00:03:48,040
然后高宽从6变成3

105
00:03:48,640 --> 00:03:49,960
就是这常见的

106
00:03:50,000 --> 00:03:51,120
我们在设计的时候

107
00:03:51,159 --> 00:03:53,200
高宽减半的同时把通道数加倍

108
00:03:54,200 --> 00:03:56,960
就是怎么调用residual block来实现这个功能

109
00:03:58,200 --> 00:03:59,360
当你有了这些东西之后

110
00:03:59,360 --> 00:04:02,360
你就可以实现一个residual block了

111
00:04:03,000 --> 00:04:04,879
residual block就是说

112
00:04:04,960 --> 00:04:06,680
第一个就是说你第一个stage

113
00:04:06,680 --> 00:04:07,800
你就是比较好实现

114
00:04:07,800 --> 00:04:08,640
就是说你也知道

115
00:04:08,640 --> 00:04:10,600
就是一个7乘1的东西

116
00:04:10,600 --> 00:04:11,760
然后加一个batch long

117
00:04:11,760 --> 00:04:12,520
加一个relu

118
00:04:12,520 --> 00:04:13,520
然后一个max pooling

119
00:04:13,520 --> 00:04:16,199
就跟我们之前的google net的b1实现是一样的

120
00:04:16,199 --> 00:04:16,759
这一块

121
00:04:17,319 --> 00:04:19,920
那么接下来都是一些residual block

122
00:04:20,519 --> 00:04:21,719
看一下就是说

123
00:04:22,599 --> 00:04:24,599
你一个block要定一个说

124
00:04:25,919 --> 00:04:29,319
你是你的输入的channel是多少

125
00:04:29,599 --> 00:04:32,839
然后你的输出的channel是多少

126
00:04:32,879 --> 00:04:35,959
然后你要多少个这样子的residual

127
00:04:35,959 --> 00:04:37,399
那种块

128
00:04:38,039 --> 00:04:40,519
就之前我们定的小的小block

129
00:04:40,639 --> 00:04:41,719
这个是一个大block

130
00:04:41,759 --> 00:04:43,359
那么这是一个stage

131
00:04:43,439 --> 00:04:47,000
就是一个stage在这个地方

132
00:04:47,359 --> 00:04:48,879
然后说你是不是第一个

133
00:04:48,879 --> 00:04:50,439
我们会特判一下第一个

134
00:04:50,560 --> 00:04:52,279
我们看一下为什么特判第一个

135
00:04:54,040 --> 00:04:56,279
首先说你的我们怎么实现

136
00:04:56,360 --> 00:04:58,439
就是说你有number of residual的话

137
00:04:58,480 --> 00:05:00,759
那就是说你就是够到n个

138
00:05:01,680 --> 00:05:03,120
就如果它等于0

139
00:05:03,159 --> 00:05:05,079
而且不是first block的话

140
00:05:05,120 --> 00:05:06,800
那么我就是用

141
00:05:07,600 --> 00:05:08,439
strat等于2

142
00:05:08,480 --> 00:05:10,000
就是我要把高宽减半

143
00:05:10,360 --> 00:05:12,519
但如果你这个stage是第一个的话

144
00:05:12,519 --> 00:05:13,719
就是是b2的话

145
00:05:13,719 --> 00:05:14,560
我就不减半了

146
00:05:14,600 --> 00:05:15,319
因为为什么

147
00:05:15,319 --> 00:05:17,360
是因为前面的减半已经很多了

148
00:05:17,360 --> 00:05:19,160
就前面我们做了两次减半

149
00:05:19,199 --> 00:05:21,920
所以它的b2这个stage是不减半的

150
00:05:22,439 --> 00:05:24,199
但后面的话都会说

151
00:05:24,240 --> 00:05:26,520
我的这一串的residual里面

152
00:05:26,560 --> 00:05:28,520
第一个是会给你高宽减半

153
00:05:28,759 --> 00:05:30,439
剩下的就说你就不减半了

154
00:05:30,439 --> 00:05:33,080
就是剩下也不会对channel数做变化

155
00:05:34,600 --> 00:05:35,879
所以接下来我们可以构造它

156
00:05:35,879 --> 00:05:37,080
构造它怎么构造

157
00:05:37,199 --> 00:05:37,680
可以看一下

158
00:05:37,680 --> 00:05:39,800
就是说你的第2个stage

159
00:05:39,879 --> 00:05:40,960
那就是

160
00:05:42,439 --> 00:05:43,639
通道数没有变

161
00:05:43,639 --> 00:05:45,400
因为我高宽也没有变

162
00:05:45,520 --> 00:05:47,320
然后我是用了两个这样子

163
00:05:47,320 --> 00:05:48,280
重复了两个这样子

164
00:05:48,280 --> 00:05:49,080
前面的block

165
00:05:49,720 --> 00:05:51,680
然后第三个的话

166
00:05:51,680 --> 00:05:52,560
这是我们构造的

167
00:05:52,560 --> 00:05:53,520
应该是residual

168
00:05:54,440 --> 00:05:55,680
这个是18

169
00:05:55,800 --> 00:05:57,360
可能是或者34

170
00:05:57,600 --> 00:05:58,520
可能是18

171
00:05:59,120 --> 00:06:00,960
然后第3个stage也是重复

172
00:06:00,960 --> 00:06:02,480
两个这样子的block

173
00:06:02,640 --> 00:06:05,400
然后通道数就是加倍

174
00:06:05,680 --> 00:06:07,040
后面一样的通道数加倍

175
00:06:07,040 --> 00:06:08,280
高宽减半通道数加倍

176
00:06:08,280 --> 00:06:08,800
高宽减半

177
00:06:08,800 --> 00:06:10,040
最后变成512

178
00:06:10,920 --> 00:06:12,840
然后最后就加入了一个

179
00:06:13,640 --> 00:06:15,520
全局的average pooling

180
00:06:15,520 --> 00:06:16,320
flatter

181
00:06:16,320 --> 00:06:17,480
然后再linear

182
00:06:17,760 --> 00:06:20,080
就linear我们这输出是512位

183
00:06:20,080 --> 00:06:21,840
我们之前是1.24位

184
00:06:22,000 --> 00:06:23,560
这里降到了512位

185
00:06:23,960 --> 00:06:25,000
最后我的

186
00:06:25,080 --> 00:06:26,040
再去等于10

187
00:06:26,080 --> 00:06:28,200
就是我的数据的类别号

188
00:06:29,200 --> 00:06:29,640
OK

189
00:06:29,640 --> 00:06:31,400
所以我们可以看一下

190
00:06:31,400 --> 00:06:32,120
它的

191
00:06:32,400 --> 00:06:34,600
整个网络对我的输入的变化

192
00:06:36,240 --> 00:06:38,160
我们还是把摄像头关掉

193
00:06:38,960 --> 00:06:40,280
可以看到是说

194
00:06:40,560 --> 00:06:42,800
假设是24×24的话

195
00:06:42,840 --> 00:06:45,040
那么第一个出来的话

196
00:06:45,240 --> 00:06:46,480
就第一个stage的话

197
00:06:46,480 --> 00:06:47,000
那是

198
00:06:47,440 --> 00:06:49,000
就是直接除4了

199
00:06:49,000 --> 00:06:49,440
对吧

200
00:06:49,440 --> 00:06:51,480
因为我们做了一个strategy

201
00:06:51,480 --> 00:06:52,440
等于2的conf

202
00:06:52,440 --> 00:06:53,720
然后一个max pooling

203
00:06:54,160 --> 00:06:55,880
然后通道数变成了64

204
00:06:56,960 --> 00:06:59,520
那第2个就是你的recession block了

205
00:06:59,800 --> 00:07:01,400
那个东西因为我们特判了

206
00:07:01,400 --> 00:07:03,080
所以我们没有对高宽减半

207
00:07:03,080 --> 00:07:03,800
也没有

208
00:07:03,920 --> 00:07:05,800
增对通道数进行变化

209
00:07:06,680 --> 00:07:09,960
那么后面基本上就是说通道数加倍

210
00:07:10,080 --> 00:07:11,480
然后高宽减半

211
00:07:11,480 --> 00:07:13,840
一直加倍到最后

212
00:07:14,040 --> 00:07:15,319
然后进入了你的

213
00:07:15,360 --> 00:07:17,759
Global average pooling

214
00:07:17,920 --> 00:07:19,879
就是把7×7变成1×1

215
00:07:20,160 --> 00:07:22,280
然后最后到了一个信息层

216
00:07:23,160 --> 00:07:23,759
OK

217
00:07:23,920 --> 00:07:25,560
所以这就是rest net

218
00:07:25,920 --> 00:07:26,920
所以基本上可以看到

219
00:07:26,920 --> 00:07:27,960
是说还是挺简单

220
00:07:27,960 --> 00:07:28,400
对吧

221
00:07:28,560 --> 00:07:30,840
就是说前面第一个就是一个

222
00:07:31,200 --> 00:07:32,520
大家都长一样的7×7

223
00:07:32,520 --> 00:07:33,600
加上一个max pooling

224
00:07:33,840 --> 00:07:35,160
接下来就是说

225
00:07:35,319 --> 00:07:36,240
一个block

226
00:07:36,600 --> 00:07:37,480
高宽不变

227
00:07:37,480 --> 00:07:38,120
剩下的

228
00:07:38,879 --> 00:07:40,160
剩下的就是说

229
00:07:40,160 --> 00:07:42,320
这是剩下的三个都是会让你

230
00:07:42,600 --> 00:07:43,640
通道数翻倍

231
00:07:43,640 --> 00:07:44,360
高宽

232
00:07:44,800 --> 00:07:45,400
减半

233
00:07:45,760 --> 00:07:47,560
然后当然你可以设计说

234
00:07:47,560 --> 00:07:50,760
每一个里面有多少个这样子的block

235
00:07:50,760 --> 00:07:52,160
就是我们这次222

236
00:07:52,160 --> 00:07:53,640
就每一个stage里面

237
00:07:53,640 --> 00:07:55,000
都是有两个这样子block

238
00:07:55,400 --> 00:07:57,360
你可以把它设成234

239
00:07:57,600 --> 00:07:58,400
这样子更大的

240
00:07:58,400 --> 00:08:00,080
得到更深的rest net

241
00:08:00,440 --> 00:08:01,000
OK

242
00:08:03,520 --> 00:08:05,080
所以然后你可以训练一下模型

243
00:08:05,080 --> 00:08:07,040
就训练模型跟我们之前是一样的

244
00:08:07,440 --> 00:08:08,720
就你待会可以围看一下

245
00:08:08,720 --> 00:08:11,440
就是说我们模型还是挺厉害的

246
00:08:11,880 --> 00:08:13,280
我们直接10个epoch

247
00:08:13,280 --> 00:08:15,200
能够把我们的training accuracy

248
00:08:15,200 --> 00:08:16,520
训练到0.99

249
00:08:17,080 --> 00:08:19,240
就是我们就是挺overfeeling了

250
00:08:19,560 --> 00:08:20,800
但是测试进度也不差

251
00:08:21,000 --> 00:08:22,080
就是0.88

252
00:08:22,960 --> 00:08:24,080
就是说相对来说

253
00:08:24,080 --> 00:08:25,640
我们是overfeeling了一些

254
00:08:25,960 --> 00:08:28,280
因为我们是用了一个比较大的

255
00:08:28,280 --> 00:08:30,120
一个224×224

256
00:08:30,560 --> 00:08:33,800
之前我们的VGG都用了96×96

257
00:08:34,879 --> 00:08:36,160
而且我们用的是

258
00:08:36,279 --> 00:08:38,879
这个是比较强的一个网络

259
00:08:38,879 --> 00:08:41,039
所以就看到是我们

260
00:08:41,039 --> 00:08:42,639
这个overfeeling还是挺严重的

261
00:08:42,759 --> 00:08:45,000
看到测试进度训练进度

262
00:08:45,559 --> 00:08:46,199
但反过来讲

263
00:08:46,199 --> 00:08:48,120
大家可以看到是rest net

264
00:08:48,120 --> 00:08:51,079
确实是一个比较强的一个升级网络

265
00:08:51,279 --> 00:08:53,719
即使是在训练到1的情况下

266
00:08:53,919 --> 00:08:56,240
你的进度也没有差到哪里去

267
00:08:57,519 --> 00:08:57,879
对吧

268
00:08:57,879 --> 00:09:00,279
也是比我们之前能够会

269
00:09:01,039 --> 00:09:04,120
近似到0.9的google net要差一点点

270
00:09:04,439 --> 00:09:05,480
但是大家可以去调一下

271
00:09:05,480 --> 00:09:08,360
就是说你可以把网络再往下调一下

272
00:09:08,360 --> 00:09:09,639
不要调那么大的

273
00:09:11,159 --> 00:09:13,920
我们的输入是224×224

274
00:09:13,920 --> 00:09:14,440
是很大的

275
00:09:14,800 --> 00:09:16,120
你可以把输入数降的一点

276
00:09:16,120 --> 00:09:18,240
或者你把里面的config搞小一点

277
00:09:18,240 --> 00:09:20,360
你是能够做到很好的这个地方

278
00:09:21,360 --> 00:09:21,639
OK

279
00:09:21,639 --> 00:09:24,200
这就是rest net

