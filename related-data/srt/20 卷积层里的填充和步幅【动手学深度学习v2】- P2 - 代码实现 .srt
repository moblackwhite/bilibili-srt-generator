1
00:00:00,000 --> 00:00:01,320
好

2
00:00:01,320 --> 00:00:05,080
我们来看一下我们具体是怎么用填充和不符的

3
00:00:06,799 --> 00:00:12,839
我们首先在还是跟我们之前一样

4
00:00:12,839 --> 00:00:17,120
我们定义一个很简单的函数

5
00:00:18,199 --> 00:00:19,080
来

6
00:00:19,760 --> 00:00:27,719
来把我们的前面的那一个

7
00:00:27,879 --> 00:00:29,199
因为我们知道我们的输入

8
00:00:29,199 --> 00:00:31,160
现在我们没有考虑多通道

9
00:00:31,280 --> 00:00:33,839
没有考虑T2的P2大小的时候

10
00:00:33,839 --> 00:00:35,320
我们输入就是一个矩阵

11
00:00:35,600 --> 00:00:36,799
那么这个函数干什么事情

12
00:00:37,079 --> 00:00:40,159
这个函数就是跟我们之前写的函数是一样的

13
00:00:40,280 --> 00:00:41,320
我们在这个地方

14
00:00:41,679 --> 00:00:47,200
在维度的前面加入一个通道数和加入一个P2大小数

15
00:00:48,079 --> 00:00:50,600
然后我们再调用com2d这个函数

16
00:00:52,039 --> 00:00:54,000
调用完了之后

17
00:00:54,120 --> 00:00:55,239
然后去

18
00:00:55,480 --> 00:00:57,719
然后它输了是一个四维的东西

19
00:00:57,719 --> 00:00:58,159
对吧

20
00:00:58,160 --> 00:01:00,160
然后我们把前面两位拿掉

21
00:01:00,200 --> 00:01:02,800
会得到一个矩阵的输出

22
00:01:02,800 --> 00:01:10,159
这样子我们很方便的看我们是怎么样减少和或者是增大我们的输出的

23
00:01:11,000 --> 00:01:11,200
好

24
00:01:11,200 --> 00:01:11,840
我们来看一下

25
00:01:11,840 --> 00:01:17,840
我们首先定了一个使用的touch module里面com2d的这个

26
00:01:17,840 --> 00:01:18,439
这个的层数

27
00:01:19,000 --> 00:01:22,280
之前一样我们的输入和输出的通道数都是唯一

28
00:01:22,840 --> 00:01:26,200
我们的kernel数就是我们的核的大小是33

29
00:01:26,920 --> 00:01:29,480
那么首先定一个最简单的padding是等于1

30
00:01:29,480 --> 00:01:30,560
就是填充为1

31
00:01:31,000 --> 00:01:33,719
就是上下左右各填充一行

32
00:01:35,719 --> 00:01:36,480
所以注意一下

33
00:01:36,600 --> 00:01:42,520
我们之前讲的填充是说我们在左右两边一共填充的数字

34
00:01:42,879 --> 00:01:45,480
但是对于框架来说

35
00:01:45,480 --> 00:01:49,120
一般你的填充是说我的一边填充的数字

36
00:01:51,920 --> 00:01:55,120
所以这个地方填充其实是说左右都填充了一行

37
00:01:56,040 --> 00:01:57,120
我们来看验证一下

38
00:01:57,960 --> 00:02:00,840
我们生成一个随机的一个8x8的一个矩阵

39
00:02:01,280 --> 00:02:02,439
然后放到这个函数里面

40
00:02:02,920 --> 00:02:04,760
可以看到我们的输出是一个8x8

41
00:02:06,040 --> 00:02:09,680
是因为我的填充就是左右各填充一行

42
00:02:10,000 --> 00:02:11,560
我们的核的大小是3的话

43
00:02:11,560 --> 00:02:13,719
那么就不会对我们的输入做成变化

44
00:02:14,360 --> 00:02:16,960
这就是我们之前的讲到了一个常用的情况

45
00:02:20,439 --> 00:02:21,840
那么接下来当然你可以说

46
00:02:22,159 --> 00:02:24,000
我可以做不那么对称的情况

47
00:02:24,520 --> 00:02:25,439
不那么对称的话

48
00:02:25,800 --> 00:02:27,400
我的核可以说

49
00:02:27,400 --> 00:02:32,039
我可以说你的行数是5行

50
00:02:32,039 --> 00:02:33,360
你的列数是3列

51
00:02:34,120 --> 00:02:38,759
那么这个地方我们还是想让输出和输入的形状是一样的话

52
00:02:39,039 --> 00:02:39,800
那么你应该怎么做

53
00:02:40,319 --> 00:02:42,560
就是把你的padding就是你的填充

54
00:02:43,159 --> 00:02:47,039
第一个你填充的上下填充的行数应该就是2

55
00:02:47,920 --> 00:02:49,639
左右填充的列数那就是1

56
00:02:50,599 --> 00:02:52,920
这就是你如果是这样设置的话

57
00:02:53,160 --> 00:02:56,200
那么你的输出和你的输入还是一样的大小

58
00:02:56,840 --> 00:02:58,120
输出还是一个8x8

59
00:03:02,880 --> 00:03:05,400
另外一个我们来看一个不符的情况

60
00:03:06,880 --> 00:03:08,480
我们回到前面简单的情况

61
00:03:09,120 --> 00:03:10,760
我们的核还是一个33

62
00:03:11,200 --> 00:03:12,520
我们填充是1

63
00:03:13,120 --> 00:03:15,800
然后我们的stride就是我们的不符等于2

64
00:03:16,440 --> 00:03:18,960
等于2的意思是说在行和列上面

65
00:03:18,960 --> 00:03:21,880
我们每一次不再是一行和一列

66
00:03:21,919 --> 00:03:23,560
还是一两行和一两列

67
00:03:24,519 --> 00:03:26,479
我们知道是说没有它的情况下

68
00:03:26,479 --> 00:03:27,919
我们的输出是8x8

69
00:03:28,400 --> 00:03:29,479
现在有了它之后

70
00:03:29,919 --> 00:03:36,639
因为我的输入输入的维度能够被高宽能被整除

71
00:03:37,079 --> 00:03:39,079
所以我们的输出就是一个4x4

72
00:03:39,519 --> 00:03:41,960
从8x8变成4x4就是减半

73
00:03:41,960 --> 00:03:43,759
因为我们stride等于2

74
00:03:45,639 --> 00:03:48,400
最后给看一个稍微复杂一点的情况

75
00:03:49,240 --> 00:03:52,480
就是说如果你可以做完全不对称的情况

76
00:03:52,480 --> 00:03:52,879
对不对

77
00:03:52,879 --> 00:03:58,439
你可以控制每一在行和列上每一次的卷积的大小

78
00:03:58,800 --> 00:04:00,719
填充的大小和你不符的大小

79
00:04:01,400 --> 00:04:04,560
大家可以算一下为什么会等于一个2x2

80
00:04:04,560 --> 00:04:07,240
就是套用我们刚刚讲过的公式

81
00:04:07,240 --> 00:04:09,120
可以得出它的形状是2x2

82
00:04:12,159 --> 00:04:18,360
所以这个就是如何在框架里面使用填充和不符

83
00:04:18,399 --> 00:04:22,159
其实你加一个超参数叫做piling和stride

84
00:04:22,159 --> 00:04:23,479
这两个超参数就行了

85
00:04:23,919 --> 00:04:26,639
一般来说我们会使用比较对称的情况

86
00:04:27,359 --> 00:04:32,799
一般来说我们因为我们的输入的图片通常来说是方块

87
00:04:33,399 --> 00:04:36,000
所以我的和的大小高宽是一样的

88
00:04:36,000 --> 00:04:37,560
我填充也是一样的

89
00:04:37,560 --> 00:04:39,279
我的不符通常也是一样的

90
00:04:40,399 --> 00:04:43,479
当你的输入的图片或输入的数据

91
00:04:43,919 --> 00:04:45,479
就说你不是那么对称的话

92
00:04:45,479 --> 00:04:47,719
你是一个长形或者是一个高形的话

93
00:04:47,920 --> 00:04:54,520
你可以去设置它使得它在控制在高宽上的不符和填充和你的和大小

94
00:04:54,520 --> 00:04:58,480
来使得它们的高宽比有一定的形状

95
00:04:59,200 --> 00:05:03,760
OK 所以这个就是不符和填充的使用

