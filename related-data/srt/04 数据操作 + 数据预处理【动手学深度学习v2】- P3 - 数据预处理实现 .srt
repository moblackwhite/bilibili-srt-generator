1
00:00:00,000 --> 00:00:02,000
数据处理是说

2
00:00:02,000 --> 00:00:04,400
如果我有一个原始数据

3
00:00:04,400 --> 00:00:06,719
我怎么样把它读取进来

4
00:00:06,719 --> 00:00:09,599
使得我们通过机器学习的方法能够处理

5
00:00:09,599 --> 00:00:12,720
我们这里给一个非常简单的一处理

6
00:00:12,720 --> 00:00:15,200
当之后我们随着课程的加深

7
00:00:15,200 --> 00:00:18,000
我们会介绍更多的一些特征的处理

8
00:00:18,000 --> 00:00:20,800
我们先看一个一些简单的例子

9
00:00:20,800 --> 00:00:24,000
首先我们创建一个人工的数据集

10
00:00:24,000 --> 00:00:26,440
存在一个CSV文件里面

11
00:00:26,440 --> 00:00:28,000
这是一个很小很小的文件

12
00:00:29,000 --> 00:00:32,679
这里就是说我们创建了一个文件夹

13
00:00:32,679 --> 00:00:35,280
然后写了一个文件名叫做house

14
00:00:35,280 --> 00:00:37,960
下滑线tiny.csv文件里面

15
00:00:37,960 --> 00:00:40,480
CSV的意思是说

16
00:00:40,480 --> 00:00:44,840
每一行是一个数据

17
00:00:44,840 --> 00:00:47,039
然后每一个entry

18
00:00:47,039 --> 00:00:50,039
就是每一个域是用逗号分开的

19
00:00:50,039 --> 00:00:51,760
所以叫做CSV

20
00:00:52,760 --> 00:00:55,320
可以看到是说我们大概这里面写了

21
00:00:55,320 --> 00:00:56,840
一共5行的样子

22
00:00:57,160 --> 00:00:59,880
第一行我告诉你是每一列它是什么意思

23
00:01:00,320 --> 00:01:02,880
第一个是说我告诉你我有多少个房间

24
00:01:03,200 --> 00:01:06,159
然后这个是说我的路是什么样

25
00:01:06,159 --> 00:01:08,439
我的进门的那条路是什么样子

26
00:01:08,840 --> 00:01:12,079
然后第三个是说我这个房子卖多少钱

27
00:01:12,480 --> 00:01:14,040
之间是用逗号分开

28
00:01:14,480 --> 00:01:17,080
然后我再写了四个房子

29
00:01:17,960 --> 00:01:20,439
里面NA是说not a number

30
00:01:20,439 --> 00:01:22,719
就是说就是一个未知的数

31
00:01:22,719 --> 00:01:24,640
就是可能我们这个数值不知道

32
00:01:25,000 --> 00:01:27,000
然后这个是说我这是铺了

33
00:01:27,320 --> 00:01:28,960
然后这个是我的价格

34
00:01:29,400 --> 00:01:32,120
当然到第二个样本也是一样的

35
00:01:32,120 --> 00:01:34,879
有一些未知的预算里面

36
00:01:34,879 --> 00:01:36,680
到第4个样本两个都是未知

37
00:01:36,680 --> 00:01:37,680
但只有价格

38
00:01:37,680 --> 00:01:39,200
OK这就是我们要

39
00:01:41,680 --> 00:01:43,439
然后接下来就是说

40
00:01:43,439 --> 00:01:46,079
我们把它存在一个CSV文件里面的话

41
00:01:46,079 --> 00:01:47,519
我们可以把它读取进来

42
00:01:47,840 --> 00:01:49,840
一般读取CSV文件的话

43
00:01:50,120 --> 00:01:52,319
一般用的是叫做pandas这个库

44
00:01:52,320 --> 00:01:54,720
也是说作为数据科学家

45
00:01:54,720 --> 00:01:56,160
最常使用的一个库

46
00:01:56,160 --> 00:01:59,600
可能它的使用频率在跟numpy是差不多的频率

47
00:02:00,600 --> 00:02:03,120
OK我们如果你没有装pandas的话

48
00:02:03,120 --> 00:02:05,200
你在Jupyter里面可以改弹号

49
00:02:05,200 --> 00:02:06,520
pip install pandas

50
00:02:06,520 --> 00:02:08,840
是一个很小的python的包

51
00:02:09,159 --> 00:02:10,800
让我们import pandas

52
00:02:11,640 --> 00:02:13,040
然后pandas的话

53
00:02:13,040 --> 00:02:14,400
它提供了一个很简单的

54
00:02:14,400 --> 00:02:16,680
文函数叫做read csv

55
00:02:16,879 --> 00:02:19,760
我们就把刚刚我们读取的文件读取进来

56
00:02:20,079 --> 00:02:22,560
我们就可以打印在print在这个地方

57
00:02:23,759 --> 00:02:25,479
print你会发现是说

58
00:02:25,479 --> 00:02:27,560
这里给你的是

59
00:02:27,560 --> 00:02:30,759
你的第一行就是你每一个列的名字

60
00:02:30,919 --> 00:02:33,039
接下来是说这有4行

61
00:02:33,479 --> 00:02:34,319
我们运行一下

62
00:02:34,319 --> 00:02:36,319
我们今天来运行一下这个

63
00:02:36,840 --> 00:02:37,879
我们来运行一下

64
00:02:37,879 --> 00:02:42,439
然后你当然可以print

65
00:02:42,439 --> 00:02:43,599
你也可以在Jupyter里面

66
00:02:43,599 --> 00:02:44,799
你可以不print

67
00:02:45,000 --> 00:02:46,519
就如果你不print的话

68
00:02:46,560 --> 00:02:48,960
它其实是在你的文件

69
00:02:48,960 --> 00:02:50,000
可能会更好看一点

70
00:02:50,000 --> 00:02:51,600
它是用一个HTML的形式

71
00:02:51,600 --> 00:02:52,560
给你print出来

72
00:02:52,560 --> 00:02:53,800
它可能更紧凑

73
00:02:55,080 --> 00:02:55,760
OK

74
00:02:56,560 --> 00:02:57,879
接下来是说

75
00:02:58,240 --> 00:03:01,560
注意到我们有一些数据是缺失的

76
00:03:01,560 --> 00:03:04,200
所以对于数据科学家来说

77
00:03:04,240 --> 00:03:05,480
最重要的一件事情

78
00:03:05,480 --> 00:03:07,960
是说怎么样处理缺失的数据

79
00:03:08,040 --> 00:03:09,640
或者说整个机器学习

80
00:03:09,640 --> 00:03:11,280
就是处理缺失数据

81
00:03:11,480 --> 00:03:12,760
就是你要预测未来

82
00:03:12,800 --> 00:03:13,800
未来是什么样子

83
00:03:13,800 --> 00:03:14,400
我们不知道

84
00:03:14,400 --> 00:03:15,760
这是一个缺失的数据

85
00:03:16,079 --> 00:03:17,239
当然这里的话

86
00:03:17,239 --> 00:03:18,319
我们先不做预测

87
00:03:18,319 --> 00:03:20,239
我们先说用很简单的方法

88
00:03:20,239 --> 00:03:22,519
我们把一些缺失的数据补起来

89
00:03:22,840 --> 00:03:24,799
补的方法有很多种

90
00:03:24,799 --> 00:03:25,479
最常见的

91
00:03:25,479 --> 00:03:27,919
包括如果有一个数据是缺失的话

92
00:03:27,919 --> 00:03:28,719
我们就把它丢掉

93
00:03:28,719 --> 00:03:30,120
把整个这一行丢掉

94
00:03:30,239 --> 00:03:31,959
这是一个最常用的方法

95
00:03:32,039 --> 00:03:33,319
当然很多时候我们说

96
00:03:33,319 --> 00:03:35,399
我们丢掉也太可惜了

97
00:03:35,519 --> 00:03:37,560
然后最常用的

98
00:03:37,919 --> 00:03:39,840
这也是一个叫差值的方法

99
00:03:40,719 --> 00:03:43,840
比如说我们这里怎么样进行差值

100
00:03:44,079 --> 00:03:45,359
首先我们数据

101
00:03:45,360 --> 00:03:49,200
我们先把它分成一个输入的特征和输出

102
00:03:49,200 --> 00:03:50,280
但我们现在没有讲

103
00:03:50,280 --> 00:03:51,960
输入特征和输出是什么样子

104
00:03:52,040 --> 00:03:52,640
这没关系

105
00:03:52,640 --> 00:03:53,680
我们就是说

106
00:03:53,800 --> 00:03:54,720
对一个data

107
00:03:54,720 --> 00:03:57,000
它是一个刚刚我们注意到是一个

108
00:03:57,080 --> 00:03:59,520
4×3的一个表

109
00:03:59,720 --> 00:04:00,880
然后我们通过iLock

110
00:04:00,880 --> 00:04:02,520
就是index location

111
00:04:02,760 --> 00:04:06,520
来把第一个的第0和第一列

112
00:04:06,640 --> 00:04:08,280
和所有的行拿出来

113
00:04:08,280 --> 00:04:09,560
放在input里面

114
00:04:10,160 --> 00:04:12,080
然后把最后一列拿出来

115
00:04:12,200 --> 00:04:13,440
放在output里面

116
00:04:14,240 --> 00:04:15,319
然后input里面

117
00:04:15,319 --> 00:04:16,199
首先我们说

118
00:04:16,680 --> 00:04:18,040
对于filena

119
00:04:18,040 --> 00:04:21,240
就是说对所有是lot of number

120
00:04:21,439 --> 00:04:23,759
na的num的一个域

121
00:04:23,759 --> 00:04:25,480
我们把它填一个值

122
00:04:25,639 --> 00:04:26,279
填什么值

123
00:04:26,480 --> 00:04:27,439
我们填一个mean

124
00:04:27,439 --> 00:04:28,120
就是

125
00:04:28,439 --> 00:04:29,519
意味着说

126
00:04:30,439 --> 00:04:31,399
比如说我们看一下

127
00:04:31,399 --> 00:04:32,800
我们的input的长什么样子

128
00:04:32,839 --> 00:04:34,079
可以比较一下之前

129
00:04:34,439 --> 00:04:35,480
之前是说

130
00:04:35,519 --> 00:04:38,279
number of rooms有两个是lot of number

131
00:04:38,959 --> 00:04:40,040
现在是说

132
00:04:40,079 --> 00:04:42,319
我把这些lot of number填成

133
00:04:42,319 --> 00:04:45,199
剩下不是lot of number值的均值

134
00:04:45,240 --> 00:04:46,079
就是3

135
00:04:46,800 --> 00:04:48,279
但是我们对这个没有改变

136
00:04:48,279 --> 00:04:50,000
因为它没有均值

137
00:04:50,000 --> 00:04:51,439
它是一个

138
00:04:52,519 --> 00:04:53,319
string

139
00:04:53,319 --> 00:04:54,560
所以它并没有均值

140
00:04:54,560 --> 00:04:56,079
所以它并没有产生变化

141
00:04:56,240 --> 00:04:59,639
但是我们把所有的数值域的全部给你

142
00:04:59,680 --> 00:05:02,680
把所有的lot of number全部给你铺好了

143
00:05:04,360 --> 00:05:06,480
对于那种不是数值怎么办呢

144
00:05:06,959 --> 00:05:08,279
一个办法是说

145
00:05:08,560 --> 00:05:10,120
我把一个缺失的

146
00:05:10,120 --> 00:05:11,600
做成一个特别的类

147
00:05:11,600 --> 00:05:13,000
缺失值也是一种值

148
00:05:13,640 --> 00:05:16,800
所以然后我们要把它变成一个数值

149
00:05:16,840 --> 00:05:18,840
而不仅仅是一个字符串

150
00:05:18,840 --> 00:05:19,600
字符串的话

151
00:05:19,600 --> 00:05:21,160
我们接下来比较难处理

152
00:05:21,439 --> 00:05:22,120
变成数值

153
00:05:22,120 --> 00:05:23,800
我们一个最简单办法是说

154
00:05:23,840 --> 00:05:25,439
我们把这一列里面

155
00:05:25,439 --> 00:05:28,240
所有出现的不同种类的数值

156
00:05:28,840 --> 00:05:30,200
都变成一个特征

157
00:05:31,439 --> 00:05:32,720
比如说我们回到前面

158
00:05:33,360 --> 00:05:33,920
回到前面

159
00:05:33,920 --> 00:05:34,560
我们有两个

160
00:05:34,560 --> 00:05:35,360
其实有两个值

161
00:05:35,360 --> 00:05:36,080
一个是pave

162
00:05:36,120 --> 00:05:37,400
一个是lot of number

163
00:05:38,400 --> 00:05:39,760
那么这两种值的话

164
00:05:39,760 --> 00:05:40,320
我们就

165
00:05:40,519 --> 00:05:41,480
建两类

166
00:05:42,360 --> 00:05:43,439
我们通过这个函数

167
00:05:43,439 --> 00:05:44,800
叫get dummies

168
00:05:45,000 --> 00:05:45,800
然后dummy

169
00:05:45,800 --> 00:05:49,079
NA这个我们也要加一个特别的类

170
00:05:49,079 --> 00:05:50,719
所以就会出现两类

171
00:05:50,879 --> 00:05:51,879
第一类是

172
00:05:52,079 --> 00:05:54,319
这个是我们之前那个colon的名字

173
00:05:54,480 --> 00:05:57,039
然后这个是我的字符串的名称

174
00:05:57,039 --> 00:05:57,759
叫pave

175
00:05:57,800 --> 00:05:58,279
另外一个

176
00:05:58,279 --> 00:05:59,680
这是一个lot of number

177
00:05:59,879 --> 00:06:01,920
所以如果我之前那一类的值

178
00:06:01,920 --> 00:06:02,879
是pave的话

179
00:06:03,000 --> 00:06:04,159
我们这里变成了1

180
00:06:04,399 --> 00:06:05,480
不然就变成0

181
00:06:06,039 --> 00:06:06,560
同样的话

182
00:06:06,560 --> 00:06:07,959
如果是lot of number的话

183
00:06:07,959 --> 00:06:09,039
这全是1

184
00:06:09,079 --> 00:06:09,920
别的是0

185
00:06:10,319 --> 00:06:11,079
意味着只是说

186
00:06:11,079 --> 00:06:13,199
我们变成了一个纯0 1的一个矩阵

187
00:06:14,199 --> 00:06:15,759
这一列就所有的元素

188
00:06:15,759 --> 00:06:16,319
要么是0

189
00:06:16,319 --> 00:06:17,079
要么是1

190
00:06:18,159 --> 00:06:18,439
好

191
00:06:18,439 --> 00:06:19,879
那么接下来就是说

192
00:06:19,920 --> 00:06:21,920
因为我们先把所有的

193
00:06:22,480 --> 00:06:25,000
缺失的值和所有的字符串

194
00:06:25,000 --> 00:06:26,480
全部变成了一个数值

195
00:06:26,519 --> 00:06:28,319
那么我们就可以变成一个

196
00:06:28,439 --> 00:06:30,159
PyTorch的tensor了

197
00:06:30,439 --> 00:06:32,039
然后我们importTorch

198
00:06:32,039 --> 00:06:33,759
然后到tensor

199
00:06:33,759 --> 00:06:35,920
我们就把input的values放进来

200
00:06:36,039 --> 00:06:37,639
output的values放进来

201
00:06:37,800 --> 00:06:39,039
大家可以看到是说

202
00:06:39,039 --> 00:06:39,680
OK

203
00:06:39,680 --> 00:06:41,480
现在我们把一个CSV文件

204
00:06:41,480 --> 00:06:42,879
转成了一个纯的

205
00:06:42,879 --> 00:06:45,000
我们昨天提到过的一个

206
00:06:45,160 --> 00:06:46,199
张亮了

207
00:06:46,639 --> 00:06:48,680
注意到这里是float64

208
00:06:48,680 --> 00:06:51,519
这个是传统的python

209
00:06:51,519 --> 00:06:52,960
一般会默认浮点数

210
00:06:52,960 --> 00:06:54,160
会用float64

211
00:06:54,160 --> 00:06:55,360
64位浮点数

212
00:06:55,400 --> 00:06:56,920
但是64位浮点数

213
00:06:56,960 --> 00:06:58,199
一般计算比较慢

214
00:06:58,199 --> 00:06:59,560
对深度学习来讲

215
00:06:59,600 --> 00:07:01,319
我们通常用32位浮点数

216
00:07:01,319 --> 00:07:03,920
我们之后会跟大家提到这一点

217
00:07:04,639 --> 00:07:06,480
然后同样的是

218
00:07:06,480 --> 00:07:08,680
我们output里面没有lot of number

219
00:07:08,680 --> 00:07:10,920
所以我们就没关系

220
00:07:10,920 --> 00:07:12,319
不需要改变任何值

221
00:07:12,759 --> 00:07:14,959
所以这个就是一个非常简单的

222
00:07:15,040 --> 00:07:15,959
一个样例

223
00:07:16,280 --> 00:07:17,319
教大家怎么样

224
00:07:17,319 --> 00:07:19,519
把一个CSV文件读取进来

225
00:07:19,519 --> 00:07:21,199
做一定的特征预处理

226
00:07:21,240 --> 00:07:22,519
然后变成一个PyTorch

227
00:07:22,519 --> 00:07:23,840
能用的一个tensor

228
00:07:24,040 --> 00:07:24,439
OK

229
00:07:24,439 --> 00:07:26,759
这就是这一节的内容

