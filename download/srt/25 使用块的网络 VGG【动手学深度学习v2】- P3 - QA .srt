1
00:00:00,000 --> 00:00:01,240
好

2
00:00:01,260 --> 00:00:02,720
我们来看一下VGG的实现

3
00:00:02,740 --> 00:00:05,560
首先我们要实现的就是VGG快

4
00:00:05,919 --> 00:00:07,120
我们看一下VGG快

5
00:00:07,120 --> 00:00:11,759
它其实就是说你要告诉我你的超残

6
00:00:11,759 --> 00:00:13,519
是说你需要多少个剪辑残

7
00:00:14,200 --> 00:00:18,879
你的输入的channel数和你的输出的channel数

8
00:00:19,800 --> 00:00:21,800
可以看到就是说其实也是很简单

9
00:00:21,800 --> 00:00:22,199
对吧

10
00:00:22,359 --> 00:00:25,519
首先你重复n次就是你n

11
00:00:25,759 --> 00:00:27,559
然后每一次就加入你的

12
00:00:28,600 --> 00:00:32,119
conv2d的输入数和输出数

13
00:00:32,119 --> 00:00:34,759
这两个数其实是一样

14
00:00:35,759 --> 00:00:38,039
然后你的channel就是等于3

15
00:00:38,039 --> 00:00:39,359
padding等于1

16
00:00:40,439 --> 00:00:42,120
然后在每一层后面加个relu

17
00:00:43,239 --> 00:00:46,840
然后你把它往下换一换对吧

18
00:00:47,159 --> 00:00:51,039
所以其实VGG的所有的output的layer都是一样

19
00:00:51,039 --> 00:00:53,239
input当然是你可以少一点没关系

20
00:00:53,359 --> 00:00:56,480
所以output的话就每个输出都是保持一样的

21
00:00:58,200 --> 00:00:59,480
然后你就替换一下

22
00:00:59,480 --> 00:01:02,520
然后再来最后加入一个max pooling

23
00:01:02,520 --> 00:01:06,599
就是conv2d,strat等于2

24
00:01:07,240 --> 00:01:10,000
最后你把它这些层就丢到一个n

25
00:01:10,000 --> 00:01:12,599
sequential里面就构造成一个VGG的快

26
00:01:13,320 --> 00:01:13,719
OK

27
00:01:14,400 --> 00:01:17,359
所以你需要的超参数就是你的

28
00:01:17,640 --> 00:01:20,079
有重复多少次剪辑残

29
00:01:20,120 --> 00:01:23,239
然后你的每个剪辑层的输出的通道是多少

30
00:01:25,840 --> 00:01:26,000
好

31
00:01:26,000 --> 00:01:28,640
接下来就是说那就是VGG了

32
00:01:29,079 --> 00:01:31,879
VGG就是说你告诉我一个架构

33
00:01:32,120 --> 00:01:33,439
这里告诉你一个架构

34
00:01:33,439 --> 00:01:35,400
就是说我有几个快

35
00:01:35,560 --> 00:01:37,079
1块2块3块4块5块

36
00:01:37,079 --> 00:01:37,959
我一共有5块

37
00:01:38,159 --> 00:01:41,879
这个快也是一个非常的经典的一个结构

38
00:01:42,120 --> 00:01:43,680
就是有5块5大块

39
00:01:44,159 --> 00:01:47,480
每一块你可认为是把我的高宽减半对吧

40
00:01:47,480 --> 00:01:48,920
因为我有个max pooling

41
00:01:49,400 --> 00:01:50,600
因为为什么是5块

42
00:01:50,760 --> 00:01:54,640
是因为你224乘以除以5次2的话

43
00:01:54,640 --> 00:01:55,439
会得到7

44
00:01:55,439 --> 00:01:56,920
就得到7好像是除不动了

45
00:01:57,200 --> 00:01:57,920
这个质数了

46
00:01:59,079 --> 00:01:59,280
OK

47
00:01:59,280 --> 00:02:00,719
所以你就是能做5块

48
00:02:01,640 --> 00:02:02,240
OK

49
00:02:02,359 --> 00:02:05,879
所以接下来就是说你给我一个架构的时候

50
00:02:06,040 --> 00:02:07,920
我就是说每一次就是你告诉我

51
00:02:08,280 --> 00:02:10,560
你这一块里面有多少层卷积

52
00:02:10,560 --> 00:02:12,000
然后你的通道数是多少

53
00:02:12,199 --> 00:02:14,400
可以看到是首先是64

54
00:02:14,680 --> 00:02:16,159
double一下128

55
00:02:16,240 --> 00:02:18,960
接下来复杂点的话就是两层卷积

56
00:02:18,960 --> 00:02:19,960
256

57
00:02:20,479 --> 00:02:21,159
512

58
00:02:21,159 --> 00:02:22,280
最后也是个512

59
00:02:23,680 --> 00:02:24,000
OK

60
00:02:24,000 --> 00:02:26,280
就是说那就是根据你每一块

61
00:02:26,280 --> 00:02:27,199
我来把你的

62
00:02:27,519 --> 00:02:29,719
就是你的我调用VGG block

63
00:02:29,879 --> 00:02:31,280
把你构建出来

64
00:02:31,519 --> 00:02:33,400
这就是你的卷积的那一块

65
00:02:33,919 --> 00:02:35,240
卷积完构造完之后

66
00:02:35,240 --> 00:02:36,519
我通过一个flatten层

67
00:02:36,519 --> 00:02:37,840
然后用一个线性层

68
00:02:37,840 --> 00:02:38,639
最后是一样的

69
00:02:40,199 --> 00:02:41,639
你也看到我们这又是乘以

70
00:02:41,639 --> 00:02:43,919
你的输出的通道数乘以7乘以7

71
00:02:43,920 --> 00:02:46,960
是因为你124除了5次之后

72
00:02:46,960 --> 00:02:47,720
就变成7乘7

73
00:02:47,720 --> 00:02:48,120
对吧

74
00:02:48,120 --> 00:02:50,240
所以你最后是通道数乘以这个东西

75
00:02:50,440 --> 00:02:52,840
把你这是你的输入的

76
00:02:52,840 --> 00:02:54,360
那个寒冬

77
00:02:54,840 --> 00:02:57,160
最后这一块其实跟你Alexander是一样的

78
00:02:57,680 --> 00:02:59,480
前面就是切起来方便了

79
00:02:59,480 --> 00:02:59,960
对吧

80
00:03:00,080 --> 00:03:02,400
所以你就是一个for loop写完了

81
00:03:02,400 --> 00:03:04,320
然后你这里你想要多少人就多少人

82
00:03:04,320 --> 00:03:04,720
对吧

83
00:03:04,720 --> 00:03:07,400
我想要5块你不能变了

84
00:03:07,400 --> 00:03:09,480
5块你这个快速你是不能变

85
00:03:09,600 --> 00:03:13,480
但是我想要每一块里面多多少层

86
00:03:13,480 --> 00:03:14,240
卷积

87
00:03:14,240 --> 00:03:15,680
然后有多多

88
00:03:15,680 --> 00:03:18,240
通道数有多大

89
00:03:18,240 --> 00:03:19,240
我是可以设置

90
00:03:19,440 --> 00:03:22,200
不同的架构会导致你有不同的VGG

91
00:03:22,320 --> 00:03:24,400
这个应该是VGG多少

92
00:03:24,400 --> 00:03:25,920
一二

93
00:03:25,920 --> 00:03:28,800
应该是VGG

94
00:03:29,280 --> 00:03:30,360
就我也不知道这个是多少

95
00:03:30,360 --> 00:03:31,680
这个VGG19吗

96
00:03:31,680 --> 00:03:32,360
anyway

97
00:03:32,360 --> 00:03:34,800
我们接下来看一下

98
00:03:34,800 --> 00:03:35,440
就是说

99
00:03:35,800 --> 00:03:36,520
你可以看一下

100
00:03:36,520 --> 00:03:37,240
就是说

101
00:03:37,240 --> 00:03:39,320
因为我们这里是一块一块放进去了

102
00:03:39,320 --> 00:03:40,760
然后我们输出通道的时候

103
00:03:40,760 --> 00:03:43,000
你看到比较好了

104
00:03:43,520 --> 00:03:45,560
我就不用看每一块里面长什么样子

105
00:03:45,560 --> 00:03:49,840
我就能快能看一下前面5个VGG block的输出

106
00:03:49,840 --> 00:03:50,680
是怎么变化的

107
00:03:50,680 --> 00:03:52,439
最后你的是你的线性

108
00:03:52,439 --> 00:03:54,080
就线性层就不用管了

109
00:03:54,960 --> 00:03:55,479
首先看到

110
00:03:57,800 --> 00:03:59,960
24x24的东西进来

111
00:03:59,960 --> 00:04:02,240
首先第一块就是把你高宽减半

112
00:04:02,240 --> 00:04:04,360
然后通道数拉到了64

113
00:04:05,520 --> 00:04:09,039
那么接下来就是你的通道数翻倍

114
00:04:09,400 --> 00:04:11,319
你的高宽再减半

115
00:04:11,719 --> 00:04:13,079
然后一直翻倍减半

116
00:04:13,079 --> 00:04:13,680
翻倍减半

117
00:04:13,680 --> 00:04:15,759
最后那一层其实比较好玩

118
00:04:15,759 --> 00:04:16,920
就是说他没有翻倍了

119
00:04:16,920 --> 00:04:18,319
其实你可以翻倍没关系

120
00:04:18,319 --> 00:04:19,560
你可以变成1024

121
00:04:19,560 --> 00:04:20,319
其实也没关系

122
00:04:20,319 --> 00:04:24,079
所以整体思想就是说

123
00:04:24,079 --> 00:04:26,959
我把一个网络分成5块

124
00:04:26,959 --> 00:04:30,120
每一块就是把你的高宽减半

125
00:04:30,120 --> 00:04:31,439
然后通道数翻倍

126
00:04:31,439 --> 00:04:33,519
这个是一个经典的设计

127
00:04:33,519 --> 00:04:35,399
在之后会重复出现

128
00:04:36,439 --> 00:04:39,120
就是说每一次我在空间压缩一半的时候

129
00:04:39,120 --> 00:04:41,279
我的模式数就会翻一倍

130
00:04:41,519 --> 00:04:42,719
我们上一节可以有讲过

131
00:04:42,719 --> 00:04:47,279
这个是确实是之后在深圳网络经常用到的

132
00:04:47,279 --> 00:04:50,839
一个设计的模式

133
00:04:53,839 --> 00:04:58,240
所以我们因为VGG用的计算上比

134
00:04:58,360 --> 00:05:00,039
刚刚是VGG11这个架构

135
00:05:00,199 --> 00:05:03,800
11这个架构应该是卷积层加上全联系架层

136
00:05:03,800 --> 00:05:05,319
个数是11

137
00:05:05,319 --> 00:05:06,519
所以叫VGG11

138
00:05:07,199 --> 00:05:08,839
因为他计算比Alex太大了

139
00:05:08,839 --> 00:05:10,920
所以我们构建一个通道数比较小的

140
00:05:10,920 --> 00:05:13,040
就是说我们把所有的通道数除以4

141
00:05:13,720 --> 00:05:15,759
就是你的channel数除以4

142
00:05:15,960 --> 00:05:18,480
构造一个小的VGG11来训练

143
00:05:20,400 --> 00:05:23,280
所以我们就不去重新给大家训练这个事情了

144
00:05:23,280 --> 00:05:27,080
就是说参数上我们还是跑10次

145
00:05:27,080 --> 00:05:28,280
模式数据

146
00:05:28,280 --> 00:05:30,240
P2大小是128

147
00:05:30,240 --> 00:05:31,840
学习率我们是0.05

148
00:05:31,840 --> 00:05:32,759
稍微大一点点

149
00:05:32,759 --> 00:05:34,200
就是说这个也是随便调的

150
00:05:34,200 --> 00:05:35,840
你可以调大调小没关系

151
00:05:36,240 --> 00:05:37,360
你可以试一下

152
00:05:37,759 --> 00:05:39,040
最后看一下效果

153
00:05:39,360 --> 00:05:40,920
首先他慢了

154
00:05:41,200 --> 00:05:42,480
我们把VGG11

155
00:05:42,560 --> 00:05:45,000
VGG11已经是VGG里面比较小的网络了

156
00:05:45,000 --> 00:05:46,960
以及通道数除以4了

157
00:05:47,160 --> 00:05:48,200
通道数除4

158
00:05:48,200 --> 00:05:50,600
就是认为计算量减少了16倍

159
00:05:51,040 --> 00:05:53,160
因为它是输入乘以输出

160
00:05:53,160 --> 00:05:54,879
是你的计算复杂度

161
00:05:55,040 --> 00:05:56,960
就减少了14倍的情况下

162
00:05:56,960 --> 00:05:59,720
我还是比AlexNet要慢一倍

163
00:06:00,000 --> 00:06:04,200
所以VGG确实是一个很贵的一个实际网络

164
00:06:04,600 --> 00:06:05,960
但它精度还不错

165
00:06:06,480 --> 00:06:07,879
AlexNet是你来吧吧

166
00:06:07,920 --> 00:06:10,719
现在我们直接到了0.93和0.92

167
00:06:11,800 --> 00:06:14,920
就算是我用了一个很小的VGG的网络

168
00:06:14,920 --> 00:06:16,279
我也做到了

169
00:06:16,920 --> 00:06:18,120
精度有提升

170
00:06:18,480 --> 00:06:21,399
你回过头来比AlexNet区别什么

171
00:06:21,600 --> 00:06:22,839
后面没区别

172
00:06:23,000 --> 00:06:24,600
就全连接是没区别

173
00:06:24,639 --> 00:06:26,079
主要是你的卷积参

174
00:06:26,159 --> 00:06:30,079
卷积参我用了我这里用了几个卷积参

175
00:06:30,240 --> 00:06:31,839
我用了8个

176
00:06:31,839 --> 00:06:32,959
我用了10个

177
00:06:32,959 --> 00:06:34,159
我用了几个卷积参

178
00:06:35,439 --> 00:06:36,040
看一下

179
00:06:38,000 --> 00:06:41,519
用了6个

180
00:06:41,519 --> 00:06:42,879
我用了8个卷积参

181
00:06:42,879 --> 00:06:43,839
三个全连接参

182
00:06:43,839 --> 00:06:44,920
所以叫VGG11

183
00:06:45,360 --> 00:06:47,000
用了8个卷积参

184
00:06:47,199 --> 00:06:49,719
而且但是你AlexNet用的是5个

185
00:06:49,759 --> 00:06:51,639
所以我都没多三个

186
00:06:51,639 --> 00:06:52,680
多三个

187
00:06:52,680 --> 00:06:53,920
所以就意味着说

188
00:06:54,040 --> 00:06:55,000
不是说意味着

189
00:06:55,159 --> 00:06:59,279
我觉得可能对空间的特征抽取就会好一些

190
00:06:59,319 --> 00:07:02,480
而且都是用三乘三的这些小的

191
00:07:02,800 --> 00:07:03,279
那个东西

192
00:07:03,279 --> 00:07:05,959
他就用更小的窗口更深

193
00:07:06,000 --> 00:07:08,280
他比AlexNet用那种11x11

194
00:07:08,400 --> 00:07:09,200
5x5的

195
00:07:09,200 --> 00:07:10,200
但是浅一点

196
00:07:10,240 --> 00:07:13,320
他这里可以感觉得出他效果更好

197
00:07:13,360 --> 00:07:16,840
甚至说我的通道数更小的情况下

198
00:07:16,880 --> 00:07:18,160
我的进度还要提升

199
00:07:18,800 --> 00:07:19,280
OK

200
00:07:20,200 --> 00:07:22,040
这就是VGG

