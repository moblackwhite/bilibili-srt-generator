1
00:00:00,000 --> 00:00:03,960
接下来我们讲卷积生就网络一个

2
00:00:03,960 --> 00:00:06,440
另外一个非常重要的一个超参数

3
00:00:06,440 --> 00:00:08,320
叫做通道数

4
00:00:08,320 --> 00:00:13,880
这个真的是大家通常会去仔细去设的一个超参数

5
00:00:13,880 --> 00:00:17,000
我们来讲一下输入和输出的通道

6
00:00:19,879 --> 00:00:22,679
首先我们看一下多输入通道是什么意思

7
00:00:23,879 --> 00:00:26,080
通常来说我们会用彩色图片

8
00:00:26,839 --> 00:00:29,039
彩色图片有RGB三个通道

9
00:00:30,039 --> 00:00:35,439
那么的话就是说我们之前在我们的数据集里面用的FastMList

10
00:00:35,439 --> 00:00:36,840
我们是一个灰度的图片

11
00:00:37,719 --> 00:00:40,399
就是一个只有黑白灰

12
00:00:40,399 --> 00:00:44,359
所以它就是一个gray一个灰色通道

13
00:00:44,359 --> 00:00:45,519
所以只有一个通道

14
00:00:45,519 --> 00:00:49,640
但是一个通道是在简单图片是OK的

15
00:00:49,640 --> 00:00:52,000
对复杂图片是一个很难的事情

16
00:00:52,000 --> 00:00:54,600
就是说你可认为这是一张彩色图片

17
00:00:54,600 --> 00:00:59,640
这是非常计算机视觉里面非常流行的一个图片

18
00:00:59,640 --> 00:01:04,200
他其实是Playboy是一个小黄书里面的一个图片

19
00:01:04,200 --> 00:01:05,120
截取下来的

20
00:01:06,280 --> 00:01:08,000
就是说一张彩色图片

21
00:01:08,000 --> 00:01:10,640
你可以认为他是有红色

22
00:01:10,640 --> 00:01:13,519
绿色和蓝色三个通道组组成的

23
00:01:13,519 --> 00:01:16,760
所以你在图片的表示上来说

24
00:01:16,760 --> 00:01:18,159
你的通道数应该是三

25
00:01:19,079 --> 00:01:21,560
假设你的图片大小是200×200的话

26
00:01:21,560 --> 00:01:27,120
那么你在张量的表示应该是200×200×3的一个表示

27
00:01:28,120 --> 00:01:30,800
OK它不仅仅是一个简单的矩阵了

28
00:01:32,640 --> 00:01:33,400
那我们来看一下

29
00:01:34,359 --> 00:01:38,520
假设我有我的输入有多个通道会怎么办

30
00:01:40,480 --> 00:01:42,840
这里是说你怎么去处理

31
00:01:42,840 --> 00:01:45,280
我有我的输入不再是一个矩阵

32
00:01:45,280 --> 00:01:48,840
而是一个三枚的一个tensor怎么办呢

33
00:01:49,600 --> 00:01:50,640
这里有个具体的例子

34
00:01:51,320 --> 00:01:54,040
具体的例子是说我的输入是有两个通道的

35
00:01:54,040 --> 00:01:56,040
就是说这是通道0

36
00:01:56,520 --> 00:01:57,560
后面那个是通道1

37
00:01:59,440 --> 00:02:01,360
假设我要两个通道我怎么办呢

38
00:02:02,200 --> 00:02:04,760
那就是说我对每一个通道

39
00:02:05,760 --> 00:02:07,160
它都有一个卷集合

40
00:02:08,319 --> 00:02:12,000
这个卷集合是为通道0准备的

41
00:02:12,759 --> 00:02:14,640
这个卷集合它有自己独立的参数

42
00:02:14,640 --> 00:02:15,520
它的值可能不一样

43
00:02:16,040 --> 00:02:18,200
是给通道1给用的

44
00:02:19,000 --> 00:02:21,360
那么就等于是说我通道0

45
00:02:21,360 --> 00:02:24,840
和卷集合

46
00:02:25,520 --> 00:02:28,000
针对通道0的卷集合做卷集

47
00:02:29,160 --> 00:02:30,720
这点卷集也就是相关操作了

48
00:02:30,720 --> 00:02:32,080
我们昨天有讲

49
00:02:33,480 --> 00:02:35,960
然后对通道1也是一样的

50
00:02:35,960 --> 00:02:39,560
通道1和自己的卷集合做卷集操作

51
00:02:41,400 --> 00:02:43,080
然后再按元素相加

52
00:02:44,880 --> 00:02:45,800
它出来是个2×2

53
00:02:46,480 --> 00:02:48,600
再按元素相加得到我们最终的结果

54
00:02:48,599 --> 00:02:52,400
具体来看就是说你可以看到是说

55
00:02:52,400 --> 00:02:53,960
这一个56是怎么算出来的

56
00:02:54,479 --> 00:02:57,759
56就是他画一下

57
00:02:57,759 --> 00:03:02,519
就是他和他做卷集操作

58
00:03:03,039 --> 00:03:06,919
然后再加上他与他做卷集操作

59
00:03:06,919 --> 00:03:08,120
会得到一个56

60
00:03:08,479 --> 00:03:09,599
下面这个公式有写

61
00:03:09,599 --> 00:03:11,079
它具体怎么算的

62
00:03:12,199 --> 00:03:12,719
OK

63
00:03:12,719 --> 00:03:16,400
这就是我们如果是用多通道的情况下

64
00:03:16,400 --> 00:03:16,959
会怎么样

65
00:03:18,759 --> 00:03:21,359
具体来讲我可以用公式来表达一下

66
00:03:23,000 --> 00:03:26,840
假设我的输入X是一个三维的张量

67
00:03:28,519 --> 00:03:30,680
就之前我们是nh×nw

68
00:03:31,519 --> 00:03:33,599
现在我们多了一个ci在这里

69
00:03:33,599 --> 00:03:34,959
c是channel的意思

70
00:03:35,319 --> 00:03:37,240
i就是我的input

71
00:03:38,240 --> 00:03:39,680
那就是一个三维的输入

72
00:03:39,680 --> 00:03:41,680
ci×nh×nw

73
00:03:42,519 --> 00:03:46,719
那么你的卷集合也会相应的变成一个3D的

74
00:03:46,719 --> 00:03:47,359
一个矩阵

75
00:03:48,799 --> 00:03:51,159
之前我们的一个卷集合就是你的高和你的

76
00:03:51,159 --> 00:03:51,359
宽

77
00:03:51,359 --> 00:03:52,840
就是kh×kw

78
00:03:53,599 --> 00:03:54,879
那么现在我的卷集合

79
00:03:54,879 --> 00:03:57,560
那就是说你有多少个输入的维度

80
00:03:57,560 --> 00:03:59,120
就ci是有多少

81
00:03:59,120 --> 00:04:01,560
那么我的和也是一个ci的有多少

82
00:04:03,479 --> 00:04:05,519
我们这里没有写偏移

83
00:04:06,039 --> 00:04:06,840
对每一个通道

84
00:04:06,840 --> 00:04:08,159
他都有自己的偏移

85
00:04:08,159 --> 00:04:10,919
也就是一个成为ci的一个向量

86
00:04:12,599 --> 00:04:14,439
那么你的输出是一个

87
00:04:14,439 --> 00:04:18,480
我们再计为一个m×h×m×w

88
00:04:18,480 --> 00:04:19,200
的东西

89
00:04:20,240 --> 00:04:22,080
就输出是一个单通道

90
00:04:22,480 --> 00:04:24,600
因为不管你输入是多少通道

91
00:04:24,600 --> 00:04:26,720
我就说我是把它结果相加

92
00:04:27,000 --> 00:04:29,240
所以就是说我对每一个通道

93
00:04:29,240 --> 00:04:33,600
我把它的对应的输入就是一个矩阵

94
00:04:33,879 --> 00:04:37,840
和它的对应的和做卷集操作

95
00:04:38,120 --> 00:04:39,759
然后再按元素相加起来

96
00:04:39,759 --> 00:04:40,759
得到我们的输出

97
00:04:41,720 --> 00:04:42,000
OK

98
00:04:42,000 --> 00:04:46,319
这个就是多输入通道时候会怎么做的

99
00:04:47,319 --> 00:04:49,639
接下来我们再往下看一下

100
00:04:50,199 --> 00:04:53,519
我们做多个输出通道是什么样子

101
00:04:54,519 --> 00:04:55,959
为什么要多个输出通道

102
00:04:55,959 --> 00:04:58,719
是因为不管有多少输入通道

103
00:04:58,719 --> 00:05:01,120
我们只会得到单输出通道

104
00:05:01,959 --> 00:05:05,120
那就是说你输是RGB三个的话

105
00:05:05,120 --> 00:05:06,920
你只能得到一个单输出通道

106
00:05:06,920 --> 00:05:08,279
就是其实不够

107
00:05:10,079 --> 00:05:13,000
就是说现在我的多输出通道怎么样

108
00:05:13,120 --> 00:05:15,319
我想要我的输出也要多个通道

109
00:05:15,439 --> 00:05:16,120
我们怎么搞

110
00:05:16,319 --> 00:05:19,599
就是说我对每一个输出的通道

111
00:05:19,599 --> 00:05:23,240
我都有一个自己的一个三维的卷集合

112
00:05:25,560 --> 00:05:28,920
然后三维卷集合和输出一个自己的通道

113
00:05:29,240 --> 00:05:31,759
每一个我把它一个叠加起来

114
00:05:31,759 --> 00:05:35,560
就会得到一个多输出通道的一个结果

115
00:05:36,159 --> 00:05:36,360
好

116
00:05:36,360 --> 00:05:37,319
我们具体来看一下

117
00:05:37,319 --> 00:05:40,279
输入还是不变

118
00:05:40,279 --> 00:05:41,519
输入还是你的CI

119
00:05:41,519 --> 00:05:42,519
是你的输入通道

120
00:05:42,519 --> 00:05:43,199
就这个地方

121
00:05:44,120 --> 00:05:46,360
变化的是说我的卷集合

122
00:05:46,360 --> 00:05:48,000
再多了一个CO

123
00:05:48,000 --> 00:05:49,800
就是Channel Output

124
00:05:51,319 --> 00:05:54,159
那么这个是你的每一个对应的

125
00:05:54,159 --> 00:05:56,639
之前我们说过的那一个3D的东西

126
00:05:58,360 --> 00:06:02,279
那我们的输出就是一个CO乘一个MH

127
00:06:02,279 --> 00:06:03,319
乘一个MW

128
00:06:04,959 --> 00:06:06,519
它的意思其实是说

129
00:06:06,519 --> 00:06:08,079
对每一个输入

130
00:06:09,199 --> 00:06:11,279
我把它对应的一个输出通道

131
00:06:11,279 --> 00:06:12,360
那个核拿出来

132
00:06:12,879 --> 00:06:14,720
就会得到一个对应的输出通道

133
00:06:15,240 --> 00:06:16,960
然后我把每一个输出通道

134
00:06:16,960 --> 00:06:18,639
然后一一这么做运算

135
00:06:18,639 --> 00:06:22,000
然后再把它给你concate起来

136
00:06:22,600 --> 00:06:23,680
就得到我们的输出了

137
00:06:24,400 --> 00:06:25,520
所以你可以看到是说

138
00:06:25,520 --> 00:06:28,879
输出里面的第一个通道

139
00:06:29,319 --> 00:06:33,639
其实就是我的完整的输入和我的核

140
00:06:33,639 --> 00:06:34,639
现在我有4D了

141
00:06:35,400 --> 00:06:39,759
它的对应的第一个输出通道

142
00:06:39,759 --> 00:06:44,039
3D的核矩阵做多输入的卷集

143
00:06:45,519 --> 00:06:47,000
然后对所有的I做一次变力

144
00:06:48,000 --> 00:06:48,399
OK

145
00:06:48,399 --> 00:06:49,920
这样子我们就会得到了

146
00:06:49,920 --> 00:06:52,560
我们的多输出通道的一个结果

147
00:06:53,839 --> 00:06:54,519
好这里的话

148
00:06:54,519 --> 00:06:57,399
我们就有可以拓展到

149
00:06:57,399 --> 00:07:00,599
我们之前只有单输入通道和单输出通道

150
00:07:00,599 --> 00:07:03,319
那么现在可以处理多个输入通道

151
00:07:03,319 --> 00:07:04,839
和多个输出通道了

152
00:07:05,240 --> 00:07:08,319
而且输入和输出是你可以想设置

153
00:07:08,319 --> 00:07:09,199
什么样设置什么样

154
00:07:09,680 --> 00:07:11,240
就是说输入和输出通道

155
00:07:11,240 --> 00:07:13,039
其实是没有太多相关性在里面的

156
00:07:14,319 --> 00:07:14,560
OK

157
00:07:18,719 --> 00:07:20,199
我们来看一下

158
00:07:20,199 --> 00:07:21,360
我们为什么要干这个事情

159
00:07:24,199 --> 00:07:26,199
就是说我们之前有个问题有讲过

160
00:07:27,039 --> 00:07:28,839
就是说每个卷集在干什么事情

161
00:07:30,560 --> 00:07:31,680
其实你可以认为是说

162
00:07:31,680 --> 00:07:34,159
每一个输出通道

163
00:07:34,159 --> 00:07:36,000
你可以认为它就在识别

164
00:07:36,000 --> 00:07:37,879
某一个特定的一个模式

165
00:07:39,599 --> 00:07:40,519
这里我们举个例子

166
00:07:42,479 --> 00:07:44,199
假设你的输入是一个毛的话

167
00:07:45,120 --> 00:07:46,680
我们上节课有演示过

168
00:07:46,680 --> 00:07:48,879
你可以通过设置不同的和的

169
00:07:48,879 --> 00:07:50,399
来得到你是要检测边缘

170
00:07:50,959 --> 00:07:53,199
锐化还是要模糊的效果

171
00:07:53,839 --> 00:07:54,599
同样的话

172
00:07:54,599 --> 00:07:56,360
你可以通过学习到

173
00:07:56,839 --> 00:07:59,360
不一样的卷集和的那些参数

174
00:07:59,360 --> 00:08:01,800
来去匹配某一个特定的一个模式

175
00:08:02,759 --> 00:08:03,519
具体举个例子

176
00:08:04,399 --> 00:08:05,240
那么这一个的话

177
00:08:05,240 --> 00:08:06,079
他在干嘛

178
00:08:06,439 --> 00:08:07,959
他去匹配里面

179
00:08:08,480 --> 00:08:11,400
绿色通道里面的某一个点

180
00:08:12,040 --> 00:08:15,360
某一个中间某一个元素的模式

181
00:08:16,720 --> 00:08:18,280
那么这一个就是匹配在

182
00:08:19,000 --> 00:08:20,960
粉红色通道里面一个点

183
00:08:21,480 --> 00:08:22,400
那么这一个是干嘛

184
00:08:22,400 --> 00:08:24,360
这个是一个角度的一个

185
00:08:24,800 --> 00:08:27,960
这个角度的一个边缘的一个纹理

186
00:08:28,440 --> 00:08:31,000
这个是说视频形

187
00:08:31,320 --> 00:08:32,200
这个角度的一个纹理

188
00:08:32,600 --> 00:08:33,680
那么最后这一个就是说

189
00:08:33,680 --> 00:08:35,560
你可以认为是一个边

190
00:08:35,720 --> 00:08:37,720
就是一个横的一个edge

191
00:08:38,960 --> 00:08:40,440
那么你可以认为是说

192
00:08:40,440 --> 00:08:42,400
每一个输出通道

193
00:08:42,400 --> 00:08:44,680
他都可以认为去识别一个

194
00:08:44,680 --> 00:08:46,080
这样子的模式

195
00:08:46,080 --> 00:08:47,200
把你输出出来

196
00:08:47,639 --> 00:08:49,120
所以你这里的话

197
00:08:49,120 --> 00:08:51,320
很有可能就是你的输出通道等于6

198
00:08:51,759 --> 00:08:52,639
就每个通道

199
00:08:52,639 --> 00:08:53,639
你图片进去之后

200
00:08:53,639 --> 00:08:55,360
会输出一个这样子的模式出来

201
00:08:56,320 --> 00:08:57,920
这是你输出通道干的事情

202
00:08:59,040 --> 00:09:01,000
你多输入通道是什么意思呢

203
00:09:01,400 --> 00:09:02,800
输入通道是说

204
00:09:02,800 --> 00:09:05,639
假设我把输出通道的6个通道

205
00:09:05,840 --> 00:09:07,160
丢给下一个层

206
00:09:07,759 --> 00:09:08,639
下一个层就是说

207
00:09:08,879 --> 00:09:11,199
我把每一个通道里面的这些模式

208
00:09:11,199 --> 00:09:11,759
识别出来

209
00:09:11,759 --> 00:09:13,199
然后把它组合起来

210
00:09:13,639 --> 00:09:14,360
我们相加了

211
00:09:14,360 --> 00:09:14,799
对不对

212
00:09:15,519 --> 00:09:17,600
然后我们把这些模式匹配一下

213
00:09:17,600 --> 00:09:19,600
我就是说我按个权重

214
00:09:19,879 --> 00:09:22,279
你想讲我觉得这两个东西比较重要

215
00:09:22,799 --> 00:09:24,480
或者说我觉得这两个东西比较重要

216
00:09:24,480 --> 00:09:27,959
然后把它一按加权一加

217
00:09:28,439 --> 00:09:31,240
就得到一个组合的模式识别

218
00:09:33,959 --> 00:09:34,159
OK

219
00:09:34,159 --> 00:09:36,839
这就是从一个层的角度来看

220
00:09:37,240 --> 00:09:39,879
那么当然是说你对一个深度的

221
00:09:39,879 --> 00:09:41,159
神奇网络你在干什么呢

222
00:09:41,480 --> 00:09:42,559
还有合理的

223
00:09:42,559 --> 00:09:44,000
就是说合理的情况

224
00:09:44,000 --> 00:09:44,600
就是说

225
00:09:44,600 --> 00:09:46,240
当你一个原始图片进来

226
00:09:46,240 --> 00:09:47,480
一个像素进来

227
00:09:47,480 --> 00:09:48,559
那么下面的话

228
00:09:48,559 --> 00:09:50,079
一些层都会识别一些

229
00:09:50,480 --> 00:09:52,279
很局部的

230
00:09:52,600 --> 00:09:54,879
很底层的一些

231
00:09:54,879 --> 00:09:56,439
比如说这个角度的边

232
00:09:56,679 --> 00:09:58,399
那个角度边各种纹理

233
00:09:58,879 --> 00:10:00,399
每个通道会识别这个东西

234
00:10:00,799 --> 00:10:01,879
然后越往上层

235
00:10:01,879 --> 00:10:03,519
上层会不断的把一些

236
00:10:03,839 --> 00:10:05,519
局部的纹理给你组合起来

237
00:10:05,879 --> 00:10:06,240
变成一个

238
00:10:06,240 --> 00:10:07,919
比如说我识别猫的话

239
00:10:07,919 --> 00:10:09,320
我可以先识别猫的一些

240
00:10:09,320 --> 00:10:10,200
胡须的纹理

241
00:10:10,560 --> 00:10:11,840
耳朵的纹理什么东西

242
00:10:11,840 --> 00:10:14,159
然后再往上走的话

243
00:10:14,159 --> 00:10:15,960
那么把这些纹理组合起来

244
00:10:15,960 --> 00:10:16,639
最后组合

245
00:10:16,639 --> 00:10:16,879
组合

246
00:10:16,879 --> 00:10:19,720
说不定在有一在上层的一些

247
00:10:20,560 --> 00:10:21,240
就一层

248
00:10:21,240 --> 00:10:22,919
我识别到这个识别的是

249
00:10:22,919 --> 00:10:24,759
这个通道识别是一个猫头

250
00:10:25,039 --> 00:10:27,279
这个通道识别的是什么猫眼睛

251
00:10:27,480 --> 00:10:27,919
猫

252
00:10:28,200 --> 00:10:29,440
猫脚这些东西

253
00:10:29,799 --> 00:10:30,960
到最上面的就识别

254
00:10:31,240 --> 00:10:32,759
所有这些东西组合起来

255
00:10:32,759 --> 00:10:33,680
变成一只猫

256
00:10:34,399 --> 00:10:36,159
这个就是我们希望他干的事情

257
00:10:36,759 --> 00:10:38,279
多多少少他在干这个事情了

258
00:10:38,840 --> 00:10:41,759
这个就是为什么我们要有多个输入

259
00:10:41,759 --> 00:10:42,960
和输出的通道

260
00:10:43,639 --> 00:10:44,039
OK

261
00:10:46,879 --> 00:10:49,919
然后最后我们来讲一个

262
00:10:50,240 --> 00:10:51,840
很特殊的一个东西

263
00:10:51,840 --> 00:10:53,680
叫做一乘一卷积层

264
00:10:55,000 --> 00:10:56,680
一乘一的卷积层是干嘛

265
00:10:56,879 --> 00:11:00,919
就是说你的通道高和宽

266
00:11:01,279 --> 00:11:03,720
就不是你的卷积和的高和宽

267
00:11:03,720 --> 00:11:04,440
都等于一

268
00:11:06,360 --> 00:11:07,240
意味着说

269
00:11:07,600 --> 00:11:10,840
他不会去识别你的空间信息

270
00:11:10,840 --> 00:11:14,039
因为他每次只看一个像素

271
00:11:14,759 --> 00:11:16,240
他不会去看这个像素周围

272
00:11:16,240 --> 00:11:18,519
所以他不会给你识别出

273
00:11:18,519 --> 00:11:19,919
你这个通道里面

274
00:11:20,759 --> 00:11:22,639
他的空间的模式什么样子

275
00:11:24,279 --> 00:11:25,159
但是他干什么了

276
00:11:25,759 --> 00:11:28,720
他就是给你融合你的不同的通道的信息

277
00:11:29,879 --> 00:11:31,120
我们来看一下这个例子

278
00:11:31,120 --> 00:11:36,840
这个例子说我有一个输入通道为三

279
00:11:36,840 --> 00:11:39,560
然后我的高宽都等于三的一个输入

280
00:11:41,639 --> 00:11:43,960
假设我要输出通道为二

281
00:11:44,519 --> 00:11:45,960
一乘一卷积的话

282
00:11:45,960 --> 00:11:48,879
那就是我的卷积和

283
00:11:49,080 --> 00:11:51,720
卷积和的每个通道里面

284
00:11:51,720 --> 00:11:53,399
它就是一个元素

285
00:11:54,279 --> 00:12:00,639
然后这一个就是我的输出为0的通道

286
00:12:02,000 --> 00:12:03,320
因为它有三个输入为

287
00:12:03,480 --> 00:12:04,399
所以它有三个值

288
00:12:05,080 --> 00:12:09,679
那么这一个就是它的输出为1的通道

289
00:12:10,320 --> 00:12:12,799
它有一个三个这样子卷积

290
00:12:12,799 --> 00:12:13,960
里面的输入通道为三

291
00:12:15,600 --> 00:12:17,840
那么它的输出为0的通道

292
00:12:18,480 --> 00:12:19,000
这个值

293
00:12:20,279 --> 00:12:23,639
就是说我把它对应的输入里面的

294
00:12:23,639 --> 00:12:24,519
那一个像素

295
00:12:25,480 --> 00:12:26,879
每个不同的输入通道

296
00:12:27,519 --> 00:12:29,560
然后做加全和

297
00:12:30,200 --> 00:12:31,320
跟它做加全和

298
00:12:31,320 --> 00:12:33,640
就把它作为输入通道融合

299
00:12:34,400 --> 00:12:36,360
拿到我的输入这个地方

300
00:12:38,560 --> 00:12:39,080
同样道理

301
00:12:39,800 --> 00:12:42,200
假设我是要最后这个元素的话

302
00:12:42,200 --> 00:12:45,360
output channel1的话

303
00:12:46,400 --> 00:12:46,960
就这个地方

304
00:12:48,080 --> 00:12:48,880
我们也换个颜色

305
00:12:50,520 --> 00:12:50,840
这个地方

306
00:12:51,520 --> 00:12:52,240
那么它一样的

307
00:12:52,240 --> 00:12:55,680
它是拿到它对应的输入里面的像素

308
00:12:56,160 --> 00:12:57,400
然后它不同的通道

309
00:12:57,400 --> 00:12:58,640
然后做一个加全和

310
00:12:59,399 --> 00:13:00,279
可以拿到它的输出

311
00:13:02,080 --> 00:13:05,840
所以它就可以认为是不做空间的匹配

312
00:13:05,840 --> 00:13:08,120
只做在输入层

313
00:13:09,279 --> 00:13:11,679
输入的通道和输出的通道之间做融合

314
00:13:13,399 --> 00:13:14,519
它等价于什么东西呢

315
00:13:15,399 --> 00:13:17,840
等价于其实一个东西是说

316
00:13:18,600 --> 00:13:22,840
我把整个输入拉成一个向量

317
00:13:24,080 --> 00:13:26,480
就你的输入假设是nhnw的话

318
00:13:26,759 --> 00:13:29,600
我就拉成一个常为nhnw的向量

319
00:13:30,360 --> 00:13:32,120
因为我就空间信息就没了

320
00:13:32,120 --> 00:13:34,480
然后你的通道数拉成你的一个feature数

321
00:13:34,480 --> 00:13:35,399
就是一个

322
00:13:35,399 --> 00:13:40,039
那么等价于是我把它从reshape成一个nhnw的

323
00:13:40,800 --> 00:13:44,159
你的列数是你的输入通道数的一个矩阵

324
00:13:45,120 --> 00:13:46,960
然后我的和呢

325
00:13:47,560 --> 00:13:52,120
那就是我可以把它重新写成一个coci

326
00:13:52,120 --> 00:13:53,600
因为后面是乘1乘1

327
00:13:53,600 --> 00:13:54,480
我就不要了

328
00:13:54,480 --> 00:13:56,840
就是一个可以认为它就是一个矩阵

329
00:13:56,840 --> 00:13:59,639
那么就是说等价你输入形状为它

330
00:13:59,639 --> 00:14:02,000
权证为它的一个全连阶层

331
00:14:02,000 --> 00:14:04,440
这就是一层一的卷积层干的事情

332
00:14:04,440 --> 00:14:06,519
它就是一个全连阶层

333
00:14:08,399 --> 00:14:10,759
所以就是说它不做任何的空间信息

334
00:14:10,759 --> 00:14:13,240
因为全连阶它其实不考虑空间信息

335
00:14:13,240 --> 00:14:15,320
它只考虑在特征维度

336
00:14:15,320 --> 00:14:17,879
就是输入通道为数的融合

337
00:14:19,360 --> 00:14:20,200
ok

338
00:14:20,200 --> 00:14:23,039
这也是大家如果刷朋友圈的话

339
00:14:23,039 --> 00:14:24,559
最近有一篇论文叫做说

340
00:14:24,759 --> 00:14:28,799
我用mlp能够打败卷积层网络

341
00:14:29,079 --> 00:14:32,839
实际上它用了大量的一层一的卷积层

342
00:14:33,599 --> 00:14:36,519
它其实确实是一层一的卷积层

343
00:14:36,519 --> 00:14:39,079
确实可以认为是一个全连阶层

344
00:14:39,079 --> 00:14:41,159
但是它又可以认为是一个卷积层

345
00:14:41,839 --> 00:14:42,360
ok

346
00:14:43,399 --> 00:14:44,480
这就是一个

347
00:14:45,599 --> 00:14:47,240
特殊的情况的一个卷积层

348
00:14:48,919 --> 00:14:49,199
ok

349
00:14:49,199 --> 00:14:51,199
我们这里就是来仔细看一下

350
00:14:51,320 --> 00:14:53,240
最后的最后我们能够知道说

351
00:14:53,240 --> 00:14:55,120
我们的二维的卷积层

352
00:14:55,320 --> 00:14:57,920
在最通用的情况下是长什么样子的

353
00:14:58,720 --> 00:15:00,920
首先我的输入的维度就是

354
00:15:01,160 --> 00:15:03,520
我有多输入了有一个CI

355
00:15:03,840 --> 00:15:05,960
这个是我的高和我的宽

356
00:15:06,720 --> 00:15:09,879
我们的核的话就是输出的通道数

357
00:15:10,440 --> 00:15:12,040
乘以输入的通道数

358
00:15:12,360 --> 00:15:15,120
乘以我的核的高和核的宽

359
00:15:15,320 --> 00:15:17,560
这是一个4D的一个tensor

360
00:15:18,560 --> 00:15:21,680
那我的偏差就是我每一个输入通道和

361
00:15:21,680 --> 00:15:22,720
每一个输出通道

362
00:15:22,720 --> 00:15:25,360
它都有一个标量的偏差

363
00:15:25,600 --> 00:15:26,920
就是CO×CI

364
00:15:28,200 --> 00:15:29,760
输出就是一个CO

365
00:15:30,320 --> 00:15:31,440
因为CI我就不用管了

366
00:15:31,440 --> 00:15:33,520
我就加掉了

367
00:15:33,760 --> 00:15:38,280
然后你的MH和MW就取决你的核的

368
00:15:38,600 --> 00:15:41,800
KH KW以及它的padding它的shred

369
00:15:41,800 --> 00:15:42,880
就我们之前有讲过

370
00:15:43,960 --> 00:15:46,440
所以就是说这个是一个完整的

371
00:15:46,440 --> 00:15:50,080
二维卷积层它的所有的参数在这个地方

372
00:15:50,680 --> 00:15:52,560
你这么写的话就写成一个

373
00:15:53,480 --> 00:15:55,520
这是一个三维的一个输入

374
00:15:55,520 --> 00:15:57,800
我们没有讲批量层channel

375
00:15:58,920 --> 00:16:01,840
卷积掉我的W是一个4D的一个tensor

376
00:16:02,240 --> 00:16:04,840
再加上我的一个2D的一个偏差

377
00:16:05,120 --> 00:16:07,160
得到一个3D的输出Y

378
00:16:09,280 --> 00:16:10,680
我们来计算复杂度

379
00:16:11,920 --> 00:16:13,840
计算复杂度就是说你要

380
00:16:14,440 --> 00:16:16,320
需要的浮点运算的程度

381
00:16:17,160 --> 00:16:17,960
就浮点运算的话

382
00:16:17,960 --> 00:16:19,520
它的计算复杂度可以算一下

383
00:16:19,520 --> 00:16:22,520
它就等于说你的通道数

384
00:16:23,120 --> 00:16:25,040
这输入通道乘以输出通道

385
00:16:25,520 --> 00:16:27,160
乘以你的核的高

386
00:16:27,160 --> 00:16:28,280
乘以你的核的宽

387
00:16:28,800 --> 00:16:32,200
和你的输出的一个高和宽

388
00:16:33,320 --> 00:16:36,600
你简单认为是说对每一个输出的像数

389
00:16:37,640 --> 00:16:42,120
我都是需要对所有的输入通道做融合

390
00:16:42,440 --> 00:16:44,760
然后输出通道我要每一个要算一次

391
00:16:45,080 --> 00:16:48,360
然后每一个点是要一个核

392
00:16:48,559 --> 00:16:49,879
一个窗口要去扫一下

393
00:16:49,879 --> 00:16:51,840
把它得乘做了一架

394
00:16:51,840 --> 00:16:54,799
所以你有6个元素的相乘

395
00:16:56,840 --> 00:16:57,519
计算复杂度

396
00:16:57,799 --> 00:17:00,279
假设我的通道数都是等于100

397
00:17:00,759 --> 00:17:02,120
我的等于5

398
00:17:02,480 --> 00:17:04,000
我等于64的话

399
00:17:04,000 --> 00:17:06,680
那就是一个G的flops

400
00:17:06,680 --> 00:17:10,720
就是一个G就是10亿个浮点运算

401
00:17:10,720 --> 00:17:15,279
那其实挺大的一个数字了

402
00:17:15,920 --> 00:17:18,559
假设你有10层这样子的卷积层

403
00:17:19,160 --> 00:17:20,519
你有一百万个样本

404
00:17:21,519 --> 00:17:22,279
就是100万样本

405
00:17:22,279 --> 00:17:23,440
就是imageNet的

406
00:17:23,440 --> 00:17:26,480
就标准大家一般用100万样本是挺正常的

407
00:17:27,079 --> 00:17:29,400
那么你就有10个P的复杂度

408
00:17:30,360 --> 00:17:32,680
就是做一次不做反向

409
00:17:32,880 --> 00:17:34,039
做反向要翻倍

410
00:17:34,680 --> 00:17:36,480
就做全前向的话

411
00:17:36,480 --> 00:17:37,440
那就10个P

412
00:17:38,720 --> 00:17:39,519
10个P要怎么办

413
00:17:40,240 --> 00:17:41,440
假设你的CPU的话

414
00:17:41,440 --> 00:17:42,319
我们有讲过

415
00:17:42,319 --> 00:17:45,879
你大概是0.15个Tflops每秒钟

416
00:17:46,680 --> 00:17:47,839
那么你就是说

417
00:17:47,839 --> 00:17:50,119
我这个10层的卷积网络

418
00:17:50,440 --> 00:17:52,359
扫一遍这个数据18个小时

419
00:17:53,839 --> 00:17:55,079
假设用GPU的话

420
00:17:55,079 --> 00:17:56,599
你可以现在GPU能做到

421
00:17:56,599 --> 00:17:58,799
比如说12个Tflops每秒

422
00:17:59,160 --> 00:18:01,279
那么你扫一遍一个数据是14分钟

423
00:18:03,160 --> 00:18:06,160
假设你要做一个反向运算

424
00:18:06,160 --> 00:18:07,359
你要另外14分钟

425
00:18:07,359 --> 00:18:08,480
那就28分钟

426
00:18:08,759 --> 00:18:10,160
假设你要数据

427
00:18:10,160 --> 00:18:12,759
你要读个100遍的话

428
00:18:12,759 --> 00:18:16,120
那就是一次扫一遍就是半小时

429
00:18:16,839 --> 00:18:20,400
假设你要扫个100次数据的话

430
00:18:20,400 --> 00:18:21,559
那就是50个小时

431
00:18:21,559 --> 00:18:22,880
就做一次训练的成本

432
00:18:23,880 --> 00:18:25,319
所以这个大概也是说

433
00:18:25,680 --> 00:18:28,680
你用imageNet做一个单卡的话

434
00:18:28,880 --> 00:18:31,039
你用大概要几十个小时的样子

435
00:18:31,799 --> 00:18:35,880
所以卷积层其实计算量也不低了

436
00:18:36,480 --> 00:18:37,200
但反过来讲

437
00:18:37,200 --> 00:18:40,360
它的模型的大小是很小的

438
00:18:40,360 --> 00:18:42,720
因为它的模型只要存一个

439
00:18:43,480 --> 00:18:46,520
100×100×5×5的一个小的

440
00:18:46,520 --> 00:18:47,920
一个4D的一个张量

441
00:18:48,640 --> 00:18:51,240
所以它的模型存储倒是挺小的

442
00:18:51,240 --> 00:18:52,640
但是它计算量一点都不小

443
00:18:53,760 --> 00:18:54,120
OK

444
00:18:55,440 --> 00:18:56,320
最后做一个总结

445
00:18:58,080 --> 00:18:59,280
总结我们再介绍了

446
00:18:59,680 --> 00:19:03,160
输出的通道数是卷积层的超参数

447
00:19:04,040 --> 00:19:04,840
输入不是

448
00:19:04,840 --> 00:19:06,759
输入是前一个的超参数

449
00:19:06,759 --> 00:19:08,200
不是我不是这一层的

450
00:19:09,680 --> 00:19:11,440
每一个输入通道

451
00:19:11,440 --> 00:19:13,920
它都有独立的二维的卷积核

452
00:19:14,960 --> 00:19:16,440
所有输入通道的结果

453
00:19:16,440 --> 00:19:18,560
相加得到一个输出的通道

454
00:19:19,720 --> 00:19:20,880
每一个输出的通道

455
00:19:20,880 --> 00:19:23,040
它都有独立的三维的卷积核

456
00:19:23,600 --> 00:19:25,000
所以最后你的卷积核

457
00:19:25,000 --> 00:19:26,560
是一个四维的一个张量

458
00:19:27,400 --> 00:19:30,440
这就是多输入和多输出通道的

459
00:19:30,440 --> 00:19:32,320
卷积层的一个介绍

