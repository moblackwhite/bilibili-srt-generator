1
00:00:00,000 --> 00:00:03,399
BERT V条的时候是固定于训练的模型吗?

2
00:00:03,399 --> 00:00:04,400
一般不固定

3
00:00:04,400 --> 00:00:06,400
这两个问题都是一个

4
00:00:06,400 --> 00:00:07,799
就一般是不固定的

5
00:00:07,799 --> 00:00:10,800
就是说你会所有的权重会重新跟着训练

6
00:00:10,800 --> 00:00:11,800
也是一样的

7
00:00:11,800 --> 00:00:16,000
就是说你可以固定住底部的一些层

8
00:00:16,000 --> 00:00:18,400
让你的加速训练快一点

9
00:00:18,400 --> 00:00:22,400
你也可以通常来说不固定效果更好

10
00:00:22,400 --> 00:00:25,400
固定会快

11
00:00:25,400 --> 00:00:26,800
当然说你可以试一下

12
00:00:26,800 --> 00:00:28,800
就是说你可以固定哪几层

13
00:00:28,800 --> 00:00:29,800
你是可以去试的

14
00:00:29,800 --> 00:00:36,000
问题是为什么把图形化的东西删掉之后

15
00:00:36,000 --> 00:00:37,600
反而训练不了

16
00:00:37,600 --> 00:00:41,799
应该能吧

17
00:00:41,799 --> 00:00:43,399
应该能训练

18
00:00:43,399 --> 00:00:45,400
拍图是没有用各种异步的东西

19
00:00:45,400 --> 00:00:46,400
所以应该不画图

20
00:00:46,400 --> 00:00:47,400
应该是可以吧

21
00:00:47,400 --> 00:00:52,600
Ulo的代码也可以分享到课程中

22
00:00:52,600 --> 00:00:55,000
我觉得你的问题是说我们要不要就是说

23
00:00:55,000 --> 00:00:57,799
给大家试一下Ulo的代码

24
00:00:58,800 --> 00:01:00,600
就我们之前也讲过

25
00:01:00,600 --> 00:01:02,800
我们之所以没讲Ulo这个东西是因为

26
00:01:02,800 --> 00:01:04,400
Ulo你看V3V4V5

27
00:01:04,400 --> 00:01:08,400
就是说它里面已经跟之前的Ulo长得很不一样了

28
00:01:08,400 --> 00:01:09,200
这是一点

29
00:01:09,200 --> 00:01:11,800
第二点是说它里面的技术细节太

30
00:01:11,800 --> 00:01:15,800
就是说如果大家回到那个纯Python的

31
00:01:15,800 --> 00:01:16,800
就是纯简单实现

32
00:01:16,800 --> 00:01:18,400
Ulo不见得比谁好

33
00:01:18,400 --> 00:01:19,800
Ulo不见得比SSD好

34
00:01:19,800 --> 00:01:20,800
不见得比谁好

35
00:01:20,800 --> 00:01:22,200
就是Ulo之所以比人家好

36
00:01:22,200 --> 00:01:25,600
是因为Ulo一开始出现效果很差的

37
00:01:25,600 --> 00:01:28,600
是因为后面加了大量的技术细节在里面

38
00:01:28,600 --> 00:01:30,800
使得它Ulo现在是变得比较好了

39
00:01:30,800 --> 00:01:36,800
但是我们大家用Ulo不是因为Ulo本身怎么样

40
00:01:36,800 --> 00:01:39,600
纯粹是因为它这些本身加它本身很快

41
00:01:39,600 --> 00:01:40,800
再加上它的技术细节

42
00:01:40,800 --> 00:01:42,200
使得它的进度很高

43
00:01:42,200 --> 00:01:44,200
所以如果我们就只给大家实现个本身

44
00:01:44,400 --> 00:01:45,200
大家可能兴趣不大

45
00:01:45,200 --> 00:01:48,000
所以我们就没有给大家讲这个事情

46
00:01:49,400 --> 00:01:51,200
BERT在实际应用中怎么部署

47
00:01:51,400 --> 00:01:53,200
是用C++写预测代码吗

48
00:01:53,600 --> 00:01:57,000
BERT不会用C++写

49
00:01:57,200 --> 00:01:59,400
BERT一般你可以转成你要的

50
00:01:59,400 --> 00:02:00,799
就是BERT的模型

51
00:02:01,000 --> 00:02:03,799
就是你可以转成compile到C++

52
00:02:04,000 --> 00:02:05,200
就基本上框架都支持

53
00:02:05,200 --> 00:02:07,000
TensorFlow是能够到C++的

54
00:02:07,600 --> 00:02:10,400
PyTorch你可以做ONNX或者做TorchScript

55
00:02:10,400 --> 00:02:12,199
都可以到一个C++的后端

56
00:02:12,800 --> 00:02:13,800
当然是说你反过来讲

57
00:02:13,800 --> 00:02:16,000
你就是说BERT那个抽Tokenization

58
00:02:16,000 --> 00:02:18,199
Tokenization现在也是用C++实现的

59
00:02:18,599 --> 00:02:20,599
所以就是说整个BERT那一块

60
00:02:20,599 --> 00:02:22,400
是能够全部搬到C++的

61
00:02:22,800 --> 00:02:24,000
但是我觉得搬到C++

62
00:02:24,000 --> 00:02:25,200
不能解决你核心的问题

63
00:02:25,200 --> 00:02:25,800
BERT很慢

64
00:02:25,800 --> 00:02:27,599
BERT是一句很

65
00:02:27,599 --> 00:02:30,200
BERT比ResNet那些东西慢多了

66
00:02:31,800 --> 00:02:33,000
所以就是说

67
00:02:33,000 --> 00:02:34,800
因为我不是说它慢多了

68
00:02:34,800 --> 00:02:36,400
因为图片你的东西很大

69
00:02:36,400 --> 00:02:38,800
图片一给你一个几百K或几十K的东西

70
00:02:38,800 --> 00:02:41,400
你说我做个一毫秒是可以的

71
00:02:41,800 --> 00:02:42,599
但一个句子

72
00:02:43,400 --> 00:02:44,000
对吧

73
00:02:44,599 --> 00:02:46,599
10个100个句子也就1K对吧

74
00:02:46,599 --> 00:02:47,599
就是说你这张图片

75
00:02:47,599 --> 00:02:49,599
可以抵1000个1万个句子

76
00:02:49,599 --> 00:02:50,599
但是一个句子

77
00:02:50,599 --> 00:02:52,000
你可能10001万个句子

78
00:02:52,000 --> 00:02:52,800
你要做的话

79
00:02:53,199 --> 00:02:54,199
你真的就是

80
00:02:54,800 --> 00:02:55,800
可能就10毫秒

81
00:02:56,199 --> 00:02:57,000
可能100毫秒

82
00:02:58,199 --> 00:02:58,800
这样子的话

83
00:02:58,800 --> 00:03:01,199
就是BERT的开销是非常大的

84
00:03:01,199 --> 00:03:04,400
因为图片相对来说

85
00:03:05,199 --> 00:03:06,000
没那么多一点

86
00:03:06,000 --> 00:03:08,199
在现实生活中图片的流量

87
00:03:08,199 --> 00:03:09,599
因为图片毕竟占流量

88
00:03:10,000 --> 00:03:12,599
但文本确实很容易做得很大

89
00:03:12,599 --> 00:03:14,400
所以在实际部署中

90
00:03:14,400 --> 00:03:15,599
你要考虑的是

91
00:03:15,599 --> 00:03:18,199
你怎么样去把整个

92
00:03:18,800 --> 00:03:19,400
做文本的时候

93
00:03:19,400 --> 00:03:21,199
把整个BERT的性能提升出来

94
00:03:21,200 --> 00:03:21,600
OK

95
00:03:21,600 --> 00:03:23,200
这是你要考虑的东西

96
00:03:28,000 --> 00:03:28,400
OK

97
00:03:28,400 --> 00:03:29,200
另外一个问题就是说

98
00:03:29,200 --> 00:03:30,800
如果设备性能没有很高

99
00:03:30,800 --> 00:03:32,400
是不是不建议用BERT去做

100
00:03:32,400 --> 00:03:33,600
如果你的性能性

101
00:03:33,600 --> 00:03:35,800
如果你的设备性能没有很高

102
00:03:35,800 --> 00:03:36,600
如果你是

103
00:03:37,600 --> 00:03:39,600
你可以用比较简化的BERT

104
00:03:39,800 --> 00:03:42,000
就BERT有一个叫Distillation

105
00:03:42,000 --> 00:03:43,200
蒸流吧

106
00:03:43,200 --> 00:03:44,600
中文叫做蒸流

107
00:03:44,600 --> 00:03:46,400
就是BERT我训练好之后

108
00:03:46,400 --> 00:03:48,000
我可以通过Distillation

109
00:03:48,000 --> 00:03:50,000
模型变到以前的1 1 10

110
00:03:50,000 --> 00:03:51,000
或者1%

111
00:03:51,000 --> 00:03:54,000
这一块应该是比较在很多研究在做

112
00:03:54,199 --> 00:03:55,400
你可以关注一下

113
00:03:55,400 --> 00:03:56,400
我知道一些结果

114
00:03:56,400 --> 00:03:58,800
就是说做到1 1 10

115
00:03:58,800 --> 00:04:00,199
或者1%

116
00:04:00,199 --> 00:04:01,000
1 1 10

117
00:04:01,199 --> 00:04:03,000
可能精度都不会损失太多

118
00:04:03,000 --> 00:04:04,000
所以说BERT里面

119
00:04:04,000 --> 00:04:05,199
大量的冗余的东西

120
00:04:05,199 --> 00:04:06,000
Transformer里面

121
00:04:06,000 --> 00:04:07,400
大量的冗余的东西

122
00:04:07,599 --> 00:04:10,000
所以你可以训练一个大的模型

123
00:04:10,000 --> 00:04:11,400
然后再通过Distillation

124
00:04:11,599 --> 00:04:12,800
整个模型变得很小

125
00:04:13,199 --> 00:04:14,599
然后你可以

126
00:04:14,599 --> 00:04:17,600
还是有可能做到小的设备上

127
00:04:18,000 --> 00:04:18,399
这一块

128
00:04:18,399 --> 00:04:20,399
我觉得研究进展很快

129
00:04:20,599 --> 00:04:21,399
我今天说了

130
00:04:21,399 --> 00:04:22,599
可能明天就被说

131
00:04:22,599 --> 00:04:23,399
可以了

132
00:04:23,399 --> 00:04:24,799
我们现在可以手机可以跑了

133
00:04:25,599 --> 00:04:26,599
真的这一块

134
00:04:26,599 --> 00:04:28,199
我觉得我就不给大家

135
00:04:28,199 --> 00:04:29,599
一定说立个什么flag

136
00:04:30,000 --> 00:04:32,799
我觉得大家有那么多人在做这一块

137
00:04:33,799 --> 00:04:35,199
也许现在已经可以了

138
00:04:35,199 --> 00:04:36,799
或者未来在不久的时候

139
00:04:36,799 --> 00:04:38,799
你可以真的做到比较低功耗的

140
00:04:39,000 --> 00:04:40,199
比较小一点的心情

141
00:04:40,399 --> 00:04:41,000
都是可以的

142
00:04:41,199 --> 00:04:43,000
我是挺乐观在这一块的

